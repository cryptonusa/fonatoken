{
	"id": 0,
	"name": "Truffle Decoding and Encoding",
	"kind": 0,
	"flags": {},
	"children": [
		{
			"id": 1,
			"name": "@truffle/codec",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/home/sniffnoy/truffle/truffle/packages/codec/lib/index.ts",
			"comment": {
				"shortText": "# Truffle Codec",
				"text": "This module provides low-level decoding and encoding functionality for\nSolidity and the Solidity ABI.  Many parts of this module are intended\nprimarily for internal use by Truffle and so remain largely undocumented,\nbut some of its types are also output by @truffle/decoder, which provides\na higher-level interface to much of this module's functionality.\n\n## If you're here from Truffle Decoder\n\nIf you're coming here from [[@truffle/decoder]], you probably just want to\nknow about the parts that are relevant to you.  These are:\n\n* The \"data\" category (specifically [[Format]])\n* The \"output\" and \"enumerations\" categories ([[CalldataDecoding]], [[LogDecoding]], et al., see below)\n* The \"errors\" category (specifically [[UnknownUserDefinedTypeError]])\n\nNote that the data category is largely scarce in\ndocumentation, although that's because it's largely self-explanatory.\n\nIf you're not just here from Truffle Decoder, but are actually\ninterested in the lower-level workings, read on.\n\n## How this module differs from Truffle Decoder\n\nUnlike Truffle Decoder, this library makes no network connections\nand avoids dependencies that do.  Instead, its decoding functionality\nis generator-based; calling one of the decoding functions returns a\ngenerator.  This generator's `next()` function may return a finished\nresult, or it may return a request for more information.  It is up to\nthe caller to fulfill these requests -- say, by making a network\nconnection of its own.  This is how @truffle/decoder works; @truffle/codec\nmakes requests, and @truffle/decoder fulfills them by\nlooking up the necessary information on the blockchain.\n\nThis library also provides additional functionality beyond what's used by\nTruffle Decoder.  In particular, this library also exists to support Truffle\nDebugger, and so it provides encoding functionality not just for\ntransactions, logs, and state variables, but also for Solidity variables\nduring transaction execution, including circularity detection for memroy\nstructures.  It includes functionality for decoding Solidity's internal\nfunction pointers, which the debugger uses, but which Truffle Decoder\ncurrently does not (although this is planned for the future).\n\nThere is also functionality for decoding return values and revert messages\nthat goes beyond what's currently available in @truffle/decoder; this may get\na better interface in the future.\n\n## How to use\n\nYou should probably use [[@truffle/decoder]] instead, if your use case doesn't\npreclude it.  This module has little documentation, where it has any at all,\nand it's likely that parts of its interface may change (particularly\nregarding allocation).  That said, if you truly need the functionality here,\nTruffle Decoder can perhaps serve as something of a reference implementation\n(and perhaps Truffle Debugger as well, though that code is much harder to\nread or copy).\n"
			},
			"children": [
				{
					"id": 957,
					"name": "AbiData",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "For allocation, encoding, and decoding of locations related to the ABI\n(calldata in Solidity, events, etc.)"
					},
					"children": [
						{
							"id": 958,
							"name": "Allocate",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1036,
									"name": "AbiAllocationAndMode",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1037,
											"name": "allocation",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/index.ts",
													"line": 496,
													"character": 12
												}
											],
											"type": {
												"type": "reference",
												"name": "AbiAllocation"
											}
										},
										{
											"id": 1038,
											"name": "mode",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/index.ts",
													"line": 497,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "DecodingMode",
												"id": 736
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1037,
												1038
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 495,
											"character": 30
										}
									]
								},
								{
									"id": 994,
									"name": "AbiAllocationInfo",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 997,
											"name": "allocations",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/index.ts",
													"line": 48,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"name": "AbiAllocations",
												"id": 960
											}
										},
										{
											"id": 996,
											"name": "dynamic",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/index.ts",
													"line": 47,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 995,
											"name": "size",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/index.ts",
													"line": 46,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												997,
												996,
												995
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 45,
											"character": 27
										}
									]
								},
								{
									"id": 960,
									"name": "AbiAllocations",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"indexSignature": [
										{
											"id": 961,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 962,
													"name": "id",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "AbiAllocation"
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 32,
											"character": 31
										}
									]
								},
								{
									"id": 963,
									"name": "AbiSizeInfo",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 965,
											"name": "dynamic",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 23,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 964,
											"name": "size",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 22,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												965,
												964
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 21,
											"character": 28
										}
									]
								},
								{
									"id": 966,
									"name": "CalldataAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 967,
											"name": "abi",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 78,
													"character": 5
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "FunctionAbiEntry",
														"id": 1168
													},
													{
														"type": "reference",
														"name": "ConstructorAbiEntry",
														"id": 1176
													}
												]
											}
										},
										{
											"id": 970,
											"name": "allocationMode",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 81,
													"character": 16
												}
											],
											"type": {
												"type": "reference",
												"name": "DecodingMode",
												"id": 736
											}
										},
										{
											"id": 969,
											"name": "arguments",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 80,
													"character": 11
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "CalldataArgumentAllocation"
												}
											}
										},
										{
											"id": 968,
											"name": "offset",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 79,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												967,
												970,
												969,
												968
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 77,
											"character": 35
										}
									]
								},
								{
									"id": 976,
									"name": "CalldataAndReturndataAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 977,
											"name": "input",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 73,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"name": "CalldataAllocation",
												"id": 966
											}
										},
										{
											"id": 978,
											"name": "output",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 74,
													"character": 8
												}
											],
											"type": {
												"type": "reference",
												"name": "ReturndataAllocation",
												"id": 971
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												977,
												978
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 72,
											"character": 48
										}
									]
								},
								{
									"id": 979,
									"name": "ContractAllocationInfo",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 980,
											"name": "abi",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 12,
													"character": 5
												}
											],
											"type": {
												"type": "reference",
												"name": "AbiData.Abi",
												"id": 1166
											}
										},
										{
											"id": 986,
											"name": "compilationId",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 18,
													"character": 15
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 985,
											"name": "compiler",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 17,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "CompilerVersion",
												"id": 1743
											}
										},
										{
											"id": 983,
											"name": "constructorContext",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 15,
													"character": 20
												}
											],
											"type": {
												"type": "reference",
												"name": "DecoderContext",
												"id": 1807
											}
										},
										{
											"id": 981,
											"name": "contractNode",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 13,
													"character": 14
												}
											],
											"type": {
												"type": "reference",
												"name": "AstNode",
												"id": 1532
											}
										},
										{
											"id": 982,
											"name": "deployedContext",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 14,
													"character": 17
												}
											],
											"type": {
												"type": "reference",
												"name": "DecoderContext",
												"id": 1807
											}
										},
										{
											"id": 984,
											"name": "immutableReferences",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 16,
													"character": 21
												}
											],
											"type": {
												"type": "reference",
												"name": "ImmutableReferences"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												980,
												986,
												985,
												983,
												981,
												982,
												984
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 11,
											"character": 39
										}
									]
								},
								{
									"id": 987,
									"name": "EventAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 988,
											"name": "abi",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 117,
													"character": 5
												}
											],
											"type": {
												"type": "reference",
												"name": "EventAbiEntry",
												"id": 1189
											}
										},
										{
											"id": 993,
											"name": "allocationMode",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 122,
													"character": 16
												}
											],
											"type": {
												"type": "reference",
												"name": "DecodingMode",
												"id": 736
											}
										},
										{
											"id": 991,
											"name": "anonymous",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 120,
													"character": 11
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 992,
											"name": "arguments",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 121,
													"character": 11
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "EventArgumentAllocation"
												}
											}
										},
										{
											"id": 989,
											"name": "contextHash",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 118,
													"character": 13
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 990,
											"name": "definedIn",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 119,
													"character": 11
												}
											],
											"type": {
												"type": "reference",
												"name": "Format.Types.ContractType",
												"id": 135
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												988,
												993,
												991,
												992,
												989,
												990
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 116,
											"character": 32
										}
									]
								},
								{
									"id": 998,
									"name": "EventParameterInfo",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1001,
											"name": "indexed",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/index.ts",
													"line": 54,
													"character": 9
												},
												{
													"fileName": "codec/lib/abi-data/allocate/index.ts",
													"line": 560,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 1000,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/index.ts",
													"line": 53,
													"character": 6
												},
												{
													"fileName": "codec/lib/abi-data/allocate/index.ts",
													"line": 558,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 999,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/index.ts",
													"line": 52,
													"character": 6
												},
												{
													"fileName": "codec/lib/abi-data/allocate/index.ts",
													"line": 559,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Format.Types.Type",
												"id": 5
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1001,
												1000,
												999
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 51,
											"character": 28
										},
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 557,
											"character": 28
										}
									]
								},
								{
									"id": 971,
									"name": "ReturndataAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 974,
											"name": "allocationMode",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 142,
													"character": 16
												}
											],
											"type": {
												"type": "reference",
												"name": "DecodingMode",
												"id": 736
											}
										},
										{
											"id": 973,
											"name": "arguments",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 141,
													"character": 11
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "ReturndataArgumentAllocation"
												}
											}
										},
										{
											"id": 975,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 143,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "ReturndataKind"
											}
										},
										{
											"id": 972,
											"name": "selector",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 140,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												974,
												973,
												975,
												972
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 139,
											"character": 37
										}
									]
								},
								{
									"id": 959,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:abi-data:allocate\")"
								},
								{
									"id": 1017,
									"name": "abiSizeAndAllocate",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1018,
											"name": "abiSizeAndAllocate",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1019,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													}
												},
												{
													"id": 1020,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 166
													}
												},
												{
													"id": 1021,
													"name": "existingAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "AbiAllocations",
														"id": 960
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "AbiAllocationInfo",
												"id": 994
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 157,
											"character": 27
										}
									]
								},
								{
									"id": 1022,
									"name": "abiSizeInfo",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isProtected": true,
										"isExported": true
									},
									"signatures": [
										{
											"id": 1023,
											"name": "abiSizeInfo",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {
												"isProtected": true
											},
											"comment": {},
											"parameters": [
												{
													"id": 1024,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													}
												},
												{
													"id": 1025,
													"name": "allocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "AbiAllocations",
														"id": 960
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "AbiSizeInfo",
												"id": 963
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 308,
											"character": 27
										}
									]
								},
								{
									"id": 1026,
									"name": "allocateCalldataAndReturndata",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1027,
											"name": "allocateCalldataAndReturndata",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1028,
													"name": "abiEntry",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "FunctionAbiEntry",
																"id": 1168
															},
															{
																"type": "reference",
																"name": "ConstructorAbiEntry",
																"id": 1176
															}
														]
													}
												},
												{
													"id": 1029,
													"name": "contractNode",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "AstNode",
																"id": 1532
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												},
												{
													"id": 1030,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNodes",
														"id": 1577
													}
												},
												{
													"id": 1031,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 166
													}
												},
												{
													"id": 1032,
													"name": "abiAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AbiAllocations",
														"id": 960
													}
												},
												{
													"id": 1033,
													"name": "compilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 1034,
													"name": "compiler",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "CompilerVersion",
																"id": 1743
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												},
												{
													"id": 1035,
													"name": "constructorContext",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "DecoderContext",
														"id": 1807
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "CalldataAndReturndataAllocation",
														"id": 976
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 323,
											"character": 38
										}
									]
								},
								{
									"id": 1039,
									"name": "allocateDataArguments",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1040,
											"name": "allocateDataArguments",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1041,
													"name": "fullModeParameters",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "array",
																"elementType": {
																	"type": "reference",
																	"name": "AstNode",
																	"id": 1532
																}
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												},
												{
													"id": 1042,
													"name": "abiParameters",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "AbiParameter",
															"id": 1194
														}
													}
												},
												{
													"id": 1043,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 166
													}
												},
												{
													"id": 1044,
													"name": "abiAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AbiAllocations",
														"id": 960
													}
												},
												{
													"id": 1045,
													"name": "compilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 1046,
													"name": "compiler",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "CompilerVersion",
																"id": 1743
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												},
												{
													"id": 1047,
													"name": "offset",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													},
													"defaultValue": "0"
												}
											],
											"type": {
												"type": "reference",
												"name": "AbiAllocationAndMode",
												"id": 1036
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 503,
											"character": 30
										}
									]
								},
								{
									"id": 1048,
									"name": "allocateEvent",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1049,
											"name": "allocateEvent",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1050,
													"name": "abiEntry",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EventAbiEntry",
														"id": 1189
													}
												},
												{
													"id": 1051,
													"name": "contractNode",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "AstNode",
																"id": 1532
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												},
												{
													"id": 1052,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNodes",
														"id": 1577
													}
												},
												{
													"id": 1053,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 166
													}
												},
												{
													"id": 1054,
													"name": "abiAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AbiAllocations",
														"id": 960
													}
												},
												{
													"id": 1055,
													"name": "compilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 1056,
													"name": "compiler",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "CompilerVersion",
																"id": 1743
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "EventAllocation",
														"id": 987
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 565,
											"character": 22
										}
									]
								},
								{
									"id": 1010,
									"name": "allocateMembers",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1011,
											"name": "allocateMembers",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1012,
													"name": "parentId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 1013,
													"name": "members",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "NameTypePair",
															"id": 94
														}
													}
												},
												{
													"id": 1014,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 166
													}
												},
												{
													"id": 1015,
													"name": "existingAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AbiAllocations",
														"id": 960
													}
												},
												{
													"id": 1016,
													"name": "start",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													},
													"defaultValue": "0"
												}
											],
											"type": {
												"type": "reference",
												"name": "AbiAllocations",
												"id": 960
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 94,
											"character": 24
										}
									]
								},
								{
									"id": 1005,
									"name": "allocateStruct",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1006,
											"name": "allocateStruct",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1007,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.StructType",
														"id": 93
													}
												},
												{
													"id": 1008,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 166
													}
												},
												{
													"id": 1009,
													"name": "existingAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AbiAllocations",
														"id": 960
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "AbiAllocations",
												"id": 960
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 77,
											"character": 23
										}
									]
								},
								{
									"id": 1110,
									"name": "contextHashForKey",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1111,
											"name": "contextHashForKey",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1112,
													"name": "key",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 1125,
											"character": 26
										}
									]
								},
								{
									"id": 1067,
									"name": "defaultConstructorAllocation",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1068,
											"name": "defaultConstructorAllocation",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1069,
													"name": "constructorContext",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderContext",
														"id": 1807
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "CalldataAndReturndataAllocation",
														"id": 976
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 810,
											"character": 37
										}
									]
								},
								{
									"id": 1002,
									"name": "getAbiAllocations",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1003,
											"name": "getAbiAllocations",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1004,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 166
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "AbiAllocations",
												"id": 960
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 57,
											"character": 33
										}
									]
								},
								{
									"id": 1075,
									"name": "getCalldataAllocations",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1076,
											"name": "getCalldataAllocations",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1077,
													"name": "contracts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "ContractAllocationInfo",
															"id": 979
														}
													}
												},
												{
													"id": 1078,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 1079,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"indexSignature": [
																{
																	"id": 1080,
																	"name": "__index",
																	"kind": 8192,
																	"kindString": "Index signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 1081,
																			"name": "compilationId",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	],
																	"type": {
																		"type": "reference",
																		"name": "AstNodes",
																		"id": 1577
																	}
																}
															],
															"sources": [
																{
																	"fileName": "codec/lib/abi-data/allocate/index.ts",
																	"line": 837,
																	"character": 24
																}
															]
														}
													}
												},
												{
													"id": 1082,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 166
													}
												},
												{
													"id": 1083,
													"name": "abiAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AbiAllocations",
														"id": 960
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "CalldataAllocations"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 835,
											"character": 38
										}
									]
								},
								{
									"id": 1057,
									"name": "getCalldataAllocationsForContract",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1058,
											"name": "getCalldataAllocationsForContract",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1059,
													"name": "abi",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AbiData.Abi",
														"id": 1166
													}
												},
												{
													"id": 1060,
													"name": "contractNode",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1532
													}
												},
												{
													"id": 1061,
													"name": "constructorContext",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderContext",
														"id": 1807
													}
												},
												{
													"id": 1062,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNodes",
														"id": 1577
													}
												},
												{
													"id": 1063,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 166
													}
												},
												{
													"id": 1064,
													"name": "abiAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AbiAllocations",
														"id": 960
													}
												},
												{
													"id": 1065,
													"name": "compilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 1066,
													"name": "compiler",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "CompilerVersion",
														"id": 1743
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "CalldataAllocationTemporary"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 747,
											"character": 42
										}
									]
								},
								{
									"id": 1093,
									"name": "getEventAllocations",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1094,
											"name": "getEventAllocations",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1095,
													"name": "contracts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "ContractAllocationInfo",
															"id": 979
														}
													}
												},
												{
													"id": 1096,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 1097,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"indexSignature": [
																{
																	"id": 1098,
																	"name": "__index",
																	"kind": 8192,
																	"kindString": "Index signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 1099,
																			"name": "compilationId",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	],
																	"type": {
																		"type": "reference",
																		"name": "AstNodes",
																		"id": 1577
																	}
																}
															],
															"sources": [
																{
																	"fileName": "codec/lib/abi-data/allocate/index.ts",
																	"line": 904,
																	"character": 24
																}
															]
														}
													}
												},
												{
													"id": 1100,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 166
													}
												},
												{
													"id": 1101,
													"name": "abiAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AbiAllocations",
														"id": 960
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "EventAllocations"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 902,
											"character": 35
										}
									]
								},
								{
									"id": 1084,
									"name": "getEventAllocationsForContract",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1085,
											"name": "getEventAllocationsForContract",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1086,
													"name": "abi",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AbiData.Abi",
														"id": 1166
													}
												},
												{
													"id": 1087,
													"name": "contractNode",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "AstNode",
																"id": 1532
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												},
												{
													"id": 1088,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNodes",
														"id": 1577
													}
												},
												{
													"id": 1089,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 166
													}
												},
												{
													"id": 1090,
													"name": "abiAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AbiAllocations",
														"id": 960
													}
												},
												{
													"id": 1091,
													"name": "compilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 1092,
													"name": "compiler",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "CompilerVersion",
																"id": 1743
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "EventAllocationTemporary"
												}
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 868,
											"character": 39
										}
									]
								},
								{
									"id": 1107,
									"name": "hasContext",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1108,
											"name": "hasContext",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1109,
													"name": "key",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 1121,
											"character": 19
										}
									]
								},
								{
									"id": 1102,
									"name": "makeContractKey",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1103,
											"name": "makeContractKey",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1104,
													"name": "context",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "DecoderContext",
																"id": 1807
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												},
												{
													"id": 1105,
													"name": "id",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 1106,
													"name": "compilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 1113,
											"character": 24
										}
									]
								},
								{
									"id": 1070,
									"name": "constructorOutputAllocation",
									"kind": 2097152,
									"kindString": "Object literal",
									"flags": {
										"isConst": true
									},
									"children": [
										{
											"id": 1072,
											"name": "allocationMode",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/index.ts",
													"line": 830,
													"character": 16
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "full"
											},
											"defaultValue": " \"full\" as const"
										},
										{
											"id": 1074,
											"name": "arguments",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/index.ts",
													"line": 832,
													"character": 11
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "ReturndataArgumentAllocation"
												}
											},
											"defaultValue": " [] as ReturndataArgumentAllocation[]"
										},
										{
											"id": 1073,
											"name": "kind",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/index.ts",
													"line": 831,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "bytecode"
											},
											"defaultValue": " \"bytecode\" as const"
										},
										{
											"id": 1071,
											"name": "selector",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/index.ts",
													"line": 829,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											},
											"defaultValue": " new Uint8Array()"
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												1072,
												1074,
												1073,
												1071
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 828,
											"character": 33
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								}
							],
							"groups": [
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										1036,
										994,
										960,
										963,
										966,
										976,
										979,
										987,
										998,
										971
									]
								},
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										959
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1017,
										1022,
										1026,
										1039,
										1048,
										1010,
										1005,
										1110,
										1067,
										1002,
										1075,
										1057,
										1093,
										1084,
										1107,
										1102
									]
								},
								{
									"title": "Object literals",
									"kind": 2097152,
									"children": [
										1070
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/abi-data/index.ts",
									"line": 2,
									"character": 8
								}
							]
						},
						{
							"id": 1126,
							"name": "Decode",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 1128,
									"name": "AbiLocation",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/decode/index.ts",
											"line": 16,
											"character": 16
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "stringLiteral",
												"value": "calldata"
											},
											{
												"type": "stringLiteral",
												"value": "eventdata"
											},
											{
												"type": "stringLiteral",
												"value": "returndata"
											}
										]
									}
								},
								{
									"id": 1127,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/decode/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:abi-data:decode\")"
								},
								{
									"id": 1129,
									"name": "decodeAbi",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1130,
											"name": "decodeAbi",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1131,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													}
												},
												{
													"id": 1132,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Pointer.AbiDataPointer",
														"id": 1899
													}
												},
												{
													"id": 1133,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 1964
													}
												},
												{
													"id": 1134,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderOptions"
													},
													"defaultValue": " {}"
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 817
													},
													{
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 282
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/decode/index.ts",
											"line": 18,
											"character": 26
										}
									]
								},
								{
									"id": 1135,
									"name": "decodeAbiReferenceByAddress",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1136,
											"name": "decodeAbiReferenceByAddress",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1137,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Format.Types.ReferenceType",
																"id": 165
															},
															{
																"type": "reference",
																"name": "TupleType",
																"id": 116
															}
														]
													}
												},
												{
													"id": 1138,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Pointer.AbiDataPointer",
																"id": 1899
															},
															{
																"type": "reference",
																"name": "Pointer.StackFormPointer",
																"id": 1897
															}
														]
													}
												},
												{
													"id": 1139,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 1964
													}
												},
												{
													"id": 1140,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderOptions"
													},
													"defaultValue": " {}"
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 817
													},
													{
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 282
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/decode/index.ts",
											"line": 60,
											"character": 44
										}
									]
								},
								{
									"id": 1141,
									"name": "decodeAbiReferenceStatic",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1142,
											"name": "decodeAbiReferenceStatic",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1143,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Format.Types.ReferenceType",
																"id": 165
															},
															{
																"type": "reference",
																"name": "TupleType",
																"id": 116
															}
														]
													}
												},
												{
													"id": 1144,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Pointer.AbiDataPointer",
														"id": 1899
													}
												},
												{
													"id": 1145,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 1964
													}
												},
												{
													"id": 1146,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderOptions"
													},
													"defaultValue": " {}"
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 817
													},
													{
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 282
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/decode/index.ts",
											"line": 333,
											"character": 41
										}
									]
								},
								{
									"id": 1147,
									"name": "decodeAbiStructByPosition",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1148,
											"name": "decodeAbiStructByPosition",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1149,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.StructType",
														"id": 93
													}
												},
												{
													"id": 1150,
													"name": "location",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AbiLocation",
														"id": 1128
													}
												},
												{
													"id": 1151,
													"name": "startPosition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 1152,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 1964
													}
												},
												{
													"id": 1153,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderOptions"
													},
													"defaultValue": " {}"
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 817
													},
													{
														"type": "reference",
														"name": "Format.Values.StructResult",
														"id": 311
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/decode/index.ts",
											"line": 424,
											"character": 35
										}
									]
								},
								{
									"id": 1154,
									"name": "decodeAbiTupleByPosition",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1155,
											"name": "decodeAbiTupleByPosition",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1156,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TupleType",
														"id": 116
													}
												},
												{
													"id": 1157,
													"name": "location",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AbiLocation",
														"id": 1128
													}
												},
												{
													"id": 1158,
													"name": "startPosition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 1159,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 1964
													}
												},
												{
													"id": 1160,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderOptions"
													},
													"defaultValue": " {}"
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 817
													},
													{
														"type": "reference",
														"name": "Format.Values.TupleResult",
														"id": 320
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/decode/index.ts",
											"line": 489,
											"character": 34
										}
									]
								}
							],
							"groups": [
								{
									"title": "Type aliases",
									"kind": 4194304,
									"children": [
										1128
									]
								},
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1127
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1129,
										1135,
										1141,
										1147,
										1154
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/abi-data/index.ts",
									"line": 8,
									"character": 8
								}
							]
						},
						{
							"id": 1113,
							"name": "Encode",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1114,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/encode/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:abi-data:encode\")"
								},
								{
									"id": 1115,
									"name": "encodeAbi",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1116,
											"name": "encodeAbi",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1117,
													"name": "input",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 282
													}
												},
												{
													"id": 1118,
													"name": "allocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "AbiAllocations",
														"id": 960
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Uint8Array"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/encode/index.ts",
											"line": 23,
											"character": 25
										}
									]
								},
								{
									"id": 1122,
									"name": "encodeTupleAbi",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1123,
											"name": "encodeTupleAbi",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1124,
													"name": "tuple",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "Format.Values.Result",
															"id": 282
														}
													}
												},
												{
													"id": 1125,
													"name": "allocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "AbiAllocations",
														"id": 960
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Uint8Array"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/encode/index.ts",
											"line": 131,
											"character": 30
										}
									]
								},
								{
									"id": 1119,
									"name": "padAndPrependLength",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1120,
											"name": "padAndPrependLength",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1121,
													"name": "bytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/encode/index.ts",
											"line": 117,
											"character": 28
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1114
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1115,
										1122,
										1119
									],
									"categories": [
										{
											"title": "Encoding (low-level)",
											"children": [
												1115,
												1122,
												1119
											]
										}
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/abi-data/index.ts",
									"line": 5,
									"character": 8
								}
							]
						},
						{
							"id": 1161,
							"name": "Import",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 1162,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/import/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:abi-data:import\")"
								},
								{
									"id": 1163,
									"name": "abiParameterToType",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1164,
											"name": "abiParameterToType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1165,
													"name": "abi",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AbiParameter",
														"id": 1194
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Format.Types.Type",
												"id": 5
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/import/index.ts",
											"line": 8,
											"character": 34
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1162
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1163
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/abi-data/index.ts",
									"line": 16,
									"character": 8
								}
							]
						},
						{
							"id": 1203,
							"name": "Utils",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1205,
									"name": "Web3Utils",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 5,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									},
									"defaultValue": " require(\"web3-utils\")"
								},
								{
									"id": 1204,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:abi-data:utils\")"
								},
								{
									"id": 1253,
									"name": "abiEntryHasStorageParameters",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1254,
											"name": "abiEntryHasStorageParameters",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1255,
													"name": "abiEntry",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Abi.AbiEntry"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 222,
											"character": 44
										}
									]
								},
								{
									"id": 1247,
									"name": "abiEntryIsObviouslyIllTyped",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1248,
											"name": "abiEntryIsObviouslyIllTyped",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1249,
													"name": "abiEntry",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Abi.AbiEntry"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 177,
											"character": 43
										}
									]
								},
								{
									"id": 1217,
									"name": "abiHasPayableFallback",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1218,
											"name": "abiHasPayableFallback",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1219,
													"name": "abi",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Abi.Abi"
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "boolean"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 51,
											"character": 37
										}
									]
								},
								{
									"id": 1220,
									"name": "abiMutability",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1221,
											"name": "abiMutability",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1222,
													"name": "abiEntry",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "FunctionAbiEntry",
																"id": 1168
															},
															{
																"type": "reference",
																"name": "ConstructorAbiEntry",
																"id": 1176
															},
															{
																"type": "reference",
																"name": "FallbackAbiEntry",
																"id": 1181
															},
															{
																"type": "reference",
																"name": "ReceiveAbiEntry",
																"id": 1185
															}
														]
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Common.Mutability"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 65,
											"character": 22
										}
									]
								},
								{
									"id": 1250,
									"name": "abiParameterIsObviouslyIllTyped",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1251,
											"name": "abiParameterIsObviouslyIllTyped",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1252,
													"name": "abiParameter",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AbiParameter",
														"id": 1194
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 193,
											"character": 40
										}
									]
								},
								{
									"id": 1232,
									"name": "abiSelector",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1233,
											"name": "abiSelector",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1234,
													"name": "abiEntry",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "FunctionAbiEntry",
																"id": 1168
															},
															{
																"type": "reference",
																"name": "EventAbiEntry",
																"id": 1189
															}
														]
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 108,
											"character": 27
										}
									]
								},
								{
									"id": 1223,
									"name": "abiSignature",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1224,
											"name": "abiSignature",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1225,
													"name": "abiEntry",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "FunctionAbiEntry",
																"id": 1168
															},
															{
																"type": "reference",
																"name": "EventAbiEntry",
																"id": 1189
															}
														]
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 85,
											"character": 28
										}
									]
								},
								{
									"id": 1226,
									"name": "abiTupleSignature",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1227,
											"name": "abiTupleSignature",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1228,
													"name": "parameters",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "AbiParameter",
															"id": 1194
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 91,
											"character": 33
										}
									]
								},
								{
									"id": 1229,
									"name": "abiTypeSignature",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1230,
											"name": "abiTypeSignature",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1231,
													"name": "parameter",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AbiParameter",
														"id": 1194
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 96,
											"character": 25
										}
									]
								},
								{
									"id": 1235,
									"name": "abisMatch",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1236,
											"name": "abisMatch",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1237,
													"name": "entry1",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Abi.AbiEntry"
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												},
												{
													"id": 1238,
													"name": "entry2",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Abi.AbiEntry"
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 124,
											"character": 25
										}
									]
								},
								{
									"id": 1214,
									"name": "computeSelectors",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1215,
											"name": "computeSelectors",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1216,
													"name": "abi",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Abi.Abi"
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "FunctionAbiBySelectors",
														"id": 1200
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 34,
											"character": 32
										}
									]
								},
								{
									"id": 1239,
									"name": "definitionMatchesAbi",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1240,
											"name": "definitionMatchesAbi",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1241,
													"name": "abiEntry",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Abi.AbiEntry"
													}
												},
												{
													"id": 1242,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1532
													}
												},
												{
													"id": 1243,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNodes",
														"id": 1577
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 155,
											"character": 36
										}
									]
								},
								{
									"id": 1211,
									"name": "schemaAbiToAbi",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1212,
											"name": "schemaAbiToAbi",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1213,
													"name": "abiLoose",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "SchemaAbi"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Abi.Abi"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 24,
											"character": 30
										}
									]
								},
								{
									"id": 1244,
									"name": "topicsCount",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1245,
											"name": "topicsCount",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1246,
													"name": "abiEntry",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EventAbiEntry",
														"id": 1189
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 170,
											"character": 27
										}
									]
								},
								{
									"id": 1206,
									"name": "DEFAULT_CONSTRUCTOR_ABI",
									"kind": 2097152,
									"kindString": "Object literal",
									"flags": {
										"isExported": true,
										"isConst": true
									},
									"children": [
										{
											"id": 1208,
											"name": "inputs",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/utils.ts",
													"line": 19,
													"character": 8
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "undefined"
												}
											},
											"defaultValue": " []"
										},
										{
											"id": 1210,
											"name": "payable",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/utils.ts",
													"line": 21,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "false"
											},
											"defaultValue": "false"
										},
										{
											"id": 1209,
											"name": "stateMutability",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/utils.ts",
													"line": 20,
													"character": 17
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "nonpayable"
											},
											"defaultValue": "\"nonpayable\""
										},
										{
											"id": 1207,
											"name": "type",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/utils.ts",
													"line": 18,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "constructor"
											},
											"defaultValue": "\"constructor\""
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												1208,
												1210,
												1209,
												1207
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 17,
											"character": 36
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1205,
										1204
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1253,
										1247,
										1217,
										1220,
										1250,
										1232,
										1223,
										1226,
										1229,
										1235,
										1214,
										1239,
										1211,
										1244
									]
								},
								{
									"title": "Object literals",
									"kind": 2097152,
									"children": [
										1206
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/abi-data/index.ts",
									"line": 26,
									"character": 8
								}
							]
						},
						{
							"id": 1194,
							"name": "AbiParameter",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1198,
									"name": "components",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/types.ts",
											"line": 54,
											"character": 12
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "AbiParameter",
											"id": 1194
										}
									}
								},
								{
									"id": 1197,
									"name": "indexed",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/types.ts",
											"line": 53,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1199,
									"name": "internalType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/types.ts",
											"line": 55,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1195,
									"name": "name",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/types.ts",
											"line": 51,
											"character": 6
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1196,
									"name": "type",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/types.ts",
											"line": 52,
											"character": 6
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1198,
										1197,
										1199,
										1195,
										1196
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/abi-data/types.ts",
									"line": 50,
									"character": 29
								}
							]
						},
						{
							"id": 1176,
							"name": "ConstructorAbiEntry",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1178,
									"name": "inputs",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/types.ts",
											"line": 24,
											"character": 8
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "AbiParameter",
											"id": 1194
										}
									}
								},
								{
									"id": 1180,
									"name": "payable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/types.ts",
											"line": 26,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1179,
									"name": "stateMutability",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/types.ts",
											"line": 25,
											"character": 17
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "stringLiteral",
												"value": "payable"
											},
											{
												"type": "stringLiteral",
												"value": "nonpayable"
											}
										]
									}
								},
								{
									"id": 1177,
									"name": "type",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/types.ts",
											"line": 23,
											"character": 6
										}
									],
									"type": {
										"type": "stringLiteral",
										"value": "constructor"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1178,
										1180,
										1179,
										1177
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/abi-data/types.ts",
									"line": 22,
									"character": 36
								}
							]
						},
						{
							"id": 1189,
							"name": "EventAbiEntry",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1193,
									"name": "anonymous",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/types.ts",
											"line": 47,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1192,
									"name": "inputs",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/types.ts",
											"line": 46,
											"character": 8
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "AbiParameter",
											"id": 1194
										}
									}
								},
								{
									"id": 1191,
									"name": "name",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/types.ts",
											"line": 45,
											"character": 6
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1190,
									"name": "type",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/types.ts",
											"line": 44,
											"character": 6
										}
									],
									"type": {
										"type": "stringLiteral",
										"value": "event"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1193,
										1192,
										1191,
										1190
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/abi-data/types.ts",
									"line": 43,
									"character": 30
								}
							]
						},
						{
							"id": 1181,
							"name": "FallbackAbiEntry",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1184,
									"name": "payable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/types.ts",
											"line": 32,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1183,
									"name": "stateMutability",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/types.ts",
											"line": 31,
											"character": 17
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "stringLiteral",
												"value": "payable"
											},
											{
												"type": "stringLiteral",
												"value": "nonpayable"
											}
										]
									}
								},
								{
									"id": 1182,
									"name": "type",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/types.ts",
											"line": 30,
											"character": 6
										}
									],
									"type": {
										"type": "stringLiteral",
										"value": "fallback"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1184,
										1183,
										1182
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/abi-data/types.ts",
									"line": 29,
									"character": 33
								}
							]
						},
						{
							"id": 1200,
							"name": "FunctionAbiBySelectors",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"indexSignature": [
								{
									"id": 1201,
									"name": "__index",
									"kind": 8192,
									"kindString": "Index signature",
									"flags": {},
									"parameters": [
										{
											"id": 1202,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "FunctionAbiEntry",
										"id": 1168
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/abi-data/types.ts",
									"line": 58,
									"character": 39
								}
							]
						},
						{
							"id": 1168,
							"name": "FunctionAbiEntry",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1174,
									"name": "constant",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/types.ts",
											"line": 18,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1171,
									"name": "inputs",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/types.ts",
											"line": 15,
											"character": 8
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "AbiParameter",
											"id": 1194
										}
									}
								},
								{
									"id": 1170,
									"name": "name",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/types.ts",
											"line": 14,
											"character": 6
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1172,
									"name": "outputs",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/types.ts",
											"line": 16,
											"character": 9
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "AbiParameter",
											"id": 1194
										}
									}
								},
								{
									"id": 1175,
									"name": "payable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/types.ts",
											"line": 19,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1173,
									"name": "stateMutability",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/types.ts",
											"line": 17,
											"character": 17
										}
									],
									"type": {
										"type": "reference",
										"name": "Common.Mutability"
									}
								},
								{
									"id": 1169,
									"name": "type",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/types.ts",
											"line": 13,
											"character": 6
										}
									],
									"type": {
										"type": "stringLiteral",
										"value": "function"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1174,
										1171,
										1170,
										1172,
										1175,
										1173,
										1169
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/abi-data/types.ts",
									"line": 12,
									"character": 33
								}
							]
						},
						{
							"id": 1185,
							"name": "ReceiveAbiEntry",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1188,
									"name": "payable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/types.ts",
											"line": 38,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1187,
									"name": "stateMutability",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/types.ts",
											"line": 37,
											"character": 17
										}
									],
									"type": {
										"type": "stringLiteral",
										"value": "payable"
									}
								},
								{
									"id": 1186,
									"name": "type",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/types.ts",
											"line": 36,
											"character": 6
										}
									],
									"type": {
										"type": "stringLiteral",
										"value": "receive"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1188,
										1187,
										1186
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/abi-data/types.ts",
									"line": 35,
									"character": 32
								}
							]
						},
						{
							"id": 1166,
							"name": "Abi",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "codec/lib/abi-data/types.ts",
									"line": 3,
									"character": 15
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "AbiEntry",
									"id": 1167
								}
							}
						},
						{
							"id": 1167,
							"name": "AbiEntry",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "codec/lib/abi-data/types.ts",
									"line": 5,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "FunctionAbiEntry",
										"id": 1168
									},
									{
										"type": "reference",
										"name": "ConstructorAbiEntry",
										"id": 1176
									},
									{
										"type": "reference",
										"name": "FallbackAbiEntry",
										"id": 1181
									},
									{
										"type": "reference",
										"name": "ReceiveAbiEntry",
										"id": 1185
									},
									{
										"type": "reference",
										"name": "EventAbiEntry",
										"id": 1189
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Modules",
							"kind": 2,
							"children": [
								958,
								1126,
								1113,
								1161,
								1203
							]
						},
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								1194,
								1176,
								1189,
								1181,
								1200,
								1168,
								1185
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								1166,
								1167
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/index.ts",
							"line": 308,
							"character": 8
						}
					]
				},
				{
					"id": 1528,
					"name": "Ast",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1728,
							"name": "Import",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 1729,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/import/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:ast:import\")"
								},
								{
									"id": 1736,
									"name": "definitionToStoredType",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1737,
											"name": "definitionToStoredType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1738,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1532
													}
												},
												{
													"id": 1739,
													"name": "compilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 1740,
													"name": "compiler",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "CompilerVersion",
														"id": 1743
													}
												},
												{
													"id": 1741,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "AstNodes",
														"id": 1577
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Format.Types.UserDefinedType",
												"id": 92
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/import/index.ts",
											"line": 358,
											"character": 38
										}
									]
								},
								{
									"id": 1730,
									"name": "definitionToType",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1731,
											"name": "definitionToType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1732,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1532
													}
												},
												{
													"id": 1733,
													"name": "compilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 1734,
													"name": "compiler",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "CompilerVersion",
														"id": 1743
													}
												},
												{
													"id": 1735,
													"name": "forceLocation",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Common.Location"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Format.Types.Type",
												"id": 5
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/import/index.ts",
											"line": 21,
											"character": 32
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1729
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1736,
										1730
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/ast/index.ts",
									"line": 7,
									"character": 8
								}
							]
						},
						{
							"id": 1593,
							"name": "Utils",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1594,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:ast:utils\")"
								},
								{
									"id": 1668,
									"name": "baseDefinition",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1669,
											"name": "baseDefinition",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1670,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1532
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "AstNode",
												"id": 1532
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 286,
											"character": 30
										}
									]
								},
								{
									"id": 1649,
									"name": "contractKind",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1650,
											"name": "contractKind",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "only for contract types, obviously! will yield nonsense otherwise!"
											},
											"parameters": [
												{
													"id": 1651,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1532
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Common.ContractKind"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 202,
											"character": 28
										}
									]
								},
								{
									"id": 1619,
									"name": "decimalPlaces",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1620,
											"name": "decimalPlaces",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "for fixed-point types, obviously"
											},
											"parameters": [
												{
													"id": 1621,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1532
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 118,
											"character": 29
										}
									]
								},
								{
									"id": 1691,
									"name": "definitionToAbi",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1692,
											"name": "definitionToAbi",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "the main function. just does some dispatch.\nreturns undefined on bad input"
											},
											"parameters": [
												{
													"id": 1693,
													"name": "node",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1532
													}
												},
												{
													"id": 1694,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNodes",
														"id": 1577
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "AbiData.AbiEntry",
														"id": 1167
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 519,
											"character": 31
										}
									]
								},
								{
									"id": 1699,
									"name": "eventDefinitionToAbi",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1700,
											"name": "eventDefinitionToAbi",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1701,
													"name": "node",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1532
													}
												},
												{
													"id": 1702,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNodes",
														"id": 1577
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "EventAbiEntry",
												"id": 1189
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 606,
											"character": 29
										}
									]
								},
								{
									"id": 1695,
									"name": "functionDefinitionToAbi",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1696,
											"name": "functionDefinitionToAbi",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1697,
													"name": "node",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1532
													}
												},
												{
													"id": 1698,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNodes",
														"id": 1577
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "FunctionAbiEntry",
														"id": 1168
													},
													{
														"type": "reference",
														"name": "ConstructorAbiEntry",
														"id": 1176
													},
													{
														"type": "reference",
														"name": "FallbackAbiEntry",
														"id": 1181
													},
													{
														"type": "reference",
														"name": "ReceiveAbiEntry",
														"id": 1185
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 544,
											"character": 32
										}
									]
								},
								{
									"id": 1682,
									"name": "functionKind",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1683,
											"name": "functionKind",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "compatibility function, since pre-0.5.0 functions don't have node.kind\nreturns undefined if you don't put in a function node"
											},
											"parameters": [
												{
													"id": 1684,
													"name": "node",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1532
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 456,
											"character": 28
										}
									]
								},
								{
									"id": 1717,
									"name": "getterDefinitionToAbi",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1718,
											"name": "getterDefinitionToAbi",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1719,
													"name": "node",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1532
													}
												},
												{
													"id": 1720,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNodes",
														"id": 1577
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "FunctionAbiEntry",
												"id": 1168
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 729,
											"character": 30
										}
									]
								},
								{
									"id": 1721,
									"name": "getterParameters",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1722,
											"name": "getterParameters",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1723,
													"name": "node",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1532
													}
												},
												{
													"id": 1724,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNodes",
														"id": 1577
													}
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1725,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1726,
															"name": "inputs",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/ast/utils.ts",
																	"line": 767,
																	"character": 11
																}
															],
															"type": {
																"type": "array",
																"elementType": {
																	"type": "reference",
																	"name": "AstNode",
																	"id": 1532
																}
															}
														},
														{
															"id": 1727,
															"name": "outputs",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/ast/utils.ts",
																	"line": 767,
																	"character": 31
																}
															],
															"type": {
																"type": "array",
																"elementType": {
																	"type": "reference",
																	"name": "AstNode",
																	"id": 1532
																}
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																1726,
																1727
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/ast/utils.ts",
															"line": 767,
															"character": 2
														}
													]
												}
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 764,
											"character": 32
										}
									]
								},
								{
									"id": 1622,
									"name": "isArray",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1623,
											"name": "isArray",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1624,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1532
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 125,
											"character": 23
										}
									]
								},
								{
									"id": 1688,
									"name": "isContractPayable",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1689,
											"name": "isContractPayable",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "takes a contract definition and asks, does it have a payable fallback\nfunction?"
											},
											"parameters": [
												{
													"id": 1690,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1532
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 506,
											"character": 33
										}
									]
								},
								{
									"id": 1625,
									"name": "isDynamicArray",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1626,
											"name": "isDynamicArray",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1627,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1532
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 130,
											"character": 30
										}
									]
								},
								{
									"id": 1640,
									"name": "isEnum",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1641,
											"name": "isEnum",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1642,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1532
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 175,
											"character": 22
										}
									]
								},
								{
									"id": 1637,
									"name": "isMapping",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1638,
											"name": "isMapping",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1639,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1532
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 170,
											"character": 25
										}
									]
								},
								{
									"id": 1643,
									"name": "isReference",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1644,
											"name": "isReference",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1645,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1532
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 180,
											"character": 27
										}
									]
								},
								{
									"id": 1655,
									"name": "isSimpleConstant",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1656,
											"name": "isSimpleConstant",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1657,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1532
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 232,
											"character": 32
										}
									]
								},
								{
									"id": 1634,
									"name": "isStruct",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1635,
											"name": "isStruct",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1636,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1532
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 165,
											"character": 24
										}
									]
								},
								{
									"id": 1671,
									"name": "keyDefinition",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1672,
											"name": "keyDefinition",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "for use for mappings and arrays only!\nfor arrays, fakes up a uint definition"
											},
											"parameters": [
												{
													"id": 1673,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1532
													}
												},
												{
													"id": 1674,
													"name": "scopes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "Scopes",
														"id": 1580
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "AstNode",
												"id": 1532
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 318,
											"character": 29
										}
									]
								},
								{
									"id": 1685,
									"name": "mutability",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1686,
											"name": "mutability",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "similar compatibility function for mutability for pre-0.4.16 versions\nreturns undefined if you don't give it a FunctionDefinition or\nVariableDeclaration"
											},
											"parameters": [
												{
													"id": 1687,
													"name": "node",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1532
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Common.Mutability"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 477,
											"character": 26
										}
									]
								},
								{
									"id": 1708,
									"name": "parameterToAbi",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1709,
											"name": "parameterToAbi",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1710,
													"name": "node",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1532
													}
												},
												{
													"id": 1711,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNodes",
														"id": 1577
													}
												},
												{
													"id": 1712,
													"name": "checkIndexed",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													},
													"defaultValue": "false"
												}
											],
											"type": {
												"type": "reference",
												"name": "AbiParameter",
												"id": 1194
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 642,
											"character": 23
										}
									]
								},
								{
									"id": 1679,
									"name": "parameters",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1680,
											"name": "parameters",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "returns input parameters, then output parameters\nNOTE: ONLY FOR VARIABLE DECLARATIONS OF FUNCTION TYPE\nNOT FOR FUNCTION DEFINITIONS"
											},
											"parameters": [
												{
													"id": 1681,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1532
													}
												}
											],
											"type": {
												"type": "tuple",
												"elements": [
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "AstNode",
															"id": 1532
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "AstNode",
															"id": 1532
														}
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 439,
											"character": 26
										}
									]
								},
								{
									"id": 1703,
									"name": "parametersToAbi",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1704,
											"name": "parametersToAbi",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1705,
													"name": "nodes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "AstNode",
															"id": 1532
														}
													}
												},
												{
													"id": 1706,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNodes",
														"id": 1577
													}
												},
												{
													"id": 1707,
													"name": "checkIndexed",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													},
													"defaultValue": "false"
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "AbiParameter",
													"id": 1194
												}
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 625,
											"character": 24
										}
									]
								},
								{
									"id": 1665,
									"name": "rationalValue",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1666,
											"name": "rationalValue",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "extract the actual numerical value from a node of type rational.\ncurrently assumes result will be integer (currently returns BN)"
											},
											"parameters": [
												{
													"id": 1667,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1532
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "BN"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 278,
											"character": 29
										}
									]
								},
								{
									"id": 1646,
									"name": "referenceType",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1647,
											"name": "referenceType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "note: only use this on things already verified to be references"
											},
											"parameters": [
												{
													"id": 1648,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1532
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Common.Location"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 192,
											"character": 29
										}
									]
								},
								{
									"id": 1662,
									"name": "regularizeTypeIdentifier",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1663,
											"name": "regularizeTypeIdentifier",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "adds \"_ptr\" on to the end of type identifiers that might need it; note that\nthis operates on identifiers, not definitions"
											},
											"parameters": [
												{
													"id": 1664,
													"name": "identifier",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 266,
											"character": 40
										}
									]
								},
								{
									"id": 1616,
									"name": "specifiedSize",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1617,
											"name": "specifiedSize",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "e.g. uint48 -> 6",
												"returns": "size in bytes for explicit type size, or `null` if not stated"
											},
											"parameters": [
												{
													"id": 1618,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1532
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 87,
											"character": 29
										}
									]
								},
								{
									"id": 1658,
									"name": "spliceLocation",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1659,
											"name": "spliceLocation",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "definition: a storage reference definition\nlocation: the location you want it to refer to instead"
											},
											"parameters": [
												{
													"id": 1660,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1532
													}
												},
												{
													"id": 1661,
													"name": "location",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Common.Location"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "AstNode",
												"id": 1532
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 242,
											"character": 30
										}
									]
								},
								{
									"id": 1652,
									"name": "stackSize",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1653,
											"name": "stackSize",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "stack size, in words, of a given type"
											},
											"parameters": [
												{
													"id": 1654,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1532
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 210,
											"character": 25
										}
									]
								},
								{
									"id": 1628,
									"name": "staticLength",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1629,
											"name": "staticLength",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "length of a statically sized array -- please only use for arrays\nalready verified to be static!"
											},
											"parameters": [
												{
													"id": 1630,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1532
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 147,
											"character": 28
										}
									]
								},
								{
									"id": 1631,
									"name": "staticLengthAsString",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1632,
											"name": "staticLengthAsString",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "see staticLength for explanation"
											},
											"parameters": [
												{
													"id": 1633,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1532
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 158,
											"character": 36
										}
									]
								},
								{
									"id": 1713,
									"name": "toAbiType",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1714,
											"name": "toAbiType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1715,
													"name": "node",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1532
													}
												},
												{
													"id": 1716,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNodes",
														"id": 1577
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 698,
											"character": 18
										}
									]
								},
								{
									"id": 1604,
									"name": "typeClass",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1605,
											"name": "typeClass",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "returns basic type class for a variable definition node\ne.g.:\n `t_uint256` becomes `uint`\n `t_struct$_Thing_$20_memory_ptr` becomes `struct`"
											},
											"parameters": [
												{
													"id": 1606,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1532
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 39,
											"character": 25
										}
									]
								},
								{
									"id": 1607,
									"name": "typeClassLongForm",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1608,
											"name": "typeClassLongForm",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "similar to typeClass, but includes any numeric qualifiers\ne.g.:\n`t_uint256` becomes `uint256`"
											},
											"parameters": [
												{
													"id": 1609,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1532
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 49,
											"character": 33
										}
									]
								},
								{
									"id": 1610,
									"name": "typeId",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1611,
											"name": "typeId",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "for user-defined types -- structs, enums, contracts\noften you can get these from referencedDeclaration, but not\nalways"
											},
											"parameters": [
												{
													"id": 1612,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1532
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 59,
											"character": 22
										}
									]
								},
								{
									"id": 1595,
									"name": "typeIdentifier",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1596,
											"name": "typeIdentifier",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1597,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1532
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 12,
											"character": 30
										}
									]
								},
								{
									"id": 1598,
									"name": "typeString",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1599,
											"name": "typeString",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1600,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1532
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 17,
											"character": 26
										}
									]
								},
								{
									"id": 1601,
									"name": "typeStringWithoutLocation",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1602,
											"name": "typeStringWithoutLocation",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Returns the type string, but with location (if any) stripped off the end"
											},
											"parameters": [
												{
													"id": 1603,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1532
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 25,
											"character": 41
										}
									]
								},
								{
									"id": 1675,
									"name": "valueDefinition",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1676,
											"name": "valueDefinition",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "for use for mappings only!"
											},
											"parameters": [
												{
													"id": 1677,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1532
													}
												},
												{
													"id": 1678,
													"name": "scopes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "Scopes",
														"id": 1580
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "AstNode",
												"id": 1532
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 385,
											"character": 31
										}
									]
								},
								{
									"id": 1613,
									"name": "visibility",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1614,
											"name": "visibility",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "For function types; returns internal or external\n(not for use on other types! will cause an error!)\nshould only return \"internal\" or \"external\""
											},
											"parameters": [
												{
													"id": 1615,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1532
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Common.Visibility"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 74,
											"character": 26
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1594
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1668,
										1649,
										1619,
										1691,
										1699,
										1695,
										1682,
										1717,
										1721,
										1622,
										1688,
										1625,
										1640,
										1637,
										1643,
										1655,
										1634,
										1671,
										1685,
										1708,
										1679,
										1703,
										1665,
										1646,
										1662,
										1616,
										1658,
										1652,
										1628,
										1631,
										1713,
										1604,
										1607,
										1610,
										1595,
										1598,
										1601,
										1675,
										1613
									],
									"categories": [
										{
											"title": "Definition Reading",
											"children": [
												1668,
												1649,
												1619,
												1682,
												1622,
												1688,
												1625,
												1640,
												1637,
												1643,
												1655,
												1634,
												1671,
												1685,
												1679,
												1665,
												1646,
												1662,
												1616,
												1658,
												1652,
												1628,
												1631,
												1604,
												1607,
												1610,
												1595,
												1598,
												1601,
												1675,
												1613
											]
										},
										{
											"title": "Other",
											"children": [
												1691,
												1699,
												1695,
												1717,
												1721,
												1708,
												1703,
												1713
											]
										}
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/ast/index.ts",
									"line": 4,
									"character": 8
								}
							]
						},
						{
							"id": 1532,
							"name": "AstNode",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1574,
									"name": "anonymous",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 52,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1569,
									"name": "baseType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 47,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"name": "AstNode",
										"id": 1532
									}
								},
								{
									"id": 1537,
									"name": "canonicalName",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 13,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1533,
									"name": "constant",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 9,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1575,
									"name": "contractKind",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 53,
											"character": 14
										}
									],
									"type": {
										"type": "reference",
										"name": "Common.ContractKind"
									}
								},
								{
									"id": 1548,
									"name": "expression",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 24,
											"character": 12
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1549,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 1550,
													"name": "referencedDeclaration",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "codec/lib/ast/types.ts",
															"line": 25,
															"character": 25
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														1550
													]
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/ast/types.ts",
													"line": 24,
													"character": 14
												}
											]
										}
									}
								},
								{
									"id": 1555,
									"name": "hexValue",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 33,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1535,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 11,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1573,
									"name": "indexed",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 51,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1576,
									"name": "isConstructor",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 54,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1570,
									"name": "keyType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 48,
											"character": 9
										}
									],
									"type": {
										"type": "reference",
										"name": "AstNode",
										"id": 1532
									}
								},
								{
									"id": 1554,
									"name": "kind",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 32,
											"character": 6
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1538,
									"name": "linearizedBaseContracts",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 14,
											"character": 25
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								},
								{
									"id": 1539,
									"name": "members",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 15,
											"character": 9
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "AstNode",
											"id": 1532
										}
									}
								},
								{
									"id": 1534,
									"name": "mutability",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 10,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "stringLiteral",
												"value": "mutable"
											},
											{
												"type": "stringLiteral",
												"value": "immutable"
											},
											{
												"type": "stringLiteral",
												"value": "constant"
											}
										]
									}
								},
								{
									"id": 1536,
									"name": "name",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 12,
											"character": 6
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1541,
									"name": "nodeType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 17,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1540,
									"name": "nodes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 16,
											"character": 7
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "AstNode",
											"id": 1532
										}
									}
								},
								{
									"id": 1563,
									"name": "parameterTypes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 41,
											"character": 16
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1564,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 1565,
													"name": "parameters",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/ast/types.ts",
															"line": 42,
															"character": 14
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "AstNode",
															"id": 1532
														}
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														1565
													]
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/ast/types.ts",
													"line": 41,
													"character": 18
												}
											]
										}
									}
								},
								{
									"id": 1557,
									"name": "parameters",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 35,
											"character": 12
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1558,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 1559,
													"name": "parameters",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/ast/types.ts",
															"line": 36,
															"character": 14
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "AstNode",
															"id": 1532
														}
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														1559
													]
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/ast/types.ts",
													"line": 35,
													"character": 14
												}
											]
										}
									}
								},
								{
									"id": 1572,
									"name": "payable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 50,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1556,
									"name": "referencedDeclaration",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 34,
											"character": 23
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 1566,
									"name": "returnParameterTypes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 44,
											"character": 22
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1567,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 1568,
													"name": "parameters",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/ast/types.ts",
															"line": 45,
															"character": 14
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "AstNode",
															"id": 1532
														}
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														1568
													]
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/ast/types.ts",
													"line": 44,
													"character": 24
												}
											]
										}
									}
								},
								{
									"id": 1560,
									"name": "returnParameters",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 38,
											"character": 18
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1561,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 1562,
													"name": "parameters",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/ast/types.ts",
															"line": 39,
															"character": 14
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "AstNode",
															"id": 1532
														}
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														1562
													]
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/ast/types.ts",
													"line": 38,
													"character": 20
												}
											]
										}
									}
								},
								{
									"id": 1542,
									"name": "scope",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 18,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1543,
									"name": "src",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 19,
											"character": 5
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1553,
									"name": "stateMutability",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 31,
											"character": 17
										}
									],
									"type": {
										"type": "reference",
										"name": "Common.Mutability"
									}
								},
								{
									"id": 1544,
									"name": "stateVariable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 20,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1545,
									"name": "storageLocation",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 21,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1546,
									"name": "typeDescriptions",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 22,
											"character": 18
										}
									],
									"type": {
										"type": "reference",
										"name": "TypeDescriptions",
										"id": 1529
									}
								},
								{
									"id": 1547,
									"name": "typeName",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 23,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"name": "AstNode",
										"id": 1532
									}
								},
								{
									"id": 1551,
									"name": "value",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 27,
											"character": 7
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "null"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								},
								{
									"id": 1571,
									"name": "valueType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 49,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "AstNode",
										"id": 1532
									}
								},
								{
									"id": 1552,
									"name": "visibility",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 28,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1574,
										1569,
										1537,
										1533,
										1575,
										1548,
										1555,
										1535,
										1573,
										1576,
										1570,
										1554,
										1538,
										1539,
										1534,
										1536,
										1541,
										1540,
										1563,
										1557,
										1572,
										1556,
										1566,
										1560,
										1542,
										1543,
										1553,
										1544,
										1545,
										1546,
										1547,
										1551,
										1571,
										1552
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/ast/types.ts",
									"line": 8,
									"character": 24
								}
							]
						},
						{
							"id": 1577,
							"name": "AstNodes",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"indexSignature": [
								{
									"id": 1578,
									"name": "__index",
									"kind": 8192,
									"kindString": "Index signature",
									"flags": {},
									"parameters": [
										{
											"id": 1579,
											"name": "nodeId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "AstNode",
										"id": 1532
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/ast/types.ts",
									"line": 60,
									"character": 25
								}
							]
						},
						{
							"id": 1580,
							"name": "Scopes",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"indexSignature": [
								{
									"id": 1581,
									"name": "__index",
									"kind": 8192,
									"kindString": "Index signature",
									"flags": {},
									"parameters": [
										{
											"id": 1582,
											"name": "nodeId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1583,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 1592,
													"name": "definition",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "codec/lib/ast/types.ts",
															"line": 75,
															"character": 14
														}
													],
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1532
													}
												},
												{
													"id": 1584,
													"name": "id",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/ast/types.ts",
															"line": 67,
															"character": 6
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 1586,
													"name": "parentId",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/ast/types.ts",
															"line": 69,
															"character": 12
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													}
												},
												{
													"id": 1587,
													"name": "pointer",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/ast/types.ts",
															"line": 70,
															"character": 11
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 1585,
													"name": "sourceId",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/ast/types.ts",
															"line": 68,
															"character": 12
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 1588,
													"name": "variables",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "codec/lib/ast/types.ts",
															"line": 71,
															"character": 13
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "reflection",
															"declaration": {
																"id": 1589,
																"name": "__type",
																"kind": 65536,
																"kindString": "Type literal",
																"flags": {},
																"children": [
																	{
																		"id": 1591,
																		"name": "id",
																		"kind": 32,
																		"kindString": "Variable",
																		"flags": {},
																		"sources": [
																			{
																				"fileName": "codec/lib/ast/types.ts",
																				"line": 73,
																				"character": 8
																			}
																		],
																		"type": {
																			"type": "intrinsic",
																			"name": "number"
																		}
																	},
																	{
																		"id": 1590,
																		"name": "name",
																		"kind": 32,
																		"kindString": "Variable",
																		"flags": {},
																		"sources": [
																			{
																				"fileName": "codec/lib/ast/types.ts",
																				"line": 72,
																				"character": 10
																			}
																		],
																		"type": {
																			"type": "intrinsic",
																			"name": "string"
																		}
																	}
																],
																"groups": [
																	{
																		"title": "Variables",
																		"kind": 32,
																		"children": [
																			1591,
																			1590
																		]
																	}
																],
																"sources": [
																	{
																		"fileName": "codec/lib/ast/types.ts",
																		"line": 71,
																		"character": 15
																	}
																]
															}
														}
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														1592,
														1584,
														1586,
														1587,
														1585,
														1588
													]
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/ast/types.ts",
													"line": 66,
													"character": 19
												}
											]
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/ast/types.ts",
									"line": 65,
									"character": 23
								}
							]
						},
						{
							"id": 1529,
							"name": "TypeDescriptions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1530,
									"name": "typeIdentifier",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 4,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1531,
									"name": "typeString",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 5,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1530,
										1531
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/ast/types.ts",
									"line": 3,
									"character": 33
								}
							]
						}
					],
					"groups": [
						{
							"title": "Modules",
							"kind": 2,
							"children": [
								1728,
								1593
							]
						},
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								1532,
								1577,
								1580,
								1529
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/index.ts",
							"line": 375,
							"character": 8
						}
					]
				},
				{
					"id": 1515,
					"name": "AstConstant",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "For reading/decoding constants expressed as AST nodes"
					},
					"children": [
						{
							"id": 1521,
							"name": "Decode",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 1522,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast-constant/decode/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:ast:decode\")"
								},
								{
									"id": 1523,
									"name": "decodeConstant",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1524,
											"name": "decodeConstant",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1525,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													}
												},
												{
													"id": 1526,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "ConstantDefinitionPointer",
														"id": 1939
													}
												},
												{
													"id": 1527,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 1964
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 817
													},
													{
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 282
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast-constant/decode/index.ts",
											"line": 14,
											"character": 31
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1522
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1523
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/ast-constant/index.ts",
									"line": 10,
									"character": 8
								}
							]
						},
						{
							"id": 1516,
							"name": "Read",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 1517,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast-constant/read/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:ast:read\")"
								},
								{
									"id": 1518,
									"name": "readDefinition",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1519,
											"name": "readDefinition",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1520,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "ConstantDefinitionPointer",
														"id": 1939
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast-constant/read/index.ts",
											"line": 11,
											"character": 30
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1517
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1518
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/ast-constant/index.ts",
									"line": 2,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Modules",
							"kind": 2,
							"children": [
								1521,
								1516
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/index.ts",
							"line": 365,
							"character": 10
						}
					]
				},
				{
					"id": 847,
					"name": "Basic",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isProtected": true,
						"isExported": true
					},
					"comment": {
						"shortText": "For decoding of primitives and constants"
					},
					"children": [
						{
							"id": 923,
							"name": "Allocate",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 924,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/basic/allocate/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:basic:allocate\")"
								},
								{
									"id": 925,
									"name": "byteLength",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 926,
											"name": "byteLength",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 927,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													}
												},
												{
													"id": 928,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 166
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/basic/allocate/index.ts",
											"line": 9,
											"character": 26
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										924
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										925
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/basic/index.ts",
									"line": 18,
									"character": 8
								}
							]
						},
						{
							"id": 848,
							"name": "Decode",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 849,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/basic/decode/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:basic:decode\")"
								},
								{
									"id": 875,
									"name": "checkPadding",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 876,
											"name": "checkPadding",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 877,
													"name": "bytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												},
												{
													"id": 878,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													}
												},
												{
													"id": 879,
													"name": "paddingMode",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "PaddingMode"
													}
												},
												{
													"id": 880,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 166
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/basic/decode/index.ts",
											"line": 660,
											"character": 21
										}
									]
								},
								{
									"id": 892,
									"name": "checkPaddingDirect",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 893,
											"name": "checkPaddingDirect",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 894,
													"name": "bytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												},
												{
													"id": 895,
													"name": "length",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 896,
													"name": "paddingType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "PaddingType"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/basic/decode/index.ts",
											"line": 708,
											"character": 27
										}
									]
								},
								{
									"id": 908,
									"name": "checkPaddingLeft",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 909,
											"name": "checkPaddingLeft",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 910,
													"name": "bytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												},
												{
													"id": 911,
													"name": "length",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/basic/decode/index.ts",
											"line": 762,
											"character": 32
										}
									]
								},
								{
									"id": 904,
									"name": "checkPaddingRight",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 905,
											"name": "checkPaddingRight",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 906,
													"name": "bytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												},
												{
													"id": 907,
													"name": "length",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/basic/decode/index.ts",
											"line": 756,
											"character": 26
										}
									]
								},
								{
									"id": 912,
									"name": "checkPaddingSigned",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 913,
											"name": "checkPaddingSigned",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 914,
													"name": "bytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												},
												{
													"id": 915,
													"name": "length",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/basic/decode/index.ts",
											"line": 767,
											"character": 27
										}
									]
								},
								{
									"id": 850,
									"name": "decodeBasic",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 851,
											"name": "decodeBasic",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 852,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													}
												},
												{
													"id": 853,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Pointer.DataPointer",
														"id": 1896
													}
												},
												{
													"id": 854,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 1964
													}
												},
												{
													"id": 855,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderOptions"
													},
													"defaultValue": " {}"
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 817
													},
													{
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 282
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/basic/decode/index.ts",
											"line": 19,
											"character": 28
										}
									]
								},
								{
									"id": 856,
									"name": "decodeContract",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 857,
											"name": "decodeContract",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 858,
													"name": "addressBytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												},
												{
													"id": 859,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 1964
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 817
													},
													{
														"type": "reference",
														"name": "Format.Values.ContractValueInfo",
														"id": 272
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/basic/decode/index.ts",
											"line": 468,
											"character": 31
										}
									]
								},
								{
									"id": 860,
									"name": "decodeContractAndContext",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 861,
											"name": "decodeContractAndContext",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 862,
													"name": "addressBytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												},
												{
													"id": 863,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 1964
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 817
													},
													{
														"type": "reference",
														"name": "ContractInfoAndContext"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/basic/decode/index.ts",
											"line": 475,
											"character": 34
										}
									]
								},
								{
									"id": 864,
									"name": "decodeExternalFunction",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 865,
											"name": "decodeExternalFunction",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 866,
													"name": "addressBytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												},
												{
													"id": 867,
													"name": "selectorBytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												},
												{
													"id": 868,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 1964
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 817
													},
													{
														"type": "reference",
														"name": "Format.Values.FunctionExternalValueInfo",
														"id": 351
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/basic/decode/index.ts",
											"line": 511,
											"character": 39
										}
									]
								},
								{
									"id": 869,
									"name": "decodeInternalFunction",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 870,
											"name": "decodeInternalFunction",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 871,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "FunctionInternalType",
														"id": 72
													}
												},
												{
													"id": 872,
													"name": "deployedPcBytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												},
												{
													"id": 873,
													"name": "constructorPcBytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												},
												{
													"id": 874,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 1964
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Format.Values.FunctionInternalResult",
												"id": 365
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/basic/decode/index.ts",
											"line": 550,
											"character": 38
										}
									]
								},
								{
									"id": 901,
									"name": "defaultPaddingType",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 902,
											"name": "defaultPaddingType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 903,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "PaddingType"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/basic/decode/index.ts",
											"line": 739,
											"character": 27
										}
									]
								},
								{
									"id": 897,
									"name": "getPaddingType",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 898,
											"name": "getPaddingType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 899,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													}
												},
												{
													"id": 900,
													"name": "paddingMode",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "PaddingMode"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "PaddingType"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/basic/decode/index.ts",
											"line": 723,
											"character": 23
										}
									]
								},
								{
									"id": 881,
									"name": "removePadding",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 882,
											"name": "removePadding",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 883,
													"name": "bytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												},
												{
													"id": 884,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													}
												},
												{
													"id": 885,
													"name": "paddingMode",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "PaddingMode"
													}
												},
												{
													"id": 886,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 166
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/basic/decode/index.ts",
											"line": 683,
											"character": 22
										}
									]
								},
								{
									"id": 887,
									"name": "removePaddingDirect",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 888,
											"name": "removePaddingDirect",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 889,
													"name": "bytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												},
												{
													"id": 890,
													"name": "length",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 891,
													"name": "paddingType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "PaddingType"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/basic/decode/index.ts",
											"line": 694,
											"character": 28
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										849
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										875,
										892,
										908,
										904,
										912,
										850,
										856,
										860,
										864,
										869,
										901,
										897,
										881,
										887
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/basic/index.ts",
									"line": 2,
									"character": 8
								}
							]
						},
						{
							"id": 919,
							"name": "Encode",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 920,
									"name": "encodeBasic",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 921,
											"name": "encodeBasic",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Handles encoding of basic types; yes the input type is broader than\nit should be but it's hard to fix this without causing other problems,\nsorry!"
											},
											"parameters": [
												{
													"id": 922,
													"name": "input",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Values.Value",
														"id": 283
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/basic/encode/index.ts",
											"line": 15,
											"character": 27
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										920
									],
									"categories": [
										{
											"title": "Encoding (low-level)",
											"children": [
												920
											]
										}
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/basic/index.ts",
									"line": 10,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Modules",
							"kind": 2,
							"children": [
								923,
								848,
								919
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/index.ts",
							"line": 285,
							"character": 8
						}
					]
				},
				{
					"id": 929,
					"name": "Bytes",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isProtected": true,
						"isExported": true
					},
					"comment": {
						"shortText": "Contains functions for dealing with raw bytestrings"
					},
					"children": [
						{
							"id": 939,
							"name": "Decode",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 940,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/bytes/decode/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:bytes:decode\")"
								},
								{
									"id": 941,
									"name": "decodeBytes",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 942,
											"name": "decodeBytes",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 943,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "BytesTypeDynamic",
																"id": 23
															},
															{
																"type": "reference",
																"name": "StringType",
																"id": 37
															}
														]
													}
												},
												{
													"id": 944,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Pointer.DataPointer",
														"id": 1896
													}
												},
												{
													"id": 945,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 1964
													}
												},
												{
													"id": 946,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderOptions"
													},
													"defaultValue": " {}"
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 817
													},
													{
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 282
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/bytes/decode/index.ts",
											"line": 13,
											"character": 28
										}
									]
								},
								{
									"id": 947,
									"name": "decodeString",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 948,
											"name": "decodeString",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 949,
													"name": "bytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Format.Values.StringValueInfo",
												"id": 240
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/bytes/decode/index.ts",
											"line": 65,
											"character": 28
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										940
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										941,
										947
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/bytes/index.ts",
									"line": 10,
									"character": 8
								}
							]
						},
						{
							"id": 950,
							"name": "Encode",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 951,
									"name": "encodeBytes",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 952,
											"name": "encodeBytes",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Encodes without padding, length, etc!"
											},
											"parameters": [
												{
													"id": 953,
													"name": "input",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "BytesDynamicValue",
																"id": 223
															},
															{
																"type": "reference",
																"name": "StringValue",
																"id": 236
															}
														]
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/bytes/encode/index.ts",
											"line": 15,
											"character": 27
										}
									]
								},
								{
									"id": 954,
									"name": "stringToBytes",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 955,
											"name": "stringToBytes",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 956,
													"name": "input",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/bytes/encode/index.ts",
											"line": 39,
											"character": 22
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										951,
										954
									],
									"categories": [
										{
											"title": "Encoding (low-level)",
											"children": [
												951,
												954
											]
										}
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/bytes/index.ts",
									"line": 18,
									"character": 8
								}
							]
						},
						{
							"id": 930,
							"name": "Read",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 935,
									"name": "readBytes",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 936,
											"name": "readBytes",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 937,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Pointer.BytesPointer",
														"id": 1900
													}
												},
												{
													"id": 938,
													"name": "state",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmState",
														"id": 1948
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/bytes/read/index.ts",
											"line": 20,
											"character": 25
										}
									]
								},
								{
									"id": 931,
									"name": "readCode",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 932,
											"name": "readCode",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 933,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "CodePointer",
														"id": 1929
													}
												},
												{
													"id": 934,
													"name": "state",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmState",
														"id": 1948
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 817
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/bytes/read/index.ts",
											"line": 6,
											"character": 25
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										935,
										931
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/bytes/index.ts",
									"line": 2,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Modules",
							"kind": 2,
							"children": [
								939,
								950,
								930
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/index.ts",
							"line": 291,
							"character": 8
						}
					]
				},
				{
					"id": 1752,
					"name": "Compilations",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1782,
							"name": "Utils",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1783,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/utils.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:compilations:utils\")"
								},
								{
									"id": 1795,
									"name": "extractPrimarySource",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1796,
											"name": "extractPrimarySource",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1797,
													"name": "sourceMap",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/compilations/utils.ts",
											"line": 182,
											"character": 29
										}
									]
								},
								{
									"id": 1791,
									"name": "getContractNode",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1792,
											"name": "getContractNode",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1793,
													"name": "contract",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Contract",
														"id": 1765
													}
												},
												{
													"id": 1794,
													"name": "compilation",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Compilation",
														"id": 1753
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "AstNode",
												"id": 1532
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/compilations/utils.ts",
											"line": 131,
											"character": 31
										}
									]
								},
								{
									"id": 1784,
									"name": "shimArtifacts",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1785,
											"name": "shimArtifacts",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1786,
													"name": "artifacts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "Artifact"
														}
													}
												},
												{
													"id": 1787,
													"name": "files",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Compilation",
													"id": 1753
												}
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/compilations/utils.ts",
											"line": 9,
											"character": 29
										}
									]
								},
								{
									"id": 1788,
									"name": "sourceIndexForAst",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1789,
											"name": "sourceIndexForAst",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1790,
													"name": "ast",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1532
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/compilations/utils.ts",
											"line": 122,
											"character": 26
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1783
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1795,
										1791,
										1784,
										1788
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/compilations/index.ts",
									"line": 4,
									"character": 8
								}
							]
						},
						{
							"id": 1775,
							"name": "Bytecode",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1776,
									"name": "bytes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 126,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1777,
									"name": "linkReferences",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 127,
											"character": 16
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reflection",
											"declaration": {
												"id": 1778,
												"name": "__type",
												"kind": 65536,
												"kindString": "Type literal",
												"flags": {},
												"children": [
													{
														"id": 1781,
														"name": "length",
														"kind": 32,
														"kindString": "Variable",
														"flags": {},
														"sources": [
															{
																"fileName": "codec/lib/compilations/types.ts",
																"line": 130,
																"character": 10
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "number"
														}
													},
													{
														"id": 1780,
														"name": "name",
														"kind": 32,
														"kindString": "Variable",
														"flags": {},
														"sources": [
															{
																"fileName": "codec/lib/compilations/types.ts",
																"line": 129,
																"character": 8
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "string"
														}
													},
													{
														"id": 1779,
														"name": "offsets",
														"kind": 32,
														"kindString": "Variable",
														"flags": {},
														"sources": [
															{
																"fileName": "codec/lib/compilations/types.ts",
																"line": 128,
																"character": 11
															}
														],
														"type": {
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													}
												],
												"groups": [
													{
														"title": "Variables",
														"kind": 32,
														"children": [
															1781,
															1780,
															1779
														]
													}
												],
												"sources": [
													{
														"fileName": "codec/lib/compilations/types.ts",
														"line": 127,
														"character": 17
													}
												]
											}
										}
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1776,
										1777
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/compilations/types.ts",
									"line": 125,
									"character": 25
								}
							]
						},
						{
							"id": 1753,
							"name": "Compilation",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "An individual compilation."
							},
							"children": [
								{
									"id": 1758,
									"name": "compiler",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "The compiler used in the compilation.  For internal compatibility\npurposes, this may technically be left out if the compiler is instead\nspecified on each source and contract, but please don't actually do that."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 43,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"name": "CompilerVersion",
										"id": 1743
									}
								},
								{
									"id": 1757,
									"name": "contracts",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A list of contracts involved in the compilation."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 37,
											"character": 11
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Contract",
											"id": 1765
										}
									}
								},
								{
									"id": 1754,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "The compilation's ID."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 20,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1756,
									"name": "sources",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A list of sources involved in the compilation.  These must be ordered according\nto their compilation indices.  (If there is for some reason a gap in the\ncompilation indices, a corresponding gap must be left in the sources array.)"
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 33,
											"character": 9
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Source",
											"id": 1759
										}
									}
								},
								{
									"id": 1755,
									"name": "unreliableSourceOrder",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "This field is a compatibility hack only intended for internal use.  It indicates\nthat the order on the sources should be disregarded and disables functionality\nthat relies on such an order.  (E.g., the debugger will throw an exception if\nthis is set.)"
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 27,
											"character": 23
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1758,
										1757,
										1754,
										1756,
										1755
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/compilations/types.ts",
									"line": 16,
									"character": 28
								}
							]
						},
						{
							"id": 1765,
							"name": "Contract",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Represents a contract in a compilation."
							},
							"children": [
								{
									"id": 1771,
									"name": "abi",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "The contract's ABI."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 106,
											"character": 5
										}
									],
									"type": {
										"type": "reference",
										"name": "SchemaAbi"
									}
								},
								{
									"id": 1767,
									"name": "bytecode",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "The contract's constructor bytecode; may be given either as a string\nin the old artifacts format, or as a bytecode object in the new\ncompilation format."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 88,
											"character": 10
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"name": "Bytecode",
												"id": 1775
											}
										]
									}
								},
								{
									"id": 1773,
									"name": "compiler",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "This field is a compatibility hack only inteded for internal use.\n(It allows the compiler to be set on a source if none is set on the\ncompilation as a whole; please don't do that.)"
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 117,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"name": "CompilerVersion",
										"id": 1743
									}
								},
								{
									"id": 1766,
									"name": "contractName",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "The contract's name."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 82,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1768,
									"name": "deployedBytecode",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "The contract's deployed bytecode; may be given either as a string\nin the old artifacts format, or as a bytecode object in the new\ncompilation format."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 94,
											"character": 18
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"name": "Bytecode",
												"id": 1775
											}
										]
									}
								},
								{
									"id": 1770,
									"name": "deployedSourceMap",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "The contract's deployed source map."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 102,
											"character": 19
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1772,
									"name": "immutableReferences",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "The contract's immutable references object as output by Solidity 0.6.5\nor later."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 111,
											"character": 21
										}
									],
									"type": {
										"type": "reference",
										"name": "ImmutableReferences"
									}
								},
								{
									"id": 1774,
									"name": "primarySourceId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "The ID of the contract's primary source."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 121,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1769,
									"name": "sourceMap",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "The contract's constructor source map."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 98,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1771,
										1767,
										1773,
										1766,
										1768,
										1770,
										1772,
										1774,
										1769
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/compilations/types.ts",
									"line": 78,
									"character": 25
								}
							]
						},
						{
							"id": 1759,
							"name": "Source",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Represents a source in a compilation."
							},
							"children": [
								{
									"id": 1763,
									"name": "ast",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "The source's abstract syntax tree."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 66,
											"character": 5
										}
									],
									"type": {
										"type": "reference",
										"name": "AstNode",
										"id": 1532
									}
								},
								{
									"id": 1764,
									"name": "compiler",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "This field is a compatibility hack only inteded for internal use.\n(It allows the compiler to be set on a source if none is set on the\ncompilation as a whole; please don't do that.)"
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 72,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"name": "CompilerVersion",
										"id": 1743
									}
								},
								{
									"id": 1760,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "The source's ID.  For internal compatibility purposes, this may technically\nbe left out, but please include it."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 54,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1762,
									"name": "source",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "The source text."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 62,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1761,
									"name": "sourcePath",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "The source's file path."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 58,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1763,
										1764,
										1760,
										1762,
										1761
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/compilations/types.ts",
									"line": 49,
									"character": 23
								}
							]
						}
					],
					"groups": [
						{
							"title": "Modules",
							"kind": 2,
							"children": [
								1782
							]
						},
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								1775,
								1753,
								1765,
								1759
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/index.ts",
							"line": 381,
							"character": 8
						}
					]
				},
				{
					"id": 1742,
					"name": "Compiler",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1747,
							"name": "Utils",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1748,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/compiler/utils.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:compiler:utils\")"
								},
								{
									"id": 1749,
									"name": "solidityFamily",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1750,
											"name": "solidityFamily",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1751,
													"name": "compiler",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "CompilerVersion",
														"id": 1743
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "SolidityFamily",
												"id": 1746
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/compiler/utils.ts",
											"line": 7,
											"character": 30
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1748
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1749
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/compiler/index.ts",
									"line": 4,
									"character": 8
								}
							]
						},
						{
							"id": 1743,
							"name": "CompilerVersion",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1744,
									"name": "name",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/compiler/types.ts",
											"line": 2,
											"character": 6
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1745,
									"name": "version",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/compiler/types.ts",
											"line": 3,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1744,
										1745
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/compiler/types.ts",
									"line": 1,
									"character": 32
								}
							]
						},
						{
							"id": 1746,
							"name": "SolidityFamily",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "codec/lib/compiler/types.ts",
									"line": 11,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "unknown"
									},
									{
										"type": "stringLiteral",
										"value": "pre-0.5.0"
									},
									{
										"type": "stringLiteral",
										"value": "0.5.x"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Modules",
							"kind": 2,
							"children": [
								1747
							]
						},
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								1743
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								1746
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/index.ts",
							"line": 378,
							"character": 8
						}
					]
				},
				{
					"id": 1798,
					"name": "Contexts",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1837,
							"name": "Import",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1838,
									"name": "contextToType",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1839,
											"name": "contextToType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1840,
													"name": "context",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Context",
														"id": 1800
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Format.Types.ContractType",
												"id": 135
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/contexts/import/index.ts",
											"line": 4,
											"character": 29
										}
									]
								},
								{
									"id": 1841,
									"name": "makeTypeId",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1842,
											"name": "makeTypeId",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1843,
													"name": "astId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 1844,
													"name": "compilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/contexts/import/index.ts",
											"line": 29,
											"character": 26
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1838,
										1841
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/contexts/index.ts",
									"line": 4,
									"character": 8
								}
							]
						},
						{
							"id": 1845,
							"name": "Utils",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1846,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/utils.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:contexts:utils\")"
								},
								{
									"id": 1851,
									"name": "findDebuggerContext",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1852,
											"name": "findDebuggerContext",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1853,
													"name": "contexts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DebuggerContexts",
														"id": 1804
													}
												},
												{
													"id": 1854,
													"name": "binary",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/contexts/utils.ts",
											"line": 28,
											"character": 35
										}
									]
								},
								{
									"id": 1847,
									"name": "findDecoderContext",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1848,
											"name": "findDecoderContext",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1849,
													"name": "contexts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderContexts",
														"id": 1801
													}
												},
												{
													"id": 1850,
													"name": "binary",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "DecoderContext",
														"id": 1807
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/contexts/utils.ts",
											"line": 16,
											"character": 34
										}
									]
								},
								{
									"id": 1855,
									"name": "matchContext",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1856,
											"name": "matchContext",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1857,
													"name": "context",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Context",
														"id": 1800
													}
												},
												{
													"id": 1858,
													"name": "givenBinary",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/contexts/utils.ts",
											"line": 40,
											"character": 28
										}
									]
								},
								{
									"id": 1859,
									"name": "normalizeContexts",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1860,
											"name": "normalizeContexts",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1861,
													"name": "contexts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Contexts",
														"id": 1799
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Contexts",
												"id": 1799
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/contexts/utils.ts",
											"line": 69,
											"character": 33
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1846
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1851,
										1847,
										1855,
										1859
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/contexts/index.ts",
									"line": 7,
									"character": 8
								}
							]
						},
						{
							"id": 1823,
							"name": "DebuggerContext",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1831,
									"name": "abi",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 49,
											"character": 5
										}
									],
									"type": {
										"type": "reference",
										"name": "AbiData.Abi",
										"id": 1166
									}
								},
								{
									"id": 1825,
									"name": "binary",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 41,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1835,
									"name": "compilationId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 53,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1834,
									"name": "compiler",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 52,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"name": "CompilerVersion",
										"id": 1743
									}
								},
								{
									"id": 1824,
									"name": "context",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 40,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1829,
									"name": "contractId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 47,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1830,
									"name": "contractKind",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 48,
											"character": 14
										}
									],
									"type": {
										"type": "reference",
										"name": "Common.ContractKind"
									}
								},
								{
									"id": 1828,
									"name": "contractName",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 46,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1827,
									"name": "immutableReferences",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 45,
											"character": 21
										}
									],
									"type": {
										"type": "reference",
										"name": "ImmutableReferences"
									}
								},
								{
									"id": 1826,
									"name": "isConstructor",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 44,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1836,
									"name": "payable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 54,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1833,
									"name": "primarySource",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 51,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1832,
									"name": "sourceMap",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 50,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1831,
										1825,
										1835,
										1834,
										1824,
										1829,
										1830,
										1828,
										1827,
										1826,
										1836,
										1833,
										1832
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/contexts/types.ts",
									"line": 39,
									"character": 32
								}
							]
						},
						{
							"id": 1804,
							"name": "DebuggerContexts",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"indexSignature": [
								{
									"id": 1805,
									"name": "__index",
									"kind": 8192,
									"kindString": "Index signature",
									"flags": {},
									"parameters": [
										{
											"id": 1806,
											"name": "context",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "DebuggerContext",
										"id": 1823
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/contexts/types.ts",
									"line": 14,
									"character": 33
								}
							]
						},
						{
							"id": 1807,
							"name": "DecoderContext",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1815,
									"name": "abi",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 28,
											"character": 5
										}
									],
									"type": {
										"type": "reference",
										"name": "FunctionAbiBySelectors",
										"id": 1200
									}
								},
								{
									"id": 1809,
									"name": "binary",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 20,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1822,
									"name": "compilationId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 36,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1821,
									"name": "compiler",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 35,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"name": "CompilerVersion",
										"id": 1743
									}
								},
								{
									"id": 1808,
									"name": "context",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 19,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1813,
									"name": "contractId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 26,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1814,
									"name": "contractKind",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 27,
											"character": 14
										}
									],
									"type": {
										"type": "reference",
										"name": "Common.ContractKind"
									}
								},
								{
									"id": 1812,
									"name": "contractName",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 25,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1817,
									"name": "fallbackAbi",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 30,
											"character": 13
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1818,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 1819,
													"name": "fallback",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/contexts/types.ts",
															"line": 32,
															"character": 12
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "FallbackAbiEntry",
																"id": 1181
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													}
												},
												{
													"id": 1820,
													"name": "receive",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/contexts/types.ts",
															"line": 33,
															"character": 11
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "ReceiveAbiEntry",
																"id": 1185
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														1819,
														1820
													]
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/contexts/types.ts",
													"line": 30,
													"character": 15
												}
											]
										}
									}
								},
								{
									"id": 1811,
									"name": "immutableReferences",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 24,
											"character": 21
										}
									],
									"type": {
										"type": "reference",
										"name": "ImmutableReferences"
									}
								},
								{
									"id": 1810,
									"name": "isConstructor",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 23,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1816,
									"name": "payable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 29,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1815,
										1809,
										1822,
										1821,
										1808,
										1813,
										1814,
										1812,
										1817,
										1811,
										1810,
										1816
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/contexts/types.ts",
									"line": 18,
									"character": 31
								}
							]
						},
						{
							"id": 1801,
							"name": "DecoderContexts",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"indexSignature": [
								{
									"id": 1802,
									"name": "__index",
									"kind": 8192,
									"kindString": "Index signature",
									"flags": {},
									"parameters": [
										{
											"id": 1803,
											"name": "context",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "DecoderContext",
										"id": 1807
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/contexts/types.ts",
									"line": 10,
									"character": 32
								}
							]
						},
						{
							"id": 1800,
							"name": "Context",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "codec/lib/contexts/types.ts",
									"line": 8,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "DecoderContext",
										"id": 1807
									},
									{
										"type": "reference",
										"name": "DebuggerContext",
										"id": 1823
									}
								]
							}
						},
						{
							"id": 1799,
							"name": "Contexts",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "codec/lib/contexts/types.ts",
									"line": 6,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "DecoderContexts",
										"id": 1801
									},
									{
										"type": "reference",
										"name": "DebuggerContexts",
										"id": 1804
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Modules",
							"kind": 2,
							"children": [
								1837,
								1845
							]
						},
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								1823,
								1804,
								1807,
								1801
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								1800,
								1799
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/index.ts",
							"line": 384,
							"character": 8
						}
					]
				},
				{
					"id": 1862,
					"name": "Conversion",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1863,
							"name": "debug",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 2,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "IDebugger"
							},
							"defaultValue": " debugModule(\"codec:conversion\")"
						},
						{
							"id": 1892,
							"name": "cleanBool",
							"kind": 64,
							"kindString": "Function",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1893,
									"name": "cleanBool",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1894,
											"name": "result",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Format.Values.ElementaryResult",
												"id": 284
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Format.Values.ElementaryResult",
										"id": 284
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 174,
									"character": 25
								}
							]
						},
						{
							"id": 1889,
							"name": "countDecimalPlaces",
							"kind": 64,
							"kindString": "Function",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1890,
									"name": "countDecimalPlaces",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1891,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Big"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 166,
									"character": 34
								}
							]
						},
						{
							"id": 1885,
							"name": "shiftBigDown",
							"kind": 64,
							"kindString": "Function",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1886,
									"name": "shiftBigDown",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1887,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Big"
											}
										},
										{
											"id": 1888,
											"name": "decimalPlaces",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Big"
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 159,
									"character": 28
								}
							]
						},
						{
							"id": 1881,
							"name": "shiftBigUp",
							"kind": 64,
							"kindString": "Function",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1882,
									"name": "shiftBigUp",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1883,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Big"
											}
										},
										{
											"id": 1884,
											"name": "decimalPlaces",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Big"
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 152,
									"character": 26
								}
							]
						},
						{
							"id": 1864,
							"name": "toBN",
							"kind": 64,
							"kindString": "Function",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1865,
									"name": "toBN",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"returns": "\n"
									},
									"parameters": [
										{
											"id": 1866,
											"name": "bytes",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "undefined | string | number | BN | Uint8Array | Big"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "reference",
														"name": "BN"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													},
													{
														"type": "reference",
														"name": "Big"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "BN"
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 12,
									"character": 20
								}
							]
						},
						{
							"id": 1870,
							"name": "toBig",
							"kind": 64,
							"kindString": "Function",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1871,
									"name": "toBig",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1872,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "BN"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Big"
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 49,
									"character": 21
								}
							]
						},
						{
							"id": 1877,
							"name": "toBytes",
							"kind": 64,
							"kindString": "Function",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1878,
									"name": "toBytes",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1879,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "BN"
													},
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "reference",
														"name": "Big"
													}
												]
											}
										},
										{
											"id": 1880,
											"name": "length",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "0"
										}
									],
									"type": {
										"type": "reference",
										"name": "Uint8Array"
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 93,
									"character": 23
								}
							]
						},
						{
							"id": 1873,
							"name": "toHexString",
							"kind": 64,
							"kindString": "Function",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1874,
									"name": "toHexString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"returns": "\n"
									},
									"parameters": [
										{
											"id": 1875,
											"name": "bytes",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Uint8Array | BN"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Uint8Array"
													},
													{
														"type": "reference",
														"name": "BN"
													}
												]
											}
										},
										{
											"id": 1876,
											"name": "padLength",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "number - minimum desired byte length (left-pad with zeroes)"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "0"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 60,
									"character": 27
								}
							]
						},
						{
							"id": 1867,
							"name": "toSignedBN",
							"kind": 64,
							"kindString": "Function",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1868,
									"name": "toSignedBN",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"returns": "\n"
									},
									"parameters": [
										{
											"id": 1869,
											"name": "bytes",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Uint8Array"
											},
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "BN"
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 38,
									"character": 26
								}
							]
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								1863
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								1892,
								1889,
								1885,
								1881,
								1864,
								1870,
								1877,
								1873,
								1867
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/index.ts",
							"line": 387,
							"character": 8
						}
					]
				},
				{
					"id": 1947,
					"name": "Evm",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 2016,
							"name": "Import",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 2017,
									"name": "functionTableEntryToType",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 2018,
											"name": "functionTableEntryToType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2019,
													"name": "functionEntry",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "InternalFunction",
														"id": 1982
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "ContractTypeNative",
												"id": 136
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/evm/import/index.ts",
											"line": 6,
											"character": 40
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										2017
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/evm/index.ts",
									"line": 7,
									"character": 8
								}
							]
						},
						{
							"id": 1997,
							"name": "Utils",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 2001,
									"name": "ADDRESS_SIZE",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isExported": true,
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 10,
											"character": 25
										}
									],
									"type": {
										"type": "unknown",
										"name": "20"
									},
									"defaultValue": "20"
								},
								{
									"id": 2004,
									"name": "MAX_WORD",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isExported": true,
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 13,
											"character": 21
										}
									],
									"type": {
										"type": "reference",
										"name": "BN"
									},
									"defaultValue": " new BN(-1).toTwos(WORD_SIZE * 8)"
								},
								{
									"id": 2003,
									"name": "PC_SIZE",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isExported": true,
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 12,
											"character": 20
										}
									],
									"type": {
										"type": "unknown",
										"name": "4"
									},
									"defaultValue": "4"
								},
								{
									"id": 2002,
									"name": "SELECTOR_SIZE",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isExported": true,
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 11,
											"character": 26
										}
									],
									"type": {
										"type": "unknown",
										"name": "4"
									},
									"defaultValue": "4"
								},
								{
									"id": 2000,
									"name": "WORD_SIZE",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isExported": true,
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 9,
											"character": 22
										}
									],
									"type": {
										"type": "unknown",
										"name": "32"
									},
									"defaultValue": "32"
								},
								{
									"id": 1999,
									"name": "Web3Utils",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 6,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									},
									"defaultValue": " require(\"web3-utils\")"
								},
								{
									"id": 2005,
									"name": "ZERO_ADDRESS",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isExported": true,
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 14,
											"character": 25
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": " \"0x\" + \"00\".repeat(ADDRESS_SIZE)"
								},
								{
									"id": 1998,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:evm:utils\")"
								},
								{
									"id": 2009,
									"name": "equalData",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 2010,
											"name": "equalData",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2011,
													"name": "bytes1",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Uint8Array"
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												},
												{
													"id": 2012,
													"name": "bytes2",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Uint8Array"
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 38,
											"character": 25
										}
									]
								},
								{
									"id": 2006,
									"name": "keccak256",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 2007,
											"name": "keccak256",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2008,
													"name": "args",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isRest": true
													},
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "BN"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 22,
											"character": 25
										}
									]
								},
								{
									"id": 2013,
									"name": "toAddress",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 2014,
											"name": "toAddress",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2015,
													"name": "bytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Uint8Array"
															},
															{
																"type": "intrinsic",
																"name": "string"
															}
														]
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 56,
											"character": 25
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										2001,
										2004,
										2003,
										2002,
										2000,
										1999,
										2005,
										1998
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										2009,
										2006,
										2013
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/evm/index.ts",
									"line": 4,
									"character": 8
								}
							]
						},
						{
							"id": 1972,
							"name": "AllocationInfo",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1975,
									"name": "abi",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 48,
											"character": 5
										}
									],
									"type": {
										"type": "reference",
										"name": "AbiAllocations",
										"id": 960
									}
								},
								{
									"id": 1976,
									"name": "calldata",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 49,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"name": "CalldataAllocations"
									}
								},
								{
									"id": 1977,
									"name": "event",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 50,
											"character": 7
										}
									],
									"type": {
										"type": "reference",
										"name": "EventAllocations"
									}
								},
								{
									"id": 1974,
									"name": "memory",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 47,
											"character": 8
										}
									],
									"type": {
										"type": "reference",
										"name": "MemoryAllocations",
										"id": 1287
									}
								},
								{
									"id": 1978,
									"name": "state",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 51,
											"character": 7
										}
									],
									"type": {
										"type": "reference",
										"name": "StateAllocations",
										"id": 1409
									}
								},
								{
									"id": 1973,
									"name": "storage",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 46,
											"character": 9
										}
									],
									"type": {
										"type": "reference",
										"name": "StorageAllocations",
										"id": 1400
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1975,
										1976,
										1977,
										1974,
										1978,
										1973
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/evm/types.ts",
									"line": 45,
									"character": 31
								}
							]
						},
						{
							"id": 1964,
							"name": "EvmInfo",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1968,
									"name": "allocations",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 39,
											"character": 13
										}
									],
									"type": {
										"type": "reference",
										"name": "AllocationInfo",
										"id": 1972
									}
								},
								{
									"id": 1969,
									"name": "contexts",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 40,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"name": "DecoderContexts",
										"id": 1801
									}
								},
								{
									"id": 1970,
									"name": "currentContext",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 41,
											"character": 16
										}
									],
									"type": {
										"type": "reference",
										"name": "DecoderContext",
										"id": 1807
									}
								},
								{
									"id": 1971,
									"name": "internalFunctionsTable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 42,
											"character": 24
										}
									],
									"type": {
										"type": "reference",
										"name": "InternalFunctions",
										"id": 1979
									}
								},
								{
									"id": 1966,
									"name": "mappingKeys",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 37,
											"character": 13
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Slot",
											"id": 1375
										}
									}
								},
								{
									"id": 1965,
									"name": "state",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 36,
											"character": 7
										}
									],
									"type": {
										"type": "reference",
										"name": "EvmState",
										"id": 1948
									}
								},
								{
									"id": 1967,
									"name": "userDefinedTypes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 38,
											"character": 18
										}
									],
									"type": {
										"type": "reference",
										"name": "TypesById",
										"id": 166
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1968,
										1969,
										1970,
										1971,
										1966,
										1965,
										1967
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/evm/types.ts",
									"line": 35,
									"character": 24
								}
							]
						},
						{
							"id": 1948,
							"name": "EvmState",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1952,
									"name": "calldata",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 21,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"name": "Uint8Array"
									}
								},
								{
									"id": 1953,
									"name": "code",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 22,
											"character": 6
										}
									],
									"type": {
										"type": "reference",
										"name": "Uint8Array"
									}
								},
								{
									"id": 1958,
									"name": "eventdata",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 26,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "Uint8Array"
									}
								},
								{
									"id": 1959,
									"name": "eventtopics",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 27,
											"character": 13
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Uint8Array"
										}
									}
								},
								{
									"id": 1951,
									"name": "memory",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 20,
											"character": 8
										}
									],
									"type": {
										"type": "reference",
										"name": "Uint8Array"
									}
								},
								{
									"id": 1960,
									"name": "returndata",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 28,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"name": "Uint8Array"
									}
								},
								{
									"id": 1954,
									"name": "specials",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 23,
											"character": 10
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1955,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 1956,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 1957,
															"name": "builtin",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/evm/types.ts",
													"line": 23,
													"character": 12
												}
											]
										}
									}
								},
								{
									"id": 1950,
									"name": "stack",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 19,
											"character": 7
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Uint8Array"
										}
									}
								},
								{
									"id": 1949,
									"name": "storage",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 18,
											"character": 9
										}
									],
									"type": {
										"type": "reference",
										"name": "WordMapping",
										"id": 1961
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1952,
										1953,
										1958,
										1959,
										1951,
										1960,
										1954,
										1950,
										1949
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/evm/types.ts",
									"line": 17,
									"character": 25
								}
							]
						},
						{
							"id": 1982,
							"name": "InternalFunction",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1984,
									"name": "compilationId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 60,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1993,
									"name": "contractId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 69,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1994,
									"name": "contractKind",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 70,
											"character": 14
										}
									],
									"type": {
										"type": "reference",
										"name": "Common.ContractKind"
									}
								},
								{
									"id": 1992,
									"name": "contractName",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 68,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1991,
									"name": "contractNode",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 67,
											"character": 14
										}
									],
									"type": {
										"type": "reference",
										"name": "AstNode",
										"id": 1532
									}
								},
								{
									"id": 1995,
									"name": "contractPayable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 71,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1990,
									"name": "contractPointer",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 66,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1988,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 64,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1996,
									"name": "isDesignatedInvalid",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 72,
											"character": 21
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1989,
									"name": "mutability",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 65,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"name": "Common.Mutability"
									}
								},
								{
									"id": 1987,
									"name": "name",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 63,
											"character": 6
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1986,
									"name": "node",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 62,
											"character": 6
										}
									],
									"type": {
										"type": "reference",
										"name": "AstNode",
										"id": 1532
									}
								},
								{
									"id": 1985,
									"name": "pointer",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 61,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1983,
									"name": "sourceIndex",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 59,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1984,
										1993,
										1994,
										1992,
										1991,
										1995,
										1990,
										1988,
										1996,
										1989,
										1987,
										1986,
										1985,
										1983
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/evm/types.ts",
									"line": 58,
									"character": 33
								}
							]
						},
						{
							"id": 1979,
							"name": "InternalFunctions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"indexSignature": [
								{
									"id": 1980,
									"name": "__index",
									"kind": 8192,
									"kindString": "Index signature",
									"flags": {},
									"parameters": [
										{
											"id": 1981,
											"name": "pc",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "InternalFunction",
										"id": 1982
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/evm/types.ts",
									"line": 54,
									"character": 34
								}
							]
						},
						{
							"id": 1961,
							"name": "WordMapping",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"indexSignature": [
								{
									"id": 1962,
									"name": "__index",
									"kind": 8192,
									"kindString": "Index signature",
									"flags": {},
									"parameters": [
										{
											"id": 1963,
											"name": "slotAddress",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Uint8Array"
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/evm/types.ts",
									"line": 31,
									"character": 28
								}
							]
						}
					],
					"groups": [
						{
							"title": "Modules",
							"kind": 2,
							"children": [
								2016,
								1997
							]
						},
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								1972,
								1964,
								1948,
								1982,
								1979,
								1961
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/index.ts",
							"line": 393,
							"character": 8
						}
					]
				},
				{
					"id": 2,
					"name": "Format",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "# Codec Output Format",
						"text": "## Module information\n\nThis module primarily defines TypeScript types for the output format\nused in results provided by packages\n`@truffle/decoder@^4.0.0` and `@truffle/codec@^0.1.0`.\n\nSee below for complete listing or continue reading\n[Format information](#format-information) to learn about this format.\n\n### How to import\n\nImport either as part of Codec or by itself:\n\n```typescript\n// when importing entire Codec, use Codec.Format.*:\nimport * as Codec from \"@truffle/codec\";\n\n// or import Format directly:\nimport { Format } from \"@truffle/codec\";\n```\n\n![Example struct decoding](media://example-struct-decoding.png)\n\n## Format information\n\nThis format is intended for use in smart contract and dapp development\ntools and libraries, and for use in display contexts, such as when\nbuilding on-screen components to show transaction and smart contract\nstate information.\n\nThis format seeks to provide an exhaustive schema for JavaScript\nobjects to encode **lossless**, **machine-readable** representations of\nall possible Solidity and ABI data types and all possible values of those\ntypes.\n\nThis format targets types and values understood by the\n[Solidity programming language](https://solidity.readthedocs.io) and\nthe [Contract ABI specification](https://solidity.readthedocs.io/en/v0.5.3/abi-spec.html),\nwithin the context of the [Ethereum Virtual Machine](https://ethereum.github.io/yellowpaper/paper.pdf)\n(EVM) and in raw data for transactions and logs according to the\n[Ethereum JSON RPC](https://github.com/ethereum/wiki/wiki/JSON-RPC).\n\nObjects in this format may be deeply nested and/or contain circular\ndependencies. As such, **do not** serialize objects in this format or\notherwise attempt to display them in full without considering potential\nrisk. **Objects in this format are for the machine to read, not humans!**\nThis module provides utilities for inspecting objects in this format,\nincluding the **safe** [[Format.Utils.Inspect.ResultInspector]] wrapper\n(for [util.inspect](https://nodejs.org/api/util.html#util_util_inspect_object_options)),\nand the **unsafe** [[Format.Utils.Inspect.nativize]] function. For more\ninformation, please see the documentation for those utilities.\n\n### Specification\n\nIndividual decoded values are represented by objects of the type\n[[Format.Values.Result]], which contain the following fields:\n1. `type`: This is a [[Format.Types.Type|`Type`]] object describing the value's\ntype.  Each `Type` has a `typeClass` field describing the overall broad type,\nsuch as `\"uint\"` or `\"bytes\"`, together with additional information that gives\nthe specific type.  For full detail, see [[Format.Types]].\n\n2. `kind`: This is either `\"value\"`, in which case the `Result` is a\n[[Format.Values.Value|`Value`]], or `\"error\"`, in which case the `Result` is an\n[[Format.Errors.ErrorResult|`ErrorResult`]].  In the former case, there will be\na `value` field containin the decoded value.  In the latter case, there will be\nan `error` field indicating what went wrong.  *Warning*: When decoding a\ncomplex type, such as an array, mapping, or array, getting a kind of `\"value\"`\ndoes not necessarily mean the individual elements were decoded successfully.\nEven if the `Result` for the array (mapping, struct) as a whole has kind\n`\"value\"`, the elements might still have kind `\"error\"`.\n\n3. `value`: As mentioned, this is included when `kind` is equal to `\"value\"`.\nIt contains information about the actual decoded value.  See\n[[Format.Values|`Format.Values`]] for more information.\n\n4. `error`: The alternative to `value`.  Generally includes information about\nthe raw data that led to the error.  See [[Format.Errors|`Format.Errors`]] for\nmore information.\n\n5. `reference`: This field is a debugger-only feature and does not\napply to results returned by  @truffle/decoder, so it won't be documented here.\n\n### Values vs. errors\n\nIt's worth taking a moment here to answer the question: What counts as a value,\nand what counts as an error?\n\nIn general, the answer is that anything that can be generated via Solidity\nalone (i.e. no assembly), with correctly-encoded inputs, and without making use\nof compiler bugs, is a value, not an error.  That means that, for instance, the\nfollowing things are values, not errors:\n- A variable of contract type whose address does not actually hold a\ncontract of that type;\n- An external function pointer that does not correspond to a valid\nfunction;\n- A string containing invalid UTF-8;\n- ..., etc.\n\nBy contrast, the following *are* errors:\n- A `bool` which is neither `false` (0) nor `true` (1);\n- An `enum` which is out of range;\n- ..., etc.\n\n(You may be wondering about the enum case here, because if you go sufficiently\nfar back, to Solidity 0.4.4 or earlier, it *was* possible to generate\nout-of-range enums without resorting to assembly or compiler bugs.  However,\nenums are only supported in full mode (see\n[Notes on decoding modes](../#decoding-modes)),\nwhich only supports 0.4.12 and later, so\nwe consider out-of-range enums an error.  There are also additional technical\nreasons why supporting out-of-range enums as a value would be difficult.)\n\nThere are three special cases here that are likely worthy of note.\n\nFirstly, internal function pointers currently can't be meaningfully\ndecoded via @truffle/decoder.  However, they decode to a bare-bones value,\nnot an error, as it is (in a sense) our own fault that we can't decode\nthese, so it doesn't make sense to report an error, which would mean that\nsomething is wrong with the encoded data itself.  This value that it\ndecodes to will give the program counter values it corresponds to, but\nwill not include the function name or defining class, as @truffle/decoder\nis not presently capable of that.  For now, full decoding of internal\nfunction pointers remains a debugger-only feature.  (But limited support for\nthis via @truffle/decoder is planned for the future.)\n\n(When using the debugger, an invalid internal function pointer will decode to an\nerror.  However, when using @truffle/decoder, we have no way of discerning whether\nthe pointer is valid or not, so internal function pointers will always decode to\na value, if an uninformative one.)\n\nSecondly, when decoding events, it is impossible to decode indexed parameters\nof reference type.  Thus, these decode to an error\n(`IndexedReferenceTypeError`, which see) rather than to a value.\n\nThirdly, the decoder is currently limited when it comes to decoding state\nvariables that are declared constant, and not all such variables are yet\nsupported in decoding; attempting to decode one of these that is not currently\nsupported will yield an error.\n\nSimilarly, there are various things that decode to errors for technical reasons.\nObjects with encoded length fields larger than what fits in a JavaScript safe\ninteger, or pointed to by pointers with values larger than what fits in a\nJavaScript safe integer, will decode to errors, even if they may technically be\nlegal.  Such cases are impractical to handle and should never come up in real\nuse so we decode them to errors.  Errors may also be returned in case of an\nerror in attempting to read the data to be decoded.\n\nFinally, except when decoding events, we do not return an error if the pointers\nin an ABI-encoded array or tuple are arranged in a nonstandard way, or if\nstrings or bytestrings are incorrectly padded, because it is not worth the\ntrouble to detect these conditions.\n\n\n## Notes on this documentation\n\nMost of this doesn't have explanatory documentation\nbecause it's largely self-explanatory, but particularly\nnon-obvious parts have been documented for clarity.\n\nA note on optional fields: A number of types or values\nhave optional fields.  These contain helpful\nbut non-essential information, or information which\nfor technical reasons we can't guarantee we can determine.\n"
					},
					"children": [
						{
							"id": 389,
							"name": "Errors",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Contains the types for error and `ErrorResult` objects."
							},
							"children": [
								{
									"id": 439,
									"name": "AddressErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for an address"
									},
									"children": [
										{
											"id": 442,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 256,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 565
													},
													{
														"type": "reference",
														"name": "AddressError",
														"id": 443
													}
												]
											}
										},
										{
											"id": 441,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 255,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 440,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 254,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.AddressType",
												"id": 28
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												442,
												441,
												440
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 253,
											"character": 35
										}
									]
								},
								{
									"id": 444,
									"name": "AddressPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A padding error for an address (note padding is not always checked)"
									},
									"children": [
										{
											"id": 446,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 276,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "AddressPaddingError"
											}
										},
										{
											"id": 447,
											"name": "paddingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 277,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"name": "PaddingType"
											}
										},
										{
											"id": 445,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex string; no checksum"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 275,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												446,
												447,
												445
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 271,
											"character": 36
										}
									]
								},
								{
									"id": 498,
									"name": "ArrayErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for an array"
									},
									"children": [
										{
											"id": 501,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 467,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 565
													},
													{
														"type": "reference",
														"name": "ArrayError",
														"id": 502
													}
												]
											}
										},
										{
											"id": 500,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 466,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 499,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 465,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.ArrayType",
												"id": 51
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												501,
												500,
												499
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 464,
											"character": 33
										}
									]
								},
								{
									"id": 413,
									"name": "BoolErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for a boolean"
									},
									"children": [
										{
											"id": 416,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 164,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 565
													},
													{
														"type": "reference",
														"name": "BoolError",
														"id": 417
													}
												]
											}
										},
										{
											"id": 415,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 163,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 414,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 162,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "BoolType",
												"id": 14
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												416,
												415,
												414
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 161,
											"character": 32
										}
									]
								},
								{
									"id": 418,
									"name": "BoolOutOfRangeError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "The bool is neither 0 nor 1"
									},
									"children": [
										{
											"id": 420,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 181,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "BoolOutOfRangeError"
											}
										},
										{
											"id": 419,
											"name": "rawAsBN",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 180,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"name": "BN"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												420,
												419
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 179,
											"character": 36
										}
									]
								},
								{
									"id": 421,
									"name": "BoolPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A padding error for a boolean"
									},
									"children": [
										{
											"id": 423,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 194,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "BoolPaddingError"
											}
										},
										{
											"id": 424,
											"name": "paddingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 195,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"name": "PaddingType"
											}
										},
										{
											"id": 422,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 193,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												423,
												424,
												422
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 189,
											"character": 33
										}
									]
								},
								{
									"id": 434,
									"name": "BytesDynamicErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for a dynamic-length bytestring"
									},
									"children": [
										{
											"id": 437,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 238,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 565
													},
													{
														"type": "reference",
														"name": "BytesDynamicError",
														"id": 438
													}
												]
											}
										},
										{
											"id": 436,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 237,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 435,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 236,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "BytesTypeDynamic",
												"id": 23
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												437,
												436,
												435
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 235,
											"character": 40
										}
									]
								},
								{
									"id": 430,
									"name": "BytesPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A padding error for a static-length bytestring (note padding is not always checked)"
									},
									"children": [
										{
											"id": 432,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 226,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "BytesPaddingError"
											}
										},
										{
											"id": 433,
											"name": "paddingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 227,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"name": "PaddingType"
											}
										},
										{
											"id": 431,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 225,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												432,
												433,
												431
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 221,
											"character": 34
										}
									]
								},
								{
									"id": 425,
									"name": "BytesStaticErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for a static-length bytestring"
									},
									"children": [
										{
											"id": 428,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 206,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 565
													},
													{
														"type": "reference",
														"name": "BytesStaticError",
														"id": 429
													}
												]
											}
										},
										{
											"id": 427,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 205,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 426,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 204,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "BytesTypeStatic",
												"id": 18
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												428,
												427,
												426
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 203,
											"character": 39
										}
									]
								},
								{
									"id": 489,
									"name": "ContractErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for a contract"
									},
									"children": [
										{
											"id": 492,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 431,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 565
													},
													{
														"type": "reference",
														"name": "ContractError",
														"id": 493
													}
												]
											}
										},
										{
											"id": 491,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 430,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 490,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 429,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.ContractType",
												"id": 135
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												492,
												491,
												490
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 428,
											"character": 36
										}
									]
								},
								{
									"id": 494,
									"name": "ContractPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A padding error for contract (note padding is not always checked)"
									},
									"children": [
										{
											"id": 496,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 451,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "ContractPaddingError"
											}
										},
										{
											"id": 497,
											"name": "paddingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 452,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"name": "PaddingType"
											}
										},
										{
											"id": 495,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 450,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												496,
												497,
												495
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 446,
											"character": 37
										}
									]
								},
								{
									"id": 555,
									"name": "DeployedFunctionInConstructorError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Indicates that this is a deployed-style pointer,\ndespite the fact that you're in a constructor"
									},
									"children": [
										{
											"id": 559,
											"name": "constructorProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 687,
													"character": 27
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 557,
											"name": "context",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 685,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.ContractType",
												"id": 135
											}
										},
										{
											"id": 558,
											"name": "deployedProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 686,
													"character": 24
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 556,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 684,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "DeployedFunctionInConstructorError"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												559,
												557,
												558,
												556
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 683,
											"character": 51
										}
									]
								},
								{
									"id": 471,
									"name": "EnumErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for an enum"
									},
									"children": [
										{
											"id": 474,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 373,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 565
													},
													{
														"type": "reference",
														"name": "EnumError",
														"id": 475
													}
												]
											}
										},
										{
											"id": 473,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 372,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 472,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 371,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.EnumType",
												"id": 120
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												474,
												473,
												472
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 370,
											"character": 32
										}
									]
								},
								{
									"id": 485,
									"name": "EnumNotFoundDecodingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "The enum type definition could not be located"
									},
									"children": [
										{
											"id": 486,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 418,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "EnumNotFoundDecodingError"
											}
										},
										{
											"id": 488,
											"name": "rawAsBN",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 420,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"name": "BN"
											}
										},
										{
											"id": 487,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 419,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.EnumType",
												"id": 120
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												486,
												488,
												487
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 417,
											"character": 42
										}
									]
								},
								{
									"id": 476,
									"name": "EnumOutOfRangeError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "The enum is out of range"
									},
									"children": [
										{
											"id": 477,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 392,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "EnumOutOfRangeError"
											}
										},
										{
											"id": 479,
											"name": "rawAsBN",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 394,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"name": "BN"
											}
										},
										{
											"id": 478,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 393,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.EnumType",
												"id": 120
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												477,
												479,
												478
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 391,
											"character": 36
										}
									]
								},
								{
									"id": 480,
									"name": "EnumPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A padding error for an enum"
									},
									"children": [
										{
											"id": 483,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 408,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "EnumPaddingError"
											}
										},
										{
											"id": 484,
											"name": "paddingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 409,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"name": "PaddingType"
											}
										},
										{
											"id": 481,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 406,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 482,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 407,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.EnumType",
												"id": 120
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												483,
												484,
												481,
												482
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 402,
											"character": 33
										}
									]
								},
								{
									"id": 453,
									"name": "FixedErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for a signed fixed-point number"
									},
									"children": [
										{
											"id": 456,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 306,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 565
													},
													{
														"type": "reference",
														"name": "FixedError",
														"id": 461
													}
												]
											}
										},
										{
											"id": 455,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 305,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 454,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 304,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "FixedType",
												"id": 41
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												456,
												455,
												454
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 303,
											"character": 33
										}
									]
								},
								{
									"id": 462,
									"name": "FixedPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A padding error for a signed fixed-point number (note padding is not always checked)"
									},
									"children": [
										{
											"id": 464,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 336,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "FixedPaddingError"
											}
										},
										{
											"id": 465,
											"name": "paddingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 337,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"name": "PaddingType"
											}
										},
										{
											"id": 463,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 335,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												464,
												465,
												463
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 331,
											"character": 34
										}
									]
								},
								{
									"id": 528,
									"name": "FunctionExternalErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for an external function"
									},
									"children": [
										{
											"id": 531,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 580,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 565
													},
													{
														"type": "reference",
														"name": "FunctionExternalError",
														"id": 532
													}
												]
											}
										},
										{
											"id": 530,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 579,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 529,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 578,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.FunctionExternalType",
												"id": 78
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												531,
												530,
												529
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 577,
											"character": 44
										}
									]
								},
								{
									"id": 533,
									"name": "FunctionExternalNonStackPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "This error kind represents a padding error for an external function pointer located anywhere other than the stack."
									},
									"children": [
										{
											"id": 535,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 602,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "FunctionExternalNonStackPaddingError"
											}
										},
										{
											"id": 536,
											"name": "paddingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 603,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"name": "PaddingType"
											}
										},
										{
											"id": 534,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 601,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												535,
												536,
												534
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 597,
											"character": 53
										}
									]
								},
								{
									"id": 537,
									"name": "FunctionExternalStackPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "This error kind represents a padding error for external function pointer located on the stack."
									},
									"children": [
										{
											"id": 540,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 620,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "FunctionExternalStackPaddingError"
											}
										},
										{
											"id": 538,
											"name": "rawAddress",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex string (no checksum; also a full word long)"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 615,
													"character": 12
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 539,
											"name": "rawSelector",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex string (but a full word long)"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 619,
													"character": 13
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												540,
												538,
												539
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 611,
											"character": 50
										}
									]
								},
								{
									"id": 541,
									"name": "FunctionInternalErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for an internal function"
									},
									"children": [
										{
											"id": 544,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 635,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 565
													},
													{
														"type": "reference",
														"name": "FunctionInternalError",
														"id": 545
													}
												]
											}
										},
										{
											"id": 543,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 634,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 542,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 633,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "FunctionInternalType",
												"id": 72
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												544,
												543,
												542
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 632,
											"character": 44
										}
									]
								},
								{
									"id": 546,
									"name": "FunctionInternalPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A padding error for an internal function"
									},
									"children": [
										{
											"id": 548,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 659,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "FunctionInternalPaddingError"
											}
										},
										{
											"id": 549,
											"name": "paddingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 660,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"name": "PaddingType"
											}
										},
										{
											"id": 547,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 658,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												548,
												549,
												547
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 654,
											"character": 45
										}
									]
								},
								{
									"id": 569,
									"name": "IndexedReferenceTypeError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Used when decoding an indexed parameter of reference (or tuple) type.  These\ncan't meaningfully be decoded, so instead they decode to an error, sorry."
									},
									"children": [
										{
											"id": 570,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 751,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "IndexedReferenceTypeError"
											}
										},
										{
											"id": 572,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 756,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 571,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 752,
													"character": 6
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Types.ReferenceType",
														"id": 165
													},
													{
														"type": "reference",
														"name": "TupleType",
														"id": 116
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												570,
												572,
												571
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 750,
											"character": 42
										}
									]
								},
								{
									"id": 404,
									"name": "IntErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for a signed integer"
									},
									"children": [
										{
											"id": 407,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 132,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 565
													},
													{
														"type": "reference",
														"name": "IntError",
														"id": 408
													}
												]
											}
										},
										{
											"id": 406,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 131,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 405,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 130,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "IntType",
												"id": 10
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												407,
												406,
												405
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 129,
											"character": 31
										}
									]
								},
								{
									"id": 409,
									"name": "IntPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A padding error for a signed integer (note padding is not always checked)"
									},
									"children": [
										{
											"id": 411,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 152,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "IntPaddingError"
											}
										},
										{
											"id": 412,
											"name": "paddingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 153,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"name": "PaddingType"
											}
										},
										{
											"id": 410,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 151,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												411,
												412,
												410
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 147,
											"character": 32
										}
									]
								},
								{
									"id": 606,
									"name": "InternalFunctionInABIError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "This should never come up, but just to be sure..."
									},
									"children": [
										{
											"id": 607,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 882,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "InternalFunctionInABIError"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												607
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 881,
											"character": 43
										}
									]
								},
								{
									"id": 518,
									"name": "MagicErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for a magic variable"
									},
									"children": [
										{
											"id": 521,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 539,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 565
													},
													{
														"type": "reference",
														"name": "MagicError",
														"id": 522
													}
												]
											}
										},
										{
											"id": 520,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 538,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 519,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 537,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "MagicType",
												"id": 150
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												521,
												520,
												519
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 536,
											"character": 33
										}
									]
								},
								{
									"id": 560,
									"name": "MalformedInternalFunctionError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Used when the deployed PC is zero but the constructor PC\nis nonzero"
									},
									"children": [
										{
											"id": 564,
											"name": "constructorProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 700,
													"character": 27
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 562,
											"name": "context",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 698,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.ContractType",
												"id": 135
											}
										},
										{
											"id": 563,
											"name": "deployedProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 699,
													"character": 24
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 561,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 697,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "MalformedInternalFunctionError"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												564,
												562,
												563,
												561
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 696,
											"character": 47
										}
									]
								},
								{
									"id": 503,
									"name": "MappingErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for a mapping"
									},
									"children": [
										{
											"id": 506,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 485,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 565
													},
													{
														"type": "reference",
														"name": "MappingError",
														"id": 507
													}
												]
											}
										},
										{
											"id": 505,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 484,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 504,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 483,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "MappingType",
												"id": 66
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												506,
												505,
												504
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 482,
											"character": 35
										}
									]
								},
								{
									"id": 550,
									"name": "NoSuchInternalFunctionError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Indicates that the function pointer being decoded\nfails to point to a valid function, and also is not one of the\ndefault values"
									},
									"children": [
										{
											"id": 554,
											"name": "constructorProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 674,
													"character": 27
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 552,
											"name": "context",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 672,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.ContractType",
												"id": 135
											}
										},
										{
											"id": 553,
											"name": "deployedProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 673,
													"character": 24
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 551,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 671,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "NoSuchInternalFunctionError"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												554,
												552,
												553,
												551
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 670,
											"character": 44
										}
									]
								},
								{
									"id": 598,
									"name": "OverlargePointersNotImplementedError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Error for dynamic type being represented by pointer bigger than a JS number"
									},
									"children": [
										{
											"id": 599,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 848,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "OverlargePointersNotImplementedError"
											}
										},
										{
											"id": 600,
											"name": "pointerAsBN",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 849,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"name": "BN"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												599,
												600
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 847,
											"character": 53
										}
									]
								},
								{
									"id": 602,
									"name": "OverlongArrayOrStringStrictModeError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Error for the stricter length check in strict mode"
									},
									"children": [
										{
											"id": 605,
											"name": "dataLength",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 873,
													"character": 12
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 603,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 871,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "OverlongArrayOrStringStrictModeError"
											}
										},
										{
											"id": 604,
											"name": "lengthAsBN",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 872,
													"character": 12
												}
											],
											"type": {
												"type": "reference",
												"name": "BN"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												605,
												603,
												604
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 870,
											"character": 53
										}
									]
								},
								{
									"id": 594,
									"name": "OverlongArraysAndStringsNotImplementedError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Error for array/string/bytestring having length bigger than a JS number"
									},
									"children": [
										{
											"id": 597,
											"name": "dataLength",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 839,
													"character": 12
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 595,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 837,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "OverlongArraysAndStringsNotImplementedError"
											}
										},
										{
											"id": 596,
											"name": "lengthAsBN",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 838,
													"character": 12
												}
											],
											"type": {
												"type": "reference",
												"name": "BN"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												597,
												595,
												596
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 836,
											"character": 60
										}
									]
								},
								{
									"id": 584,
									"name": "ReadErrorBytes",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Read error in a byte-based location (memory, calldata, etc)"
									},
									"children": [
										{
											"id": 585,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 806,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "ReadErrorBytes"
											}
										},
										{
											"id": 588,
											"name": "length",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 809,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 586,
											"name": "location",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 807,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "BytesLocation",
												"id": 583
											}
										},
										{
											"id": 587,
											"name": "start",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 808,
													"character": 7
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												585,
												588,
												586,
												587
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 805,
											"character": 31
										}
									]
								},
								{
									"id": 579,
									"name": "ReadErrorStack",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Read error on the stack"
									},
									"children": [
										{
											"id": 581,
											"name": "from",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 786,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 580,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 785,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "ReadErrorStack"
											}
										},
										{
											"id": 582,
											"name": "to",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 787,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												581,
												580,
												582
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 784,
											"character": 31
										}
									]
								},
								{
									"id": 589,
									"name": "ReadErrorStorage",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Read error in storage"
									},
									"children": [
										{
											"id": 590,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 818,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "ReadErrorStorage"
											}
										},
										{
											"id": 591,
											"name": "range",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 819,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"name": "Range",
												"id": 1368
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												590,
												591
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 817,
											"character": 33
										}
									]
								},
								{
									"id": 448,
									"name": "StringErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for a string"
									},
									"children": [
										{
											"id": 451,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 288,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 565
													},
													{
														"type": "reference",
														"name": "StringError",
														"id": 452
													}
												]
											}
										},
										{
											"id": 450,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 287,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 449,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 286,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "StringType",
												"id": 37
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												451,
												450,
												449
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 285,
											"character": 34
										}
									]
								},
								{
									"id": 508,
									"name": "StructErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for a struct"
									},
									"children": [
										{
											"id": 511,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 503,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 565
													},
													{
														"type": "reference",
														"name": "StructError",
														"id": 512
													}
												]
											}
										},
										{
											"id": 510,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 502,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 509,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 501,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.StructType",
												"id": 93
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												511,
												510,
												509
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 500,
											"character": 34
										}
									]
								},
								{
									"id": 513,
									"name": "TupleErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for a tuple"
									},
									"children": [
										{
											"id": 516,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 521,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 565
													},
													{
														"type": "reference",
														"name": "TupleError",
														"id": 517
													}
												]
											}
										},
										{
											"id": 515,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 520,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 514,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 519,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "TupleType",
												"id": 116
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												516,
												515,
												514
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 518,
											"character": 33
										}
									]
								},
								{
									"id": 523,
									"name": "TypeErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for a type"
									},
									"children": [
										{
											"id": 526,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 557,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 565
													},
													{
														"type": "reference",
														"name": "TypeErrorUnion",
														"id": 527
													}
												]
											}
										},
										{
											"id": 525,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 556,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 524,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 555,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.TypeType",
												"id": 157
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												526,
												525,
												524
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 554,
											"character": 32
										}
									]
								},
								{
									"id": 457,
									"name": "UfixedErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for an unsigned fixed-point number"
									},
									"children": [
										{
											"id": 460,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 316,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 565
													},
													{
														"type": "reference",
														"name": "UfixedError",
														"id": 466
													}
												]
											}
										},
										{
											"id": 459,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 315,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 458,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 314,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "UfixedType",
												"id": 46
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												460,
												459,
												458
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 313,
											"character": 34
										}
									]
								},
								{
									"id": 467,
									"name": "UfixedPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A padding error for an unsigned fixed-point number (note padding is not always checked)"
									},
									"children": [
										{
											"id": 469,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 357,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "UfixedPaddingError"
											}
										},
										{
											"id": 470,
											"name": "paddingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 358,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"name": "PaddingType"
											}
										},
										{
											"id": 468,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 356,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												469,
												470,
												468
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 352,
											"character": 35
										}
									]
								},
								{
									"id": 395,
									"name": "UintErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for an unsigned integer"
									},
									"children": [
										{
											"id": 398,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 100,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 565
													},
													{
														"type": "reference",
														"name": "UintError",
														"id": 399
													}
												]
											}
										},
										{
											"id": 397,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 99,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 396,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 98,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "UintType",
												"id": 6
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												398,
												397,
												396
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 97,
											"character": 32
										}
									]
								},
								{
									"id": 400,
									"name": "UintPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A padding error for an unsigned integer (note padding is not always checked)"
									},
									"children": [
										{
											"id": 402,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 120,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "UintPaddingError"
											}
										},
										{
											"id": 403,
											"name": "paddingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 121,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"name": "PaddingType"
											}
										},
										{
											"id": 401,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 119,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												402,
												403,
												401
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 115,
											"character": 33
										}
									]
								},
								{
									"id": 576,
									"name": "UnsupportedConstantError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error for an unsupported type of constant (this counts as a read error)"
									},
									"children": [
										{
											"id": 578,
											"name": "definition",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 776,
													"character": 12
												}
											],
											"type": {
												"type": "reference",
												"name": "AstNode",
												"id": 1532
											}
										},
										{
											"id": 577,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 775,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "UnsupportedConstantError"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												578,
												577
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 774,
											"character": 41
										}
									]
								},
								{
									"id": 592,
									"name": "UnusedImmutableError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Attempting to read an immutable that is never stored anywhere"
									},
									"children": [
										{
											"id": 593,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 828,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "UnusedImmutableError"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												593
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 827,
											"character": 37
										}
									]
								},
								{
									"id": 573,
									"name": "UserDefinedTypeNotFoundError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error for when can't find the definition info for a user-defined type"
									},
									"children": [
										{
											"id": 574,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 765,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "UserDefinedTypeNotFoundError"
											}
										},
										{
											"id": 575,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 766,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.UserDefinedType",
												"id": 92
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												574,
												575
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 764,
											"character": 45
										}
									]
								},
								{
									"id": 443,
									"name": "AddressError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A address-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 264,
											"character": 24
										}
									],
									"type": {
										"type": "reference",
										"name": "AddressPaddingError",
										"id": 444
									}
								},
								{
									"id": 502,
									"name": "ArrayError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An arrray-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 475,
											"character": 22
										}
									],
									"type": {
										"type": "reference",
										"name": "DynamicDataImplementationError",
										"id": 567
									}
								},
								{
									"id": 417,
									"name": "BoolError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A bool-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 172,
											"character": 21
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "BoolOutOfRangeError",
												"id": 418
											},
											{
												"type": "reference",
												"name": "BoolPaddingError",
												"id": 421
											}
										]
									}
								},
								{
									"id": 438,
									"name": "BytesDynamicError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A dynamic-bytestring-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 246,
											"character": 29
										}
									],
									"type": {
										"type": "reference",
										"name": "DynamicDataImplementationError",
										"id": 567
									}
								},
								{
									"id": 394,
									"name": "BytesErrorResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for a bytestring"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 90,
											"character": 28
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "BytesStaticErrorResult",
												"id": 425
											},
											{
												"type": "reference",
												"name": "BytesDynamicErrorResult",
												"id": 434
											}
										]
									}
								},
								{
									"id": 583,
									"name": "BytesLocation",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A byte-based location"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 793,
											"character": 25
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "stringLiteral",
												"value": "memory"
											},
											{
												"type": "stringLiteral",
												"value": "calldata"
											},
											{
												"type": "stringLiteral",
												"value": "eventdata"
											},
											{
												"type": "stringLiteral",
												"value": "returndata"
											},
											{
												"type": "stringLiteral",
												"value": "code"
											}
										]
									}
								},
								{
									"id": 429,
									"name": "BytesStaticError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A static-bytestring-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 214,
											"character": 28
										}
									],
									"type": {
										"type": "reference",
										"name": "BytesPaddingError",
										"id": 430
									}
								},
								{
									"id": 493,
									"name": "ContractError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A contract-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 439,
											"character": 25
										}
									],
									"type": {
										"type": "reference",
										"name": "ContractPaddingError",
										"id": 494
									}
								},
								{
									"id": 392,
									"name": "DecoderError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "One of the underlying errors contained in an [[ErrorResult]]"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 41,
											"character": 24
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "GenericError",
												"id": 565
											},
											{
												"type": "reference",
												"name": "UintError",
												"id": 399
											},
											{
												"type": "reference",
												"name": "IntError",
												"id": 408
											},
											{
												"type": "reference",
												"name": "BoolError",
												"id": 417
											},
											{
												"type": "reference",
												"name": "BytesStaticError",
												"id": 429
											},
											{
												"type": "reference",
												"name": "BytesDynamicError",
												"id": 438
											},
											{
												"type": "reference",
												"name": "AddressError",
												"id": 443
											},
											{
												"type": "reference",
												"name": "StringError",
												"id": 452
											},
											{
												"type": "reference",
												"name": "FixedError",
												"id": 461
											},
											{
												"type": "reference",
												"name": "UfixedError",
												"id": 466
											},
											{
												"type": "reference",
												"name": "ArrayError",
												"id": 502
											},
											{
												"type": "reference",
												"name": "MappingError",
												"id": 507
											},
											{
												"type": "reference",
												"name": "StructError",
												"id": 512
											},
											{
												"type": "reference",
												"name": "MagicError",
												"id": 522
											},
											{
												"type": "reference",
												"name": "TypeErrorUnion",
												"id": 527
											},
											{
												"type": "reference",
												"name": "TupleError",
												"id": 517
											},
											{
												"type": "reference",
												"name": "EnumError",
												"id": 475
											},
											{
												"type": "reference",
												"name": "ContractError",
												"id": 493
											},
											{
												"type": "reference",
												"name": "FunctionExternalError",
												"id": 532
											},
											{
												"type": "reference",
												"name": "FunctionInternalError",
												"id": 545
											},
											{
												"type": "reference",
												"name": "InternalUseError",
												"id": 601
											}
										]
									}
								},
								{
									"id": 567,
									"name": "DynamicDataImplementationError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error resulting from overlarge length or pointer values"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 732,
											"character": 42
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "OverlongArraysAndStringsNotImplementedError",
												"id": 594
											},
											{
												"type": "reference",
												"name": "OverlargePointersNotImplementedError",
												"id": 598
											}
										]
									}
								},
								{
									"id": 393,
									"name": "ElementaryErrorResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for an elementary value"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 73,
											"character": 33
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "UintErrorResult",
												"id": 395
											},
											{
												"type": "reference",
												"name": "IntErrorResult",
												"id": 404
											},
											{
												"type": "reference",
												"name": "BoolErrorResult",
												"id": 413
											},
											{
												"type": "reference",
												"name": "BytesErrorResult",
												"id": 394
											},
											{
												"type": "reference",
												"name": "AddressErrorResult",
												"id": 439
											},
											{
												"type": "reference",
												"name": "StringErrorResult",
												"id": 448
											},
											{
												"type": "reference",
												"name": "FixedErrorResult",
												"id": 453
											},
											{
												"type": "reference",
												"name": "UfixedErrorResult",
												"id": 457
											},
											{
												"type": "reference",
												"name": "EnumErrorResult",
												"id": 471
											},
											{
												"type": "reference",
												"name": "ContractErrorResult",
												"id": 489
											}
										]
									}
								},
								{
									"id": 475,
									"name": "EnumError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An enum-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 381,
											"character": 21
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "EnumOutOfRangeError",
												"id": 476
											},
											{
												"type": "reference",
												"name": "EnumPaddingError",
												"id": 480
											},
											{
												"type": "reference",
												"name": "EnumNotFoundDecodingError",
												"id": 485
											}
										]
									}
								},
								{
									"id": 568,
									"name": "ErrorForThrowing",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error that may occur in a component other than the main\ncore of the decoder itself and thus may need to get thrown to it"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 742,
											"character": 28
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "UserDefinedTypeNotFoundError",
												"id": 573
											},
											{
												"type": "reference",
												"name": "ReadError",
												"id": 566
											}
										]
									}
								},
								{
									"id": 391,
									"name": "ErrorResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A result which is an error rather than a value"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 25,
											"character": 23
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ElementaryErrorResult",
												"id": 393
											},
											{
												"type": "reference",
												"name": "ArrayErrorResult",
												"id": 498
											},
											{
												"type": "reference",
												"name": "MappingErrorResult",
												"id": 503
											},
											{
												"type": "reference",
												"name": "StructErrorResult",
												"id": 508
											},
											{
												"type": "reference",
												"name": "MagicErrorResult",
												"id": 518
											},
											{
												"type": "reference",
												"name": "TypeErrorResult",
												"id": 523
											},
											{
												"type": "reference",
												"name": "TupleErrorResult",
												"id": 513
											},
											{
												"type": "reference",
												"name": "FunctionExternalErrorResult",
												"id": 528
											},
											{
												"type": "reference",
												"name": "FunctionInternalErrorResult",
												"id": 541
											}
										]
									}
								},
								{
									"id": 461,
									"name": "FixedError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A fixed-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 324,
											"character": 22
										}
									],
									"type": {
										"type": "reference",
										"name": "FixedPaddingError",
										"id": 462
									}
								},
								{
									"id": 532,
									"name": "FunctionExternalError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An external-function specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 588,
											"character": 33
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "FunctionExternalNonStackPaddingError",
												"id": 533
											},
											{
												"type": "reference",
												"name": "FunctionExternalStackPaddingError",
												"id": 537
											}
										]
									}
								},
								{
									"id": 545,
									"name": "FunctionInternalError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An internal-function specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 643,
											"character": 33
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "FunctionInternalPaddingError",
												"id": 546
											},
											{
												"type": "reference",
												"name": "NoSuchInternalFunctionError",
												"id": 550
											},
											{
												"type": "reference",
												"name": "DeployedFunctionInConstructorError",
												"id": 555
											},
											{
												"type": "reference",
												"name": "MalformedInternalFunctionError",
												"id": 560
											}
										]
									}
								},
								{
									"id": 565,
									"name": "GenericError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A type-non-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 712,
											"character": 24
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "UserDefinedTypeNotFoundError",
												"id": 573
											},
											{
												"type": "reference",
												"name": "IndexedReferenceTypeError",
												"id": 569
											},
											{
												"type": "reference",
												"name": "ReadError",
												"id": 566
											}
										]
									}
								},
								{
									"id": 408,
									"name": "IntError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An int-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 140,
											"character": 20
										}
									],
									"type": {
										"type": "reference",
										"name": "IntPaddingError",
										"id": 409
									}
								},
								{
									"id": 601,
									"name": "InternalUseError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Internal-use error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 861,
											"character": 28
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "OverlongArrayOrStringStrictModeError",
												"id": 602
											},
											{
												"type": "reference",
												"name": "InternalFunctionInABIError",
												"id": 606
											}
										]
									}
								},
								{
									"id": 522,
									"name": "MagicError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A magic-specific error (there are none)"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 547,
											"character": 22
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "never"
									}
								},
								{
									"id": 507,
									"name": "MappingError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A mapping-specific error (there are none)"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 493,
											"character": 24
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "never"
									}
								},
								{
									"id": 566,
									"name": "ReadError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A read error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 721,
											"character": 21
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "UnsupportedConstantError",
												"id": 576
											},
											{
												"type": "reference",
												"name": "ReadErrorStack",
												"id": 579
											},
											{
												"type": "reference",
												"name": "ReadErrorBytes",
												"id": 584
											},
											{
												"type": "reference",
												"name": "ReadErrorStorage",
												"id": 589
											},
											{
												"type": "reference",
												"name": "UnusedImmutableError",
												"id": 592
											}
										]
									}
								},
								{
									"id": 452,
									"name": "StringError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A string-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 296,
											"character": 23
										}
									],
									"type": {
										"type": "reference",
										"name": "DynamicDataImplementationError",
										"id": 567
									}
								},
								{
									"id": 512,
									"name": "StructError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A struct-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 511,
											"character": 23
										}
									],
									"type": {
										"type": "reference",
										"name": "DynamicDataImplementationError",
										"id": 567
									}
								},
								{
									"id": 517,
									"name": "TupleError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A tuple-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 529,
											"character": 22
										}
									],
									"type": {
										"type": "reference",
										"name": "DynamicDataImplementationError",
										"id": 567
									}
								},
								{
									"id": 527,
									"name": "TypeErrorUnion",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error specific to type values (there are none);\nthis isn't called TypeError because that's not legal"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 566,
											"character": 26
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "never"
									}
								},
								{
									"id": 466,
									"name": "UfixedError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A ufixed-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 345,
											"character": 23
										}
									],
									"type": {
										"type": "reference",
										"name": "UfixedPaddingError",
										"id": 467
									}
								},
								{
									"id": 399,
									"name": "UintError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A uint-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 108,
											"character": 21
										}
									],
									"type": {
										"type": "reference",
										"name": "UintPaddingError",
										"id": 400
									}
								},
								{
									"id": 390,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:format:errors\")"
								}
							],
							"groups": [
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										439,
										444,
										498,
										413,
										418,
										421,
										434,
										430,
										425,
										489,
										494,
										555,
										471,
										485,
										476,
										480,
										453,
										462,
										528,
										533,
										537,
										541,
										546,
										569,
										404,
										409,
										606,
										518,
										560,
										503,
										550,
										598,
										602,
										594,
										584,
										579,
										589,
										448,
										508,
										513,
										523,
										457,
										467,
										395,
										400,
										576,
										592,
										573
									],
									"categories": [
										{
											"title": "Elementary types",
											"children": [
												439,
												444,
												413,
												418,
												421,
												434,
												430,
												425,
												480,
												453,
												462,
												404,
												409,
												448,
												457,
												467,
												395,
												400
											]
										},
										{
											"title": "Container types",
											"children": [
												498,
												503,
												508,
												513
											]
										},
										{
											"title": "Function types",
											"children": [
												555,
												528,
												533,
												537,
												541,
												546,
												560,
												550
											]
										},
										{
											"title": "Special container types (debugger-only)",
											"children": [
												518,
												523
											]
										},
										{
											"title": "Generic errors",
											"children": [
												569,
												598,
												594,
												584,
												579,
												589,
												576,
												592,
												573
											]
										},
										{
											"title": "Internal-use errors",
											"children": [
												606,
												602
											]
										},
										{
											"title": "User-defined elementary types",
											"children": [
												489,
												494,
												471,
												485,
												476
											]
										}
									]
								},
								{
									"title": "Type aliases",
									"kind": 4194304,
									"children": [
										443,
										502,
										417,
										438,
										394,
										583,
										429,
										493,
										392,
										567,
										393,
										475,
										568,
										391,
										461,
										532,
										545,
										565,
										408,
										601,
										522,
										507,
										566,
										452,
										512,
										517,
										527,
										466,
										399
									],
									"categories": [
										{
											"title": "General categories",
											"children": [
												392,
												391
											]
										},
										{
											"title": "Elementary types",
											"children": [
												443,
												417,
												438,
												394,
												429,
												393,
												461,
												408,
												452,
												466,
												399
											]
										},
										{
											"title": "Container types",
											"children": [
												502,
												507,
												512,
												517
											]
										},
										{
											"title": "Function types",
											"children": [
												532,
												545
											]
										},
										{
											"title": "Special container types (debugger-only)",
											"children": [
												522,
												527
											]
										},
										{
											"title": "Generic errors",
											"children": [
												567,
												568,
												565,
												566
											]
										},
										{
											"title": "Internal-use errors",
											"children": [
												601
											]
										},
										{
											"title": "User-defined elementary types",
											"children": [
												493,
												475
											]
										},
										{
											"title": "Other",
											"children": [
												583
											]
										}
									]
								},
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										390
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/format/index.ts",
									"line": 16,
									"character": 9
								}
							]
						},
						{
							"id": 3,
							"name": "Types",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Contains the types for type objects, and some\nfunctions for working with them."
							},
							"children": [
								{
									"id": 33,
									"name": "AddressTypeGeneral",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of an address (with payability unspecified)"
									},
									"children": [
										{
											"id": 35,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 132,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "general"
											}
										},
										{
											"id": 34,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 131,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "address"
											}
										},
										{
											"id": 36,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 133,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												35,
												34,
												36
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 130,
											"character": 35
										}
									]
								},
								{
									"id": 29,
									"name": "AddressTypeSpecific",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of an address (with payability specified)"
									},
									"children": [
										{
											"id": 31,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 121,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "specific"
											}
										},
										{
											"id": 32,
											"name": "payable",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 122,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 30,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 120,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "address"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												31,
												32,
												30
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 119,
											"character": 36
										}
									]
								},
								{
									"id": 59,
									"name": "ArrayTypeDynamic",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a dynamic-length array"
									},
									"children": [
										{
											"id": 62,
											"name": "baseType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 200,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "Type",
												"id": 5
											}
										},
										{
											"id": 61,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 199,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "dynamic"
											}
										},
										{
											"id": 63,
											"name": "location",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 201,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "Location",
												"id": 824
											}
										},
										{
											"id": 60,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 198,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "array"
											}
										},
										{
											"id": 64,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 202,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												62,
												61,
												63,
												60,
												64
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 197,
											"character": 33
										}
									]
								},
								{
									"id": 52,
									"name": "ArrayTypeStatic",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a static-length array"
									},
									"children": [
										{
											"id": 55,
											"name": "baseType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 186,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "Type",
												"id": 5
											}
										},
										{
											"id": 54,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 185,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "static"
											}
										},
										{
											"id": 56,
											"name": "length",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 187,
													"character": 8
												}
											],
											"type": {
												"type": "reference",
												"name": "BN"
											}
										},
										{
											"id": 57,
											"name": "location",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 188,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "Location",
												"id": 824
											}
										},
										{
											"id": 53,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 184,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "array"
											}
										},
										{
											"id": 58,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 189,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												55,
												54,
												56,
												57,
												53,
												58
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 183,
											"character": 32
										}
									]
								},
								{
									"id": 14,
									"name": "BoolType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a boolean"
									},
									"children": [
										{
											"id": 15,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 72,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "bool"
											}
										},
										{
											"id": 16,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 73,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												15,
												16
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 71,
											"character": 25
										}
									]
								},
								{
									"id": 23,
									"name": "BytesTypeDynamic",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a dynamic-length bytestring"
									},
									"children": [
										{
											"id": 25,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 102,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "dynamic"
											}
										},
										{
											"id": 26,
											"name": "location",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 103,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "Location",
												"id": 824
											}
										},
										{
											"id": 24,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 101,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "bytes"
											}
										},
										{
											"id": 27,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 104,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												25,
												26,
												24,
												27
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 100,
											"character": 33
										}
									]
								},
								{
									"id": 18,
									"name": "BytesTypeStatic",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a static-length bytestring"
									},
									"children": [
										{
											"id": 20,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 90,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "static"
											}
										},
										{
											"id": 21,
											"name": "length",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 91,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 19,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 89,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "bytes"
											}
										},
										{
											"id": 22,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 92,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												20,
												21,
												19,
												22
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 88,
											"character": 32
										}
									]
								},
								{
									"id": 143,
									"name": "ContractTypeForeign",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a contract w/o full Solidity info -- not used for actual variables"
									},
									"children": [
										{
											"id": 147,
											"name": "contractKind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 471,
													"character": 14
												}
											],
											"type": {
												"type": "reference",
												"name": "ContractKind",
												"id": 827
											}
										},
										{
											"id": 145,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 469,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "foreign"
											}
										},
										{
											"id": 148,
											"name": "payable",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"shortText": "Indicates whether contract has payable fallback function"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 475,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 144,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 468,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "contract"
											}
										},
										{
											"id": 146,
											"name": "typeName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 470,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												147,
												145,
												148,
												144,
												146
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 467,
											"character": 36
										}
									]
								},
								{
									"id": 136,
									"name": "ContractTypeNative",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a contract with full Solidity info -- may be used for actual variables"
									},
									"children": [
										{
											"id": 141,
											"name": "contractKind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 453,
													"character": 14
												}
											],
											"type": {
												"type": "reference",
												"name": "ContractKind",
												"id": 827
											}
										},
										{
											"id": 139,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "Internal ID.  Format may change in future."
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 451,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 138,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 447,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "native"
											}
										},
										{
											"id": 142,
											"name": "payable",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"shortText": "Indicates whether contract has payable fallback function"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 457,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 137,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 446,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "contract"
											}
										},
										{
											"id": 140,
											"name": "typeName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 452,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												141,
												139,
												138,
												142,
												137,
												140
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 445,
											"character": 35
										}
									]
								},
								{
									"id": 129,
									"name": "EnumTypeGlobal",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Global enum"
									},
									"children": [
										{
											"id": 132,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "Internal ID.  Format may change in future."
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 422,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 131,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 418,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "global"
											}
										},
										{
											"id": 134,
											"name": "options",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"shortText": "these must be in order"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 427,
													"character": 9
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										},
										{
											"id": 130,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 417,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "enum"
											}
										},
										{
											"id": 133,
											"name": "typeName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 423,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												132,
												131,
												134,
												130,
												133
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 416,
											"character": 31
										}
									]
								},
								{
									"id": 121,
									"name": "EnumTypeLocal",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Local enum (defined in a contract)"
									},
									"children": [
										{
											"id": 127,
											"name": "definingContract",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 404,
													"character": 18
												}
											],
											"type": {
												"type": "reference",
												"name": "ContractTypeNative",
												"id": 136
											}
										},
										{
											"id": 126,
											"name": "definingContractName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 403,
													"character": 22
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 124,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "Internal ID.  Format may change in future."
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 401,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 123,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 397,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "local"
											}
										},
										{
											"id": 128,
											"name": "options",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"shortText": "these must be in order"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 408,
													"character": 9
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										},
										{
											"id": 122,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 396,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "enum"
											}
										},
										{
											"id": 125,
											"name": "typeName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 402,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												127,
												126,
												124,
												123,
												128,
												122,
												125
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 395,
											"character": 30
										}
									]
								},
								{
									"id": 41,
									"name": "FixedType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a signed fixed-point number"
									},
									"children": [
										{
											"id": 43,
											"name": "bits",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 154,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 44,
											"name": "places",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 155,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 42,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 153,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "fixed"
											}
										},
										{
											"id": 45,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 156,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												43,
												44,
												42,
												45
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 152,
											"character": 26
										}
									]
								},
								{
									"id": 86,
									"name": "FunctionExternalTypeGeneral",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of an external function pointer (general ABI type)"
									},
									"children": [
										{
											"id": 89,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 287,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "general"
											}
										},
										{
											"id": 87,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 285,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "function"
											}
										},
										{
											"id": 90,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 289,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 88,
											"name": "visibility",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 286,
													"character": 12
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "external"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												89,
												87,
												90,
												88
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 284,
											"character": 44
										}
									]
								},
								{
									"id": 79,
									"name": "FunctionExternalTypeSpecific",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of an external function pointer (full Solidity type)"
									},
									"children": [
										{
											"id": 84,
											"name": "inputParameterTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 274,
													"character": 21
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Type",
													"id": 5
												}
											}
										},
										{
											"id": 82,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 272,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "specific"
											}
										},
										{
											"id": 83,
											"name": "mutability",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 273,
													"character": 12
												}
											],
											"type": {
												"type": "reference",
												"name": "Mutability",
												"id": 826
											}
										},
										{
											"id": 85,
											"name": "outputParameterTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 275,
													"character": 22
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Type",
													"id": 5
												}
											}
										},
										{
											"id": 80,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 270,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "function"
											}
										},
										{
											"id": 81,
											"name": "visibility",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 271,
													"character": 12
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "external"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												84,
												82,
												83,
												85,
												80,
												81
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 269,
											"character": 45
										}
									]
								},
								{
									"id": 72,
									"name": "FunctionInternalType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of an internal function pointer"
									},
									"children": [
										{
											"id": 76,
											"name": "inputParameterTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 250,
													"character": 21
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Type",
													"id": 5
												}
											}
										},
										{
											"id": 75,
											"name": "mutability",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 249,
													"character": 12
												}
											],
											"type": {
												"type": "reference",
												"name": "Mutability",
												"id": 826
											}
										},
										{
											"id": 77,
											"name": "outputParameterTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 251,
													"character": 22
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Type",
													"id": 5
												}
											}
										},
										{
											"id": 73,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 247,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "function"
											}
										},
										{
											"id": 74,
											"name": "visibility",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 248,
													"character": 12
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "internal"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												76,
												75,
												77,
												73,
												74
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 246,
											"character": 37
										}
									]
								},
								{
									"id": 10,
									"name": "IntType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a signed integer"
									},
									"children": [
										{
											"id": 12,
											"name": "bits",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 62,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 11,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 61,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "int"
											}
										},
										{
											"id": 13,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 63,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												12,
												11,
												13
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 60,
											"character": 24
										}
									]
								},
								{
									"id": 150,
									"name": "MagicType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a magic variable"
									},
									"children": [
										{
											"id": 153,
											"name": "memberTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 493,
													"character": 13
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 154,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": [
														{
															"id": 155,
															"name": "__index",
															"kind": 8192,
															"kindString": "Index signature",
															"flags": {},
															"parameters": [
																{
																	"id": 156,
																	"name": "field",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "reference",
																"name": "Type",
																"id": 5
															}
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/types.ts",
															"line": 493,
															"character": 15
														}
													]
												}
											}
										},
										{
											"id": 151,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 488,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "magic"
											}
										},
										{
											"id": 152,
											"name": "variable",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 489,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "MagicVariableName",
												"id": 149
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												153,
												151,
												152
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 487,
											"character": 26
										}
									]
								},
								{
									"id": 66,
									"name": "MappingType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a mapping"
									},
									"children": [
										{
											"id": 68,
											"name": "keyType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 229,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"name": "ElementaryType",
												"id": 65
											}
										},
										{
											"id": 70,
											"name": "location",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 231,
													"character": 10
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "storage"
											}
										},
										{
											"id": 67,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 228,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "mapping"
											}
										},
										{
											"id": 69,
											"name": "valueType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 230,
													"character": 11
												}
											],
											"type": {
												"type": "reference",
												"name": "Type",
												"id": 5
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												68,
												70,
												67,
												69
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 227,
											"character": 28
										}
									]
								},
								{
									"id": 94,
									"name": "NameTypePair",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 95,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 319,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 96,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 320,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Type",
												"id": 5
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												95,
												96
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 318,
											"character": 29
										}
									]
								},
								{
									"id": 113,
									"name": "OptionallyNamedType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 114,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 366,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 115,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 367,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Type",
												"id": 5
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												114,
												115
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 365,
											"character": 36
										}
									]
								},
								{
									"id": 37,
									"name": "StringType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a string"
									},
									"children": [
										{
											"id": 39,
											"name": "location",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 143,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "Location",
												"id": 824
											}
										},
										{
											"id": 38,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 142,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "string"
											}
										},
										{
											"id": 40,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 144,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												39,
												38,
												40
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 141,
											"character": 27
										}
									]
								},
								{
									"id": 106,
									"name": "StructTypeGlobal",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Global structs"
									},
									"children": [
										{
											"id": 109,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "Internal ID.  Format may change in future."
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 356,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 108,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 352,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "global"
											}
										},
										{
											"id": 112,
											"name": "location",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 362,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "Location",
												"id": 824
											}
										},
										{
											"id": 111,
											"name": "memberTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"shortText": "these must be in order"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 361,
													"character": 13
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "NameTypePair",
													"id": 94
												}
											}
										},
										{
											"id": 107,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 351,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "struct"
											}
										},
										{
											"id": 110,
											"name": "typeName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 357,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												109,
												108,
												112,
												111,
												107,
												110
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 350,
											"character": 33
										}
									]
								},
								{
									"id": 97,
									"name": "StructTypeLocal",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Local structs (defined in contracts)"
									},
									"children": [
										{
											"id": 103,
											"name": "definingContract",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 337,
													"character": 18
												}
											],
											"type": {
												"type": "reference",
												"name": "ContractTypeNative",
												"id": 136
											}
										},
										{
											"id": 102,
											"name": "definingContractName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 336,
													"character": 22
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 100,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "Internal ID.  Format may change in future."
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 334,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 99,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 330,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "local"
											}
										},
										{
											"id": 105,
											"name": "location",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 342,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "Location",
												"id": 824
											}
										},
										{
											"id": 104,
											"name": "memberTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"shortText": "these must be in order"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 341,
													"character": 13
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "NameTypePair",
													"id": 94
												}
											}
										},
										{
											"id": 98,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 329,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "struct"
											}
										},
										{
											"id": 101,
											"name": "typeName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 335,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												103,
												102,
												100,
												99,
												105,
												104,
												98,
												101
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 328,
											"character": 32
										}
									]
								},
								{
									"id": 116,
									"name": "TupleType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a tuple (for use in ABI)"
									},
									"children": [
										{
											"id": 118,
											"name": "memberTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 377,
													"character": 13
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "OptionallyNamedType",
													"id": 113
												}
											}
										},
										{
											"id": 117,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 376,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "tuple"
											}
										},
										{
											"id": 119,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 378,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												118,
												117,
												119
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 375,
											"character": 26
										}
									]
								},
								{
									"id": 158,
									"name": "TypeTypeContract",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a contract type"
									},
									"children": [
										{
											"id": 161,
											"name": "stateVariableTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"shortText": "these must be in order, and must only include\n**non-inherited** state variables"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 517,
													"character": 20
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "NameTypePair",
													"id": 94
												}
											}
										},
										{
											"id": 160,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 512,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "ContractTypeNative",
												"id": 136
											}
										},
										{
											"id": 159,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 511,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "type"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												161,
												160,
												159
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 510,
											"character": 33
										}
									]
								},
								{
									"id": 162,
									"name": "TypeTypeEnum",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of an enum type"
									},
									"children": [
										{
											"id": 164,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 526,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "EnumType",
												"id": 120
											}
										},
										{
											"id": 163,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 525,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "type"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												164,
												163
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 524,
											"character": 29
										}
									]
								},
								{
									"id": 166,
									"name": "TypesById",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"indexSignature": [
										{
											"id": 167,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 168,
													"name": "id",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "UserDefinedType",
												"id": 92
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 541,
											"character": 26
										}
									]
								},
								{
									"id": 46,
									"name": "UfixedType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of an unsigned fixed-point number"
									},
									"children": [
										{
											"id": 48,
											"name": "bits",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 166,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 49,
											"name": "places",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 167,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 47,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 165,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "ufixed"
											}
										},
										{
											"id": 50,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 168,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												48,
												49,
												47,
												50
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 164,
											"character": 27
										}
									]
								},
								{
									"id": 6,
									"name": "UintType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of an unsigned integer"
									},
									"children": [
										{
											"id": 8,
											"name": "bits",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 51,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 7,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 50,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "uint"
											}
										},
										{
											"id": 9,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 52,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												8,
												7,
												9
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 49,
											"character": 25
										}
									]
								},
								{
									"id": 28,
									"name": "AddressType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of an address"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 112,
											"character": 23
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "AddressTypeSpecific",
												"id": 29
											},
											{
												"type": "reference",
												"name": "AddressTypeGeneral",
												"id": 33
											}
										]
									}
								},
								{
									"id": 51,
									"name": "ArrayType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of an array"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 176,
											"character": 21
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ArrayTypeStatic",
												"id": 52
											},
											{
												"type": "reference",
												"name": "ArrayTypeDynamic",
												"id": 59
											}
										]
									}
								},
								{
									"id": 17,
									"name": "BytesType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a bytestring (static or dynamic)"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 81,
											"character": 21
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "BytesTypeStatic",
												"id": 18
											},
											{
												"type": "reference",
												"name": "BytesTypeDynamic",
												"id": 23
											}
										]
									}
								},
								{
									"id": 91,
									"name": "ContractDefinedType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Types defined inside contracts"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 297,
											"character": 31
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "StructTypeLocal",
												"id": 97
											},
											{
												"type": "reference",
												"name": "EnumTypeLocal",
												"id": 121
											}
										]
									}
								},
								{
									"id": 135,
									"name": "ContractType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a contract; used not just for actual values but wherever a contract type\nis needed",
										"text": "Contract types may be native (has Solidity info) or foreign (lacking Solidity info).\n"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 438,
											"character": 24
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ContractTypeNative",
												"id": 136
											},
											{
												"type": "reference",
												"name": "ContractTypeForeign",
												"id": 143
											}
										]
									}
								},
								{
									"id": 65,
									"name": "ElementaryType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of an elementary value"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 210,
											"character": 26
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "UintType",
												"id": 6
											},
											{
												"type": "reference",
												"name": "IntType",
												"id": 10
											},
											{
												"type": "reference",
												"name": "BoolType",
												"id": 14
											},
											{
												"type": "reference",
												"name": "BytesType",
												"id": 17
											},
											{
												"type": "reference",
												"name": "FixedType",
												"id": 41
											},
											{
												"type": "reference",
												"name": "UfixedType",
												"id": 46
											},
											{
												"type": "reference",
												"name": "AddressType",
												"id": 28
											},
											{
												"type": "reference",
												"name": "StringType",
												"id": 37
											},
											{
												"type": "reference",
												"name": "EnumType",
												"id": 120
											},
											{
												"type": "reference",
												"name": "ContractType",
												"id": 135
											}
										]
									}
								},
								{
									"id": 120,
									"name": "EnumType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of an enum",
										"text": "Enums may be local (defined in a contract) or global (defined outside of any contract)\n"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 388,
											"character": 20
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "EnumTypeLocal",
												"id": 121
											},
											{
												"type": "reference",
												"name": "EnumTypeGlobal",
												"id": 129
											}
										]
									}
								},
								{
									"id": 78,
									"name": "FunctionExternalType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of an external function pointer"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 260,
											"character": 32
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "FunctionExternalTypeSpecific",
												"id": 79
											},
											{
												"type": "reference",
												"name": "FunctionExternalTypeGeneral",
												"id": 86
											}
										]
									}
								},
								{
									"id": 71,
									"name": "FunctionType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a function pointer (internal or external)"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 239,
											"character": 24
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "FunctionInternalType",
												"id": 72
											},
											{
												"type": "reference",
												"name": "FunctionExternalType",
												"id": 78
											}
										]
									}
								},
								{
									"id": 149,
									"name": "MagicVariableName",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 480,
											"character": 29
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "stringLiteral",
												"value": "message"
											},
											{
												"type": "stringLiteral",
												"value": "block"
											},
											{
												"type": "stringLiteral",
												"value": "transaction"
											}
										]
									}
								},
								{
									"id": 165,
									"name": "ReferenceType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Reference types"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 534,
											"character": 25
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ArrayType",
												"id": 51
											},
											{
												"type": "reference",
												"name": "MappingType",
												"id": 66
											},
											{
												"type": "reference",
												"name": "StructType",
												"id": 93
											},
											{
												"type": "reference",
												"name": "StringType",
												"id": 37
											},
											{
												"type": "reference",
												"name": "BytesTypeDynamic",
												"id": 23
											}
										]
									}
								},
								{
									"id": 93,
									"name": "StructType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a struct",
										"text": "Structs may be local (defined in a contract) or global (defined outside of any contract)\n"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 316,
											"character": 22
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "StructTypeLocal",
												"id": 97
											},
											{
												"type": "reference",
												"name": "StructTypeGlobal",
												"id": 106
											}
										]
									}
								},
								{
									"id": 5,
									"name": "Type",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Object representing a type"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 25,
											"character": 16
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "UintType",
												"id": 6
											},
											{
												"type": "reference",
												"name": "IntType",
												"id": 10
											},
											{
												"type": "reference",
												"name": "BoolType",
												"id": 14
											},
											{
												"type": "reference",
												"name": "BytesType",
												"id": 17
											},
											{
												"type": "reference",
												"name": "AddressType",
												"id": 28
											},
											{
												"type": "reference",
												"name": "FixedType",
												"id": 41
											},
											{
												"type": "reference",
												"name": "UfixedType",
												"id": 46
											},
											{
												"type": "reference",
												"name": "StringType",
												"id": 37
											},
											{
												"type": "reference",
												"name": "ArrayType",
												"id": 51
											},
											{
												"type": "reference",
												"name": "MappingType",
												"id": 66
											},
											{
												"type": "reference",
												"name": "FunctionType",
												"id": 71
											},
											{
												"type": "reference",
												"name": "StructType",
												"id": 93
											},
											{
												"type": "reference",
												"name": "EnumType",
												"id": 120
											},
											{
												"type": "reference",
												"name": "ContractType",
												"id": 135
											},
											{
												"type": "reference",
												"name": "MagicType",
												"id": 150
											},
											{
												"type": "reference",
												"name": "TypeType",
												"id": 157
											},
											{
												"type": "reference",
												"name": "TupleType",
												"id": 116
											}
										]
									}
								},
								{
									"id": 157,
									"name": "TypeType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a type!  This is currently only used for contract types and enum\ntypes, but may expand in the future."
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 504,
											"character": 20
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "TypeTypeContract",
												"id": 158
											},
											{
												"type": "reference",
												"name": "TypeTypeEnum",
												"id": 162
											}
										]
									}
								},
								{
									"id": 92,
									"name": "UserDefinedType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "User-defined types"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 303,
											"character": 27
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ContractDefinedType",
												"id": 91
											},
											{
												"type": "reference",
												"name": "ContractTypeNative",
												"id": 136
											},
											{
												"type": "reference",
												"name": "StructTypeGlobal",
												"id": 106
											},
											{
												"type": "reference",
												"name": "EnumTypeGlobal",
												"id": 129
											}
										]
									}
								},
								{
									"id": 4,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:format:types\")"
								},
								{
									"id": 175,
									"name": "fullType",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 176,
											"name": "fullType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 177,
													"name": "basicType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Type",
														"id": 5
													}
												},
												{
													"id": 178,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 166
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Type",
												"id": 5
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 563,
											"character": 24
										}
									]
								},
								{
									"id": 189,
									"name": "isContractDefinedType",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 190,
											"name": "isContractDefinedType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 191,
													"name": "anyType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Type",
														"id": 5
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 740,
											"character": 37
										}
									]
								},
								{
									"id": 172,
									"name": "isReferenceType",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 173,
											"name": "isReferenceType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 174,
													"name": "anyType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Type",
														"id": 5
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 550,
											"character": 31
										}
									]
								},
								{
									"id": 169,
									"name": "isUserDefinedType",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 170,
											"name": "isUserDefinedType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 171,
													"name": "anyType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Type",
														"id": 5
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 545,
											"character": 26
										}
									]
								},
								{
									"id": 179,
									"name": "specifyLocation",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 180,
											"name": "specifyLocation",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 181,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Type",
														"id": 5
													}
												},
												{
													"id": 182,
													"name": "location",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Location",
																"id": 824
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Type",
												"id": 5
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 580,
											"character": 31
										}
									]
								},
								{
									"id": 183,
									"name": "typeString",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 184,
											"name": "typeString",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 185,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Type",
														"id": 5
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 625,
											"character": 26
										}
									]
								},
								{
									"id": 186,
									"name": "typeStringWithoutLocation",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 187,
											"name": "typeStringWithoutLocation",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 188,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Type",
														"id": 5
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 634,
											"character": 41
										}
									]
								}
							],
							"groups": [
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										33,
										29,
										59,
										52,
										14,
										23,
										18,
										143,
										136,
										129,
										121,
										41,
										86,
										79,
										72,
										10,
										150,
										66,
										94,
										113,
										37,
										106,
										97,
										116,
										158,
										162,
										166,
										46,
										6
									],
									"categories": [
										{
											"title": "Elementary types",
											"children": [
												33,
												29,
												14,
												23,
												18,
												41,
												10,
												37,
												46,
												6
											]
										},
										{
											"title": "Container types",
											"children": [
												59,
												52,
												66,
												106,
												97,
												116
											]
										},
										{
											"title": "Function types",
											"children": [
												86,
												79,
												72
											]
										},
										{
											"title": "Special container types (debugger-only)",
											"children": [
												150,
												158,
												162
											]
										},
										{
											"title": "User-defined elementary types",
											"children": [
												143,
												129,
												121
											]
										},
										{
											"title": "User-defined elemntary types",
											"children": [
												136
											]
										},
										{
											"title": "Other",
											"children": [
												94,
												113,
												166
											]
										}
									]
								},
								{
									"title": "Type aliases",
									"kind": 4194304,
									"children": [
										28,
										51,
										17,
										91,
										135,
										65,
										120,
										78,
										71,
										149,
										165,
										93,
										5,
										157,
										92
									],
									"categories": [
										{
											"title": "General categories",
											"children": [
												91,
												65,
												165,
												5,
												92
											]
										},
										{
											"title": "Elementary types",
											"children": [
												28,
												17
											]
										},
										{
											"title": "Container types",
											"children": [
												51,
												93
											]
										},
										{
											"title": "Function types",
											"children": [
												78,
												71
											]
										},
										{
											"title": "Special container types (debugger-only)",
											"children": [
												157
											]
										},
										{
											"title": "User-defined elementary types",
											"children": [
												135,
												120
											]
										},
										{
											"title": "Other",
											"children": [
												149
											]
										}
									]
								},
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										4
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										175,
										189,
										172,
										169,
										179,
										183,
										186
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/format/index.ts",
									"line": 4,
									"character": 8
								}
							]
						},
						{
							"id": 608,
							"name": "Utils",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 684,
									"name": "Circularity",
									"kind": 2,
									"kindString": "Module",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 685,
											"name": "debug",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isConst": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/utils/circularity.ts",
													"line": 2,
													"character": 11
												}
											],
											"type": {
												"type": "reference",
												"name": "IDebugger"
											},
											"defaultValue": " debugModule(\"codec:format:utils:circularity\")"
										},
										{
											"id": 686,
											"name": "tie",
											"kind": 64,
											"kindString": "Function",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 687,
													"name": "tie",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 688,
															"name": "untied",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Format.Values.Result",
																"id": 282
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 282
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/circularity.ts",
													"line": 6,
													"character": 19
												}
											]
										},
										{
											"id": 689,
											"name": "tieWithTable",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"signatures": [
												{
													"id": 690,
													"name": "tieWithTable",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 691,
															"name": "untied",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Format.Values.Result",
																"id": 282
															}
														},
														{
															"id": 692,
															"name": "seenSoFar",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "union",
																	"types": [
																		{
																			"type": "reference",
																			"name": "ArrayValue",
																			"id": 298
																		},
																		{
																			"type": "reference",
																			"name": "StructValue",
																			"id": 312
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 282
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/circularity.ts",
													"line": 10,
													"character": 21
												}
											]
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												685
											]
										},
										{
											"title": "Functions",
											"kind": 64,
											"children": [
												686,
												689
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/utils/index.ts",
											"line": 13,
											"character": 8
										}
									]
								},
								{
									"id": 609,
									"name": "Exception",
									"kind": 2,
									"kindString": "Module",
									"flags": {
										"isProtected": true,
										"isExported": true
									},
									"comment": {},
									"children": [
										{
											"id": 610,
											"name": "debug",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isConst": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/utils/exception.ts",
													"line": 2,
													"character": 11
												}
											],
											"type": {
												"type": "reference",
												"name": "IDebugger"
											},
											"defaultValue": " debugModule(\"codec:format:utils:exception\")"
										},
										{
											"id": 617,
											"name": "keyInfoForPrinting",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"signatures": [
												{
													"id": 618,
													"name": "keyInfoForPrinting",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 619,
															"name": "input",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Format.Values.ElementaryValue",
																"id": 194
															}
														}
													],
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 620,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"children": [
																{
																	"id": 621,
																	"name": "type",
																	"kind": 32,
																	"kindString": "Variable",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "codec/lib/format/utils/exception.ts",
																			"line": 78,
																			"character": 9
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																},
																{
																	"id": 622,
																	"name": "value",
																	"kind": 32,
																	"kindString": "Variable",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "codec/lib/format/utils/exception.ts",
																			"line": 78,
																			"character": 24
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"groups": [
																{
																	"title": "Variables",
																	"kind": 32,
																	"children": [
																		621,
																		622
																	]
																}
															],
															"sources": [
																{
																	"fileName": "codec/lib/format/utils/exception.ts",
																	"line": 78,
																	"character": 2
																}
															]
														}
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/exception.ts",
													"line": 76,
													"character": 27
												}
											]
										},
										{
											"id": 611,
											"name": "message",
											"kind": 64,
											"kindString": "Function",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 612,
													"name": "message",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 613,
															"name": "error",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Format.Errors.ErrorForThrowing",
																"id": 568
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/exception.ts",
													"line": 11,
													"character": 23
												}
											]
										},
										{
											"id": 614,
											"name": "slotAddressPrintout",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"signatures": [
												{
													"id": 615,
													"name": "slotAddressPrintout",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 616,
															"name": "slot",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Slot",
																"id": 1375
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/exception.ts",
													"line": 49,
													"character": 28
												}
											]
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												610
											]
										},
										{
											"title": "Functions",
											"kind": 64,
											"children": [
												617,
												611,
												614
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/utils/index.ts",
											"line": 2,
											"character": 8
										}
									]
								},
								{
									"id": 623,
									"name": "Inspect",
									"kind": 2,
									"kindString": "Module",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 645,
											"name": "ContractInfoInspector",
											"kind": 128,
											"kindString": "Class",
											"flags": {},
											"children": [
												{
													"id": 647,
													"name": "constructor",
													"kind": 512,
													"kindString": "Constructor",
													"flags": {},
													"signatures": [
														{
															"id": 648,
															"name": "new ContractInfoInspector",
															"kind": 16384,
															"kindString": "Constructor signature",
															"flags": {},
															"parameters": [
																{
																	"id": 649,
																	"name": "value",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "Format.Values.ContractValueInfo",
																		"id": 272
																	}
																}
															],
															"type": {
																"type": "reference",
																"name": "ContractInfoInspector",
																"id": 645
															}
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/utils/inspect.ts",
															"line": 397,
															"character": 41
														}
													]
												},
												{
													"id": 646,
													"name": "value",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/format/utils/inspect.ts",
															"line": 397,
															"character": 7
														}
													],
													"type": {
														"type": "reference",
														"name": "Format.Values.ContractValueInfo",
														"id": 272
													}
												},
												{
													"id": 650,
													"name": "__computed",
													"kind": 2048,
													"kindString": "Method",
													"flags": {},
													"signatures": [
														{
															"id": 651,
															"name": "__computed",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 652,
																	"name": "depth",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "union",
																		"types": [
																			{
																				"type": "intrinsic",
																				"name": "number"
																			},
																			{
																				"type": "intrinsic",
																				"name": "null"
																			}
																		]
																	}
																},
																{
																	"id": 653,
																	"name": "options",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "InspectOptions",
																		"id": 625
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/utils/inspect.ts",
															"line": 401,
															"character": 23
														}
													]
												}
											],
											"groups": [
												{
													"title": "Constructors",
													"kind": 512,
													"children": [
														647
													]
												},
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														646
													]
												},
												{
													"title": "Methods",
													"kind": 2048,
													"children": [
														650
													]
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/inspect.ts",
													"line": 396,
													"character": 27
												}
											]
										},
										{
											"id": 636,
											"name": "ResultInspector",
											"kind": 128,
											"kindString": "Class",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "This class is meant to be used with Node's\n[util.inspect()](https://nodejs.org/api/util.html#util_util_inspect_object_options)\nfunction.  Given a [[Format.Values.Result]] `value`, one can use\n`new ResultInspector(value)` to create a ResultInspector for that value,\nwhich can be used with util.inspect() to create a human-readable string\nrepresenting the value.",
												"tags": [
													{
														"tag": "example",
														"text": "\nSuppose `value` is a Result.  In Node, the following would print to the\nconsole a human-readable representation of `value`, with colors enabled,\nno maximum depth, and no maximum array length, and lines (usually) no\nlonger than 80 characters:\n```javascript\nconsole.log(\n  util.inspect(\n    new ResultInspector(value),\n    {\n      colors: true,\n      depth: null,\n      maxArrayLength: null,\n      breakLength: 80\n    }\n  )\n);\n```\nOf course, there are many other ways to use util.inspect; see Node's\ndocumentation, linked above, for more.\n"
													}
												]
											},
											"children": [
												{
													"id": 638,
													"name": "constructor",
													"kind": 512,
													"kindString": "Constructor",
													"flags": {
														"isExported": true
													},
													"signatures": [
														{
															"id": 639,
															"name": "new ResultInspector",
															"kind": 16384,
															"kindString": "Constructor signature",
															"flags": {},
															"parameters": [
																{
																	"id": 640,
																	"name": "result",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "Format.Values.Result",
																		"id": 282
																	}
																}
															],
															"type": {
																"type": "reference",
																"name": "ResultInspector",
																"id": 636
															}
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/utils/inspect.ts",
															"line": 56,
															"character": 31
														}
													]
												},
												{
													"id": 637,
													"name": "result",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "codec/lib/format/utils/inspect.ts",
															"line": 56,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 282
													}
												},
												{
													"id": 641,
													"name": "__computed",
													"kind": 2048,
													"kindString": "Method",
													"flags": {
														"isExported": true
													},
													"signatures": [
														{
															"id": 642,
															"name": "__computed",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 643,
																	"name": "depth",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "union",
																		"types": [
																			{
																				"type": "intrinsic",
																				"name": "number"
																			},
																			{
																				"type": "intrinsic",
																				"name": "null"
																			}
																		]
																	}
																},
																{
																	"id": 644,
																	"name": "options",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "InspectOptions",
																		"id": 625
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/utils/inspect.ts",
															"line": 60,
															"character": 23
														}
													]
												}
											],
											"groups": [
												{
													"title": "Constructors",
													"kind": 512,
													"children": [
														638
													]
												},
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														637
													]
												},
												{
													"title": "Methods",
													"kind": 2048,
													"children": [
														641
													]
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/inspect.ts",
													"line": 55,
													"character": 28
												}
											]
										},
										{
											"id": 625,
											"name": "InspectOptions",
											"kind": 256,
											"kindString": "Interface",
											"flags": {},
											"children": [
												{
													"id": 632,
													"name": "breakLength",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/format/utils/inspect.ts",
															"line": 13,
															"character": 13
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 631,
													"name": "colors",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/format/utils/inspect.ts",
															"line": 12,
															"character": 8
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 626,
													"name": "stylize",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "codec/lib/format/utils/inspect.ts",
															"line": 11,
															"character": 9
														}
													],
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 627,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 628,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 629,
																			"name": "toMaybeColor",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 630,
																			"name": "style",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {
																				"isOptional": true
																			},
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"sources": [
																{
																	"fileName": "codec/lib/format/utils/inspect.ts",
																	"line": 11,
																	"character": 11
																}
															]
														}
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														632,
														631,
														626
													]
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/inspect.ts",
													"line": 10,
													"character": 24
												}
											]
										},
										{
											"id": 624,
											"name": "debug",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isConst": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/utils/inspect.ts",
													"line": 2,
													"character": 11
												}
											],
											"type": {
												"type": "reference",
												"name": "IDebugger"
											},
											"defaultValue": " debugModule(\"codec:format:utils:inspect\")"
										},
										{
											"id": 633,
											"name": "cleanStylize",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"signatures": [
												{
													"id": 634,
													"name": "cleanStylize",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 635,
															"name": "options",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "InspectOptions",
																"id": 625
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/inspect.ts",
													"line": 17,
													"character": 21
												}
											]
										},
										{
											"id": 665,
											"name": "enumFullName",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"signatures": [
												{
													"id": 666,
													"name": "enumFullName",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 667,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "EnumValue",
																"id": 261
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/inspect.ts",
													"line": 433,
													"character": 21
												}
											]
										},
										{
											"id": 654,
											"name": "enumTypeName",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"signatures": [
												{
													"id": 655,
													"name": "enumTypeName",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 656,
															"name": "enumType",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Format.Types.EnumType",
																"id": 120
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/inspect.ts",
													"line": 416,
													"character": 21
												}
											]
										},
										{
											"id": 661,
											"name": "formatCircular",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"signatures": [
												{
													"id": 662,
													"name": "formatCircular",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 663,
															"name": "loopLength",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 664,
															"name": "options",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "InspectOptions",
																"id": 625
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/inspect.ts",
													"line": 429,
													"character": 23
												}
											]
										},
										{
											"id": 677,
											"name": "nativize",
											"kind": 64,
											"kindString": "Function",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 678,
													"name": "nativize",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "WARNING! Do NOT use this function in real code unless you absolutely have\nto!  Using it in controlled tests is fine, but do NOT use it in real code if\nyou have any better option!",
														"text": "This function is a giant hack.  It will throw exceptions on numbers that\ndon't fit in a Javascript number.  It loses various information.  It was\nonly ever written to support our hacked-together watch expression system,\nand later repurposed to make testing easier.\n\nIf you are not doing something as horrible as evaluating user-inputted\nJavascript expressions meant to operate upon Solidity variables, then you\nprobably have a better option than using this in real code!\n\n(For instance, if you just want to nicely print individual values, without\nattempting to first operate on them via Javascript expressions, we have the\n[[ResultInspector]] class, which can be used with Node's\n[util.inspect()](https://nodejs.org/api/util.html#util_util_inspect_object_options)\nto do exactly that.)\n\nRemember, the decoder output format was made to be machine-readable.  It\nshouldn't be too hard for you to process.  If it comes to it, copy-paste\nthis code and dehackify it for your use case, which hopefully is more\nmanageable than the one that caused us to write this.\n"
													},
													"parameters": [
														{
															"id": 679,
															"name": "result",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Format.Values.Result",
																"id": 282
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/inspect.ts",
													"line": 487,
													"character": 24
												}
											]
										},
										{
											"id": 668,
											"name": "nativizeVariables",
											"kind": 64,
											"kindString": "Function",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 669,
													"name": "nativizeVariables",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "WARNING! Do NOT use this function in real code unless you\nabsolutely have to!  Using it in controlled tests is fine,\nbut do NOT use it in real code if you have any better option!\nSee [[nativize]] for why!"
													},
													"parameters": [
														{
															"id": 670,
															"name": "variables",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 671,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"indexSignature": [
																		{
																			"id": 672,
																			"name": "__index",
																			"kind": 8192,
																			"kindString": "Index signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 673,
																					"name": "name",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"type": {
																						"type": "intrinsic",
																						"name": "string"
																					}
																				}
																			],
																			"type": {
																				"type": "reference",
																				"name": "Format.Values.Result",
																				"id": 282
																			}
																		}
																	],
																	"sources": [
																		{
																			"fileName": "codec/lib/format/utils/inspect.ts",
																			"line": 450,
																			"character": 44
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 674,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"indexSignature": [
																{
																	"id": 675,
																	"name": "__index",
																	"kind": 8192,
																	"kindString": "Index signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 676,
																			"name": "name",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															],
															"sources": [
																{
																	"fileName": "codec/lib/format/utils/inspect.ts",
																	"line": 452,
																	"character": 3
																}
															]
														}
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/inspect.ts",
													"line": 450,
													"character": 33
												}
											]
										},
										{
											"id": 680,
											"name": "nativizeWithTable",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"signatures": [
												{
													"id": 681,
													"name": "nativizeWithTable",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 682,
															"name": "result",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Format.Values.Result",
																"id": 282
															}
														},
														{
															"id": 683,
															"name": "seenSoFar",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/inspect.ts",
													"line": 491,
													"character": 26
												}
											]
										},
										{
											"id": 657,
											"name": "styleHexString",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"signatures": [
												{
													"id": 658,
													"name": "styleHexString",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 659,
															"name": "hex",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 660,
															"name": "options",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "InspectOptions",
																"id": 625
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/inspect.ts",
													"line": 423,
													"character": 23
												}
											]
										}
									],
									"groups": [
										{
											"title": "Classes",
											"kind": 128,
											"children": [
												645,
												636
											]
										},
										{
											"title": "Interfaces",
											"kind": 256,
											"children": [
												625
											]
										},
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												624
											]
										},
										{
											"title": "Functions",
											"kind": 64,
											"children": [
												633,
												665,
												654,
												661,
												677,
												668,
												680,
												657
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/utils/index.ts",
											"line": 10,
											"character": 8
										}
									]
								}
							],
							"groups": [
								{
									"title": "Modules",
									"kind": 2,
									"children": [
										684,
										609,
										623
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/format/index.ts",
									"line": 21,
									"character": 9
								}
							]
						},
						{
							"id": 192,
							"name": "Values",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Contains the types for value and result objects."
							},
							"children": [
								{
									"id": 229,
									"name": "AddressValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An address value"
									},
									"children": [
										{
											"id": 231,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 112,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 230,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 111,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.AddressType",
												"id": 28
											}
										},
										{
											"id": 232,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 113,
													"character": 7
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 233,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 234,
															"name": "asAddress",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"comment": {
																"shortText": "has leading \"0x\" and is checksum-cased"
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 117,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 235,
															"name": "rawAsHex",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "just a hex string, so no checksum"
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 121,
																	"character": 12
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																234,
																235
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/elementary.ts",
															"line": 113,
															"character": 8
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												231,
												230,
												232
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 110,
											"character": 29
										}
									]
								},
								{
									"id": 298,
									"name": "ArrayValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An array value (may contain errors!)"
									},
									"children": [
										{
											"id": 300,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 208,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 301,
											"name": "reference",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"shortText": "will be used in the future for circular vales"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 212,
													"character": 11
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 299,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 207,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.ArrayType",
												"id": 51
											}
										},
										{
											"id": 302,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 213,
													"character": 7
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Result",
													"id": 282
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												300,
												301,
												299,
												302
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 206,
											"character": 27
										}
									]
								},
								{
									"id": 210,
									"name": "BoolValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A boolean value"
									},
									"children": [
										{
											"id": 212,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 66,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 211,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 65,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "BoolType",
												"id": 14
											}
										},
										{
											"id": 213,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 67,
													"character": 7
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 214,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 215,
															"name": "asBoolean",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 68,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																215
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/elementary.ts",
															"line": 67,
															"character": 8
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												212,
												211,
												213
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 64,
											"character": 26
										}
									]
								},
								{
									"id": 223,
									"name": "BytesDynamicValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A bytestring value (dynamic length)"
									},
									"children": [
										{
											"id": 225,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 96,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 224,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 95,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "BytesTypeDynamic",
												"id": 23
											}
										},
										{
											"id": 226,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 97,
													"character": 7
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 227,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 228,
															"name": "asHex",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"comment": {
																"shortText": "hex-formatted, with leading \"0x\""
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 101,
																	"character": 9
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																228
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/elementary.ts",
															"line": 97,
															"character": 8
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												225,
												224,
												226
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 94,
											"character": 34
										}
									]
								},
								{
									"id": 216,
									"name": "BytesStaticValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A bytestring value (static length)"
									},
									"children": [
										{
											"id": 218,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 79,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 217,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 78,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "BytesTypeStatic",
												"id": 18
											}
										},
										{
											"id": 219,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 80,
													"character": 7
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 220,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 221,
															"name": "asHex",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"comment": {
																"shortText": "hex-formatted, with leading \"0x\""
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 84,
																	"character": 9
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 222,
															"name": "rawAsHex",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 85,
																	"character": 12
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																221,
																222
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/elementary.ts",
															"line": 80,
															"character": 8
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												218,
												217,
												219
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 77,
											"character": 33
										}
									]
								},
								{
									"id": 268,
									"name": "ContractValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A contract value; see [[ContractValueInfo]] for more detail"
									},
									"children": [
										{
											"id": 270,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 218,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 269,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 217,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.ContractType",
												"id": 135
											}
										},
										{
											"id": 271,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 219,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"name": "ContractValueInfo",
												"id": 272
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												270,
												269,
												271
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 216,
											"character": 30
										}
									]
								},
								{
									"id": 273,
									"name": "ContractValueInfoKnown",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "This type of ContractValueInfo is used when we can identify the class."
									},
									"children": [
										{
											"id": 275,
											"name": "address",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "formatted as address (leading \"0x\", checksum-cased);\nnote that this is not an AddressResult!"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 243,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 277,
											"name": "class",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 248,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.ContractType",
												"id": 135
											}
										},
										{
											"id": 274,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 238,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "known"
											}
										},
										{
											"id": 276,
											"name": "rawAddress",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"shortText": "this is just a hexstring; no checksum (also may have padding beforehand)"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 247,
													"character": 12
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												275,
												277,
												274,
												276
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 237,
											"character": 39
										}
									]
								},
								{
									"id": 278,
									"name": "ContractValueInfoUnknown",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "This type of ContractValueInfo is used when we can't identify the class."
									},
									"children": [
										{
											"id": 280,
											"name": "address",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "formatted as address (leading \"0x\", checksum-cased);\nnote that this is not an AddressResult!"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 263,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 279,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 258,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "unknown"
											}
										},
										{
											"id": 281,
											"name": "rawAddress",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"shortText": "this is just a hexstring; no checksum (also may have padding beforehand)"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 267,
													"character": 12
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												280,
												279,
												281
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 257,
											"character": 41
										}
									]
								},
								{
									"id": 261,
									"name": "EnumValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An enum value"
									},
									"children": [
										{
											"id": 263,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 201,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 262,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 200,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.EnumType",
												"id": 120
											}
										},
										{
											"id": 264,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 202,
													"character": 7
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 265,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 266,
															"name": "name",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 203,
																	"character": 8
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 267,
															"name": "numericAsBN",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"comment": {
																"shortText": "the numeric value of the enum"
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 207,
																	"character": 15
																}
															],
															"type": {
																"type": "reference",
																"name": "BN"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																266,
																267
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/elementary.ts",
															"line": 202,
															"character": 8
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												263,
												262,
												264
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 199,
											"character": 26
										}
									]
								},
								{
									"id": 247,
									"name": "FixedValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A signed fixed-point value"
									},
									"children": [
										{
											"id": 249,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 173,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 248,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 172,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "FixedType",
												"id": 41
											}
										},
										{
											"id": 250,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 174,
													"character": 7
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 251,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 252,
															"name": "asBig",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 175,
																	"character": 9
																}
															],
															"type": {
																"type": "reference",
																"name": "Big"
															}
														},
														{
															"id": 253,
															"name": "rawAsBig",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 176,
																	"character": 12
																}
															],
															"type": {
																"type": "reference",
																"name": "Big"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																252,
																253
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/elementary.ts",
															"line": 174,
															"character": 8
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												249,
												248,
												250
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 171,
											"character": 27
										}
									]
								},
								{
									"id": 347,
									"name": "FunctionExternalValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An external function pointer value; see [[FunctionExternalValueInfo]] for more detail"
									},
									"children": [
										{
											"id": 349,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 386,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 348,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 385,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.FunctionExternalType",
												"id": 78
											}
										},
										{
											"id": 350,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 387,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"name": "FunctionExternalValueInfo",
												"id": 351
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												349,
												348,
												350
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 384,
											"character": 38
										}
									]
								},
								{
									"id": 357,
									"name": "FunctionExternalValueInfoInvalid",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "This type of FunctionExternalValueInfo is used when we can identify the class but can't locate the function."
									},
									"children": [
										{
											"id": 359,
											"name": "contract",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 426,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "ContractValueInfoKnown",
												"id": 273
											}
										},
										{
											"id": 358,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 425,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "invalid"
											}
										},
										{
											"id": 360,
											"name": "selector",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "formatted as a hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 430,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												359,
												358,
												360
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 424,
											"character": 49
										}
									]
								},
								{
									"id": 352,
									"name": "FunctionExternalValueInfoKnown",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "This type of FunctionExternalValueInfo is used for a known function of a known class."
									},
									"children": [
										{
											"id": 356,
											"name": "abi",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 415,
													"character": 5
												}
											],
											"type": {
												"type": "reference",
												"name": "FunctionAbiEntry",
												"id": 1168
											}
										},
										{
											"id": 354,
											"name": "contract",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 410,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "ContractValueInfoKnown",
												"id": 273
											}
										},
										{
											"id": 353,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 409,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "known"
											}
										},
										{
											"id": 355,
											"name": "selector",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "formatted as a hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 414,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												356,
												354,
												353,
												355
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 408,
											"character": 47
										}
									]
								},
								{
									"id": 361,
									"name": "FunctionExternalValueInfoUnknown",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "This type of FunctionExternalValueInfo is used when we can't even locate the class."
									},
									"children": [
										{
											"id": 363,
											"name": "contract",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 440,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "ContractValueInfoUnknown",
												"id": 278
											}
										},
										{
											"id": 362,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 439,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "unknown"
											}
										},
										{
											"id": 364,
											"name": "selector",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "formatted as a hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 444,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												363,
												362,
												364
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 438,
											"character": 49
										}
									]
								},
								{
									"id": 366,
									"name": "FunctionInternalValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An internal function pointer value; see [[FunctionInternalValueInfo]] for more detail"
									},
									"children": [
										{
											"id": 368,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 467,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 367,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 466,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "FunctionInternalType",
												"id": 72
											}
										},
										{
											"id": 369,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 468,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"name": "FunctionInternalValueInfo",
												"id": 370
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												368,
												367,
												369
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 465,
											"character": 38
										}
									]
								},
								{
									"id": 379,
									"name": "FunctionInternalValueInfoException",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A default value -- internal functions have two default values\ndepending on whether they live in storage or elsewhere.\nIn storage the default value is 0 for both program counters.\nElsewhere they're both nonzero."
									},
									"children": [
										{
											"id": 383,
											"name": "constructorProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 512,
													"character": 27
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 381,
											"name": "context",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 510,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.ContractType",
												"id": 135
											}
										},
										{
											"id": 382,
											"name": "deployedProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 511,
													"character": 24
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 380,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 509,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "exception"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												383,
												381,
												382,
												380
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 508,
											"character": 51
										}
									]
								},
								{
									"id": 371,
									"name": "FunctionInternalValueInfoKnown",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "This type of FunctionInternalValueInfo is used for an actual internal function."
									},
									"children": [
										{
											"id": 375,
											"name": "constructorProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 493,
													"character": 27
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 373,
											"name": "context",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 491,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.ContractType",
												"id": 135
											}
										},
										{
											"id": 377,
											"name": "definedIn",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 495,
													"character": 11
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.ContractType",
												"id": 135
											}
										},
										{
											"id": 374,
											"name": "deployedProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 492,
													"character": 24
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 372,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 490,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "function"
											}
										},
										{
											"id": 378,
											"name": "mutability",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 496,
													"character": 12
												}
											],
											"type": {
												"type": "reference",
												"name": "Common.Mutability"
											}
										},
										{
											"id": 376,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 494,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												375,
												373,
												377,
												374,
												372,
												378,
												376
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 489,
											"character": 47
										}
									]
								},
								{
									"id": 384,
									"name": "FunctionInternalValueInfoUnknown",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "This type is used when decoding internal functions in contexts that don't\nsupport full decoding of such functions.  The high-level decoding interface\ncan currently only sometimes perform such a full decoding.",
										"text": "In contexts where such full decoding isn't supported, you'll get one of\nthese; so you'll still get the program counter values, but further\ninformation will be absent.  Note you'll get this even if really it should\ndecode to an error, because if there's insufficient information to determine\nadditional function information, there's necessarily insufficient\ninformation to determine if it should be an error.\n"
									},
									"children": [
										{
											"id": 388,
											"name": "constructorProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 533,
													"character": 27
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 386,
											"name": "context",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 531,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.ContractType",
												"id": 135
											}
										},
										{
											"id": 387,
											"name": "deployedProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 532,
													"character": 24
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 385,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 530,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "unknown"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												388,
												386,
												387,
												385
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 529,
											"character": 49
										}
									]
								},
								{
									"id": 203,
									"name": "IntValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A signed integer value"
									},
									"children": [
										{
											"id": 205,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 52,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 204,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 51,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "IntType",
												"id": 10
											}
										},
										{
											"id": 206,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 53,
													"character": 7
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 207,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 208,
															"name": "asBN",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 54,
																	"character": 8
																}
															],
															"type": {
																"type": "reference",
																"name": "BN"
															}
														},
														{
															"id": 209,
															"name": "rawAsBN",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 55,
																	"character": 11
																}
															],
															"type": {
																"type": "reference",
																"name": "BN"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																208,
																209
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/elementary.ts",
															"line": 53,
															"character": 8
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												205,
												204,
												206
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 50,
											"character": 25
										}
									]
								},
								{
									"id": 308,
									"name": "KeyValuePair",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 309,
											"name": "key",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 240,
													"character": 5
												}
											],
											"type": {
												"type": "reference",
												"name": "ElementaryValue",
												"id": 194
											}
										},
										{
											"id": 310,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 241,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"name": "Result",
												"id": 282
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												309,
												310
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 239,
											"character": 29
										}
									]
								},
								{
									"id": 329,
									"name": "MagicValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A magic variable's value (may contain errors?)"
									},
									"children": [
										{
											"id": 331,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 313,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 330,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 312,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "MagicType",
												"id": 150
											}
										},
										{
											"id": 332,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 315,
													"character": 7
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 333,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": [
														{
															"id": 334,
															"name": "__index",
															"kind": 8192,
															"kindString": "Index signature",
															"flags": {},
															"parameters": [
																{
																	"id": 335,
																	"name": "field",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "reference",
																"name": "Result",
																"id": 282
															}
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/values.ts",
															"line": 315,
															"character": 8
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												331,
												330,
												332
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 311,
											"character": 27
										}
									]
								},
								{
									"id": 304,
									"name": "MappingValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A mapping value (may contain errors!)"
									},
									"children": [
										{
											"id": 306,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 230,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 305,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 229,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "MappingType",
												"id": 66
											}
										},
										{
											"id": 307,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "order is irrelevant; also note keys must be values, not errors"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 236,
													"character": 7
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "KeyValuePair",
													"id": 308
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												306,
												305,
												307
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 228,
											"character": 29
										}
									]
								},
								{
									"id": 317,
									"name": "NameValuePair",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 318,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 272,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 319,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 273,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"name": "Result",
												"id": 282
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												318,
												319
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 271,
											"character": 30
										}
									]
								},
								{
									"id": 325,
									"name": "OptionallyNamedValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 326,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 295,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 327,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 296,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"name": "Result",
												"id": 282
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												326,
												327
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 294,
											"character": 37
										}
									]
								},
								{
									"id": 236,
									"name": "StringValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A string value; see [[StringValueInfo]] for more detail"
									},
									"children": [
										{
											"id": 238,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 132,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 237,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 131,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "StringType",
												"id": 37
											}
										},
										{
											"id": 239,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 133,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"name": "StringValueInfo",
												"id": 240
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												238,
												237,
												239
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 130,
											"character": 28
										}
									]
								},
								{
									"id": 244,
									"name": "StringValueInfoMalformed",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "This type of StringValueInfo represents a malformed string."
									},
									"children": [
										{
											"id": 246,
											"name": "asHex",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex-formatted, with leading \"0x\""
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 163,
													"character": 7
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 245,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 159,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "malformed"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												246,
												245
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 158,
											"character": 41
										}
									]
								},
								{
									"id": 241,
									"name": "StringValueInfoValid",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "This type of StringValueInfo represents a valid UTF-8 string."
									},
									"children": [
										{
											"id": 243,
											"name": "asString",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 150,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 242,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 149,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "valid"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												243,
												242
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 148,
											"character": 37
										}
									]
								},
								{
									"id": 312,
									"name": "StructValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A struct value (may contain errors!)"
									},
									"children": [
										{
											"id": 314,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 258,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 315,
											"name": "reference",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"shortText": "will be used in the future for circular vales"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 262,
													"character": 11
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 313,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 257,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.StructType",
												"id": 93
											}
										},
										{
											"id": 316,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "these must be stored in order!\nmoreover, any mappings *must* be included, even\nif this is a memory struct (such mappings will be empty)"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 268,
													"character": 7
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "NameValuePair",
													"id": 317
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												314,
												315,
												313,
												316
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 256,
											"character": 28
										}
									]
								},
								{
									"id": 321,
									"name": "TupleValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A tuple value (may contain errors!)"
									},
									"children": [
										{
											"id": 323,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 290,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 322,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 289,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "TupleType",
												"id": 116
											}
										},
										{
											"id": 324,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 291,
													"character": 7
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "OptionallyNamedValue",
													"id": 325
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												323,
												322,
												324
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 288,
											"character": 27
										}
									]
								},
								{
									"id": 338,
									"name": "TypeValueContract",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A contract type's value (see [[TypeValue]])"
									},
									"children": [
										{
											"id": 340,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 345,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 339,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 344,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "TypeTypeContract",
												"id": 158
											}
										},
										{
											"id": 341,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "these must be stored in order!"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 349,
													"character": 7
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "NameValuePair",
													"id": 317
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												340,
												339,
												341
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 343,
											"character": 34
										}
									]
								},
								{
									"id": 342,
									"name": "TypeValueEnum",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An enum type's value (see [[TypeValue]])"
									},
									"children": [
										{
											"id": 344,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 359,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 343,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 358,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "TypeTypeEnum",
												"id": 162
											}
										},
										{
											"id": 345,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "these must be stored in order!"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 363,
													"character": 7
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "EnumValue",
													"id": 261
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												344,
												343,
												345
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 357,
											"character": 30
										}
									]
								},
								{
									"id": 254,
									"name": "UfixedValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An unsigned fixed-point value"
									},
									"children": [
										{
											"id": 256,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 187,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 255,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 186,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "UfixedType",
												"id": 46
											}
										},
										{
											"id": 257,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 188,
													"character": 7
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 258,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 259,
															"name": "asBig",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 189,
																	"character": 9
																}
															],
															"type": {
																"type": "reference",
																"name": "Big"
															}
														},
														{
															"id": 260,
															"name": "rawAsBig",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 190,
																	"character": 12
																}
															],
															"type": {
																"type": "reference",
																"name": "Big"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																259,
																260
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/elementary.ts",
															"line": 188,
															"character": 8
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												256,
												255,
												257
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 185,
											"character": 28
										}
									]
								},
								{
									"id": 196,
									"name": "UintValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An unsigned integer value"
									},
									"children": [
										{
											"id": 198,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 38,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 197,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 37,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "UintType",
												"id": 6
											}
										},
										{
											"id": 199,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 39,
													"character": 7
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 200,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 201,
															"name": "asBN",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 40,
																	"character": 8
																}
															],
															"type": {
																"type": "reference",
																"name": "BN"
															}
														},
														{
															"id": 202,
															"name": "rawAsBN",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 41,
																	"character": 11
																}
															],
															"type": {
																"type": "reference",
																"name": "BN"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																201,
																202
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/elementary.ts",
															"line": 39,
															"character": 8
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												198,
												197,
												199
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 36,
											"character": 26
										}
									]
								},
								{
									"id": 291,
									"name": "AddressResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An address value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 149,
											"character": 25
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "AddressValue",
												"id": 229
											},
											{
												"type": "reference",
												"name": "AddressErrorResult",
												"id": 439
											}
										]
									}
								},
								{
									"id": 297,
									"name": "ArrayResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An array value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 199,
											"character": 23
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ArrayValue",
												"id": 298
											},
											{
												"type": "reference",
												"name": "ArrayErrorResult",
												"id": 498
											}
										]
									}
								},
								{
									"id": 288,
									"name": "BoolResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A boolean value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 124,
											"character": 22
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "BoolValue",
												"id": 210
											},
											{
												"type": "reference",
												"name": "BoolErrorResult",
												"id": 413
											}
										]
									}
								},
								{
									"id": 290,
									"name": "BytesDynamicResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A bytestring value or error (dynamic-length)"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 140,
											"character": 30
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "BytesDynamicValue",
												"id": 223
											},
											{
												"type": "reference",
												"name": "BytesDynamicErrorResult",
												"id": 434
											}
										]
									}
								},
								{
									"id": 285,
									"name": "BytesResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A bytestring value or error (static or dynamic)"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 103,
											"character": 23
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "BytesStaticResult",
												"id": 289
											},
											{
												"type": "reference",
												"name": "BytesDynamicResult",
												"id": 290
											}
										]
									}
								},
								{
									"id": 289,
									"name": "BytesStaticResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A bytestring value or error (static-length)"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 131,
											"character": 29
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "BytesStaticValue",
												"id": 216
											},
											{
												"type": "reference",
												"name": "BytesStaticErrorResult",
												"id": 425
											}
										]
									}
								},
								{
									"id": 195,
									"name": "BytesValue",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A bytestring value (static or dynamic)"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 29,
											"character": 22
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "BytesStaticValue",
												"id": 216
											},
											{
												"type": "reference",
												"name": "BytesDynamicValue",
												"id": 223
											}
										]
									}
								},
								{
									"id": 296,
									"name": "ContractResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A contract value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 188,
											"character": 26
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ContractValue",
												"id": 268
											},
											{
												"type": "reference",
												"name": "ContractErrorResult",
												"id": 489
											}
										]
									}
								},
								{
									"id": 272,
									"name": "ContractValueInfo",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "There are two types -- one for contracts whose class we can identify, and one\nfor when we can't identify the class."
									},
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 228,
											"character": 29
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ContractValueInfoKnown",
												"id": 273
											},
											{
												"type": "reference",
												"name": "ContractValueInfoUnknown",
												"id": 278
											}
										]
									}
								},
								{
									"id": 284,
									"name": "ElementaryResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An elementary value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 86,
											"character": 28
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "UintResult",
												"id": 286
											},
											{
												"type": "reference",
												"name": "IntResult",
												"id": 287
											},
											{
												"type": "reference",
												"name": "BoolResult",
												"id": 288
											},
											{
												"type": "reference",
												"name": "BytesResult",
												"id": 285
											},
											{
												"type": "reference",
												"name": "AddressResult",
												"id": 291
											},
											{
												"type": "reference",
												"name": "StringResult",
												"id": 292
											},
											{
												"type": "reference",
												"name": "FixedResult",
												"id": 293
											},
											{
												"type": "reference",
												"name": "UfixedResult",
												"id": 294
											},
											{
												"type": "reference",
												"name": "EnumResult",
												"id": 295
											},
											{
												"type": "reference",
												"name": "ContractResult",
												"id": 296
											}
										]
									}
								},
								{
									"id": 194,
									"name": "ElementaryValue",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An elementary value"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 12,
											"character": 27
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "UintValue",
												"id": 196
											},
											{
												"type": "reference",
												"name": "IntValue",
												"id": 203
											},
											{
												"type": "reference",
												"name": "BoolValue",
												"id": 210
											},
											{
												"type": "reference",
												"name": "BytesValue",
												"id": 195
											},
											{
												"type": "reference",
												"name": "AddressValue",
												"id": 229
											},
											{
												"type": "reference",
												"name": "StringValue",
												"id": 236
											},
											{
												"type": "reference",
												"name": "FixedValue",
												"id": 247
											},
											{
												"type": "reference",
												"name": "UfixedValue",
												"id": 254
											},
											{
												"type": "reference",
												"name": "EnumValue",
												"id": 261
											},
											{
												"type": "reference",
												"name": "ContractValue",
												"id": 268
											}
										]
									}
								},
								{
									"id": 295,
									"name": "EnumResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An enum value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 181,
											"character": 22
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "EnumValue",
												"id": 261
											},
											{
												"type": "reference",
												"name": "EnumErrorResult",
												"id": 471
											}
										]
									}
								},
								{
									"id": 293,
									"name": "FixedResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A signed fixed-point value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 163,
											"character": 23
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "FixedValue",
												"id": 247
											},
											{
												"type": "reference",
												"name": "FixedErrorResult",
												"id": 453
											}
										]
									}
								},
								{
									"id": 346,
									"name": "FunctionExternalResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An external function pointer value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 375,
											"character": 34
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "FunctionExternalValue",
												"id": 347
											},
											{
												"type": "reference",
												"name": "FunctionExternalErrorResult",
												"id": 528
											}
										]
									}
								},
								{
									"id": 351,
									"name": "FunctionExternalValueInfo",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "External function values come in 3 types:\n1. known function of known class\n2. known class, but can't locate function\n3. can't determine class"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 398,
											"character": 37
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "FunctionExternalValueInfoKnown",
												"id": 352
											},
											{
												"type": "reference",
												"name": "FunctionExternalValueInfoInvalid",
												"id": 357
											},
											{
												"type": "reference",
												"name": "FunctionExternalValueInfoUnknown",
												"id": 361
											}
										]
									}
								},
								{
									"id": 365,
									"name": "FunctionInternalResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An internal function pointer value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 456,
											"character": 34
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "FunctionInternalValue",
												"id": 366
											},
											{
												"type": "reference",
												"name": "FunctionInternalErrorResult",
												"id": 541
											}
										]
									}
								},
								{
									"id": 370,
									"name": "FunctionInternalValueInfo",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Internal functions come in three types:\n1. An actual function,\n2. A default value,\n3. A special value to indicate that decoding internal functions isn't supported in this context."
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 479,
											"character": 37
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "FunctionInternalValueInfoKnown",
												"id": 371
											},
											{
												"type": "reference",
												"name": "FunctionInternalValueInfoException",
												"id": 379
											},
											{
												"type": "reference",
												"name": "FunctionInternalValueInfoUnknown",
												"id": 384
											}
										]
									}
								},
								{
									"id": 287,
									"name": "IntResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A signed integer value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 117,
											"character": 21
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "IntValue",
												"id": 203
											},
											{
												"type": "reference",
												"name": "IntErrorResult",
												"id": 404
											}
										]
									}
								},
								{
									"id": 328,
									"name": "MagicResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A magic variable's value (or error)"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 304,
											"character": 23
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "MagicValue",
												"id": 329
											},
											{
												"type": "reference",
												"name": "MagicErrorResult",
												"id": 518
											}
										]
									}
								},
								{
									"id": 303,
									"name": "MappingResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A mapping value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 221,
											"character": 25
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "MappingValue",
												"id": 304
											},
											{
												"type": "reference",
												"name": "MappingErrorResult",
												"id": 503
											}
										]
									}
								},
								{
									"id": 282,
									"name": "Result",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "This is the overall Result type.  It may encode an actual value or an error."
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 47,
											"character": 18
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ElementaryResult",
												"id": 284
											},
											{
												"type": "reference",
												"name": "ArrayResult",
												"id": 297
											},
											{
												"type": "reference",
												"name": "MappingResult",
												"id": 303
											},
											{
												"type": "reference",
												"name": "StructResult",
												"id": 311
											},
											{
												"type": "reference",
												"name": "TupleResult",
												"id": 320
											},
											{
												"type": "reference",
												"name": "MagicResult",
												"id": 328
											},
											{
												"type": "reference",
												"name": "TypeResult",
												"id": 336
											},
											{
												"type": "reference",
												"name": "FunctionExternalResult",
												"id": 346
											},
											{
												"type": "reference",
												"name": "FunctionInternalResult",
												"id": 365
											}
										]
									}
								},
								{
									"id": 292,
									"name": "StringResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A string value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 156,
											"character": 24
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "StringValue",
												"id": 236
											},
											{
												"type": "reference",
												"name": "StringErrorResult",
												"id": 448
											}
										]
									}
								},
								{
									"id": 240,
									"name": "StringValueInfo",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "These come in two types: valid strings and malformed strings."
									},
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 141,
											"character": 27
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "StringValueInfoValid",
												"id": 241
											},
											{
												"type": "reference",
												"name": "StringValueInfoMalformed",
												"id": 244
											}
										]
									}
								},
								{
									"id": 311,
									"name": "StructResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A struct value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 249,
											"character": 24
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "StructValue",
												"id": 312
											},
											{
												"type": "reference",
												"name": "StructErrorResult",
												"id": 508
											}
										]
									}
								},
								{
									"id": 320,
									"name": "TupleResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A tuple value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 281,
											"character": 23
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "TupleValue",
												"id": 321
											},
											{
												"type": "reference",
												"name": "TupleErrorResult",
												"id": 513
											}
										]
									}
								},
								{
									"id": 336,
									"name": "TypeResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A type's value (or error); currently only allows contract types and\nenum types"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 326,
											"character": 22
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "TypeValue",
												"id": 337
											},
											{
												"type": "reference",
												"name": "TypeErrorResult",
												"id": 523
											}
										]
									}
								},
								{
									"id": 337,
									"name": "TypeValue",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A type's value -- for now, we consider the value of a contract type to\nconsist of the values of its non-inherited state variables in the current\ncontext, and the value of an enum type to be an array of its possible options\n(as Values).  May contain errors."
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 336,
											"character": 21
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "TypeValueContract",
												"id": 338
											},
											{
												"type": "reference",
												"name": "TypeValueEnum",
												"id": 342
											}
										]
									}
								},
								{
									"id": 294,
									"name": "UfixedResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An unsigned fixed-point value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 170,
											"character": 24
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "UfixedValue",
												"id": 254
											},
											{
												"type": "reference",
												"name": "UfixedErrorResult",
												"id": 457
											}
										]
									}
								},
								{
									"id": 286,
									"name": "UintResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An unsigned integer value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 110,
											"character": 22
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "UintValue",
												"id": 196
											},
											{
												"type": "reference",
												"name": "UintErrorResult",
												"id": 395
											}
										]
									}
								},
								{
									"id": 283,
									"name": "Value",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An actual value, not an error (although if a container type it may contain errors!)"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 62,
											"character": 17
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ElementaryValue",
												"id": 194
											},
											{
												"type": "reference",
												"name": "ArrayValue",
												"id": 298
											},
											{
												"type": "reference",
												"name": "MappingValue",
												"id": 304
											},
											{
												"type": "reference",
												"name": "StructValue",
												"id": 312
											},
											{
												"type": "reference",
												"name": "TupleValue",
												"id": 321
											},
											{
												"type": "reference",
												"name": "MagicValue",
												"id": 329
											},
											{
												"type": "reference",
												"name": "TypeValue",
												"id": 337
											},
											{
												"type": "reference",
												"name": "FunctionExternalValue",
												"id": 347
											},
											{
												"type": "reference",
												"name": "FunctionInternalValue",
												"id": 366
											}
										]
									}
								},
								{
									"id": 193,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:format:values\")"
								}
							],
							"groups": [
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										229,
										298,
										210,
										223,
										216,
										268,
										273,
										278,
										261,
										247,
										347,
										357,
										352,
										361,
										366,
										379,
										371,
										384,
										203,
										308,
										329,
										304,
										317,
										325,
										236,
										244,
										241,
										312,
										321,
										338,
										342,
										254,
										196
									],
									"categories": [
										{
											"title": "Elementary types",
											"children": [
												229,
												210,
												223,
												216,
												247,
												203,
												236,
												244,
												241,
												254,
												196
											]
										},
										{
											"title": "Container types",
											"children": [
												298,
												304,
												312,
												321
											]
										},
										{
											"title": "Function types",
											"children": [
												347,
												357,
												352,
												361,
												366,
												379,
												371,
												384
											]
										},
										{
											"title": "Special container types (debugger-only)",
											"children": [
												329,
												338,
												342
											]
										},
										{
											"title": "User-defined elementary types",
											"children": [
												268,
												273,
												278,
												261
											]
										},
										{
											"title": "Other",
											"children": [
												308,
												317,
												325
											]
										}
									]
								},
								{
									"title": "Type aliases",
									"kind": 4194304,
									"children": [
										291,
										297,
										288,
										290,
										285,
										289,
										195,
										296,
										272,
										284,
										194,
										295,
										293,
										346,
										351,
										365,
										370,
										287,
										328,
										303,
										282,
										292,
										240,
										311,
										320,
										336,
										337,
										294,
										286,
										283
									],
									"categories": [
										{
											"title": "General categories",
											"children": [
												284,
												194,
												282,
												283
											]
										},
										{
											"title": "Elementary types",
											"children": [
												291,
												288,
												290,
												285,
												289,
												195,
												293,
												287,
												292,
												240,
												294,
												286
											]
										},
										{
											"title": "Container types",
											"children": [
												297,
												303,
												311,
												320
											]
										},
										{
											"title": "Function types",
											"children": [
												346,
												351,
												365,
												370
											]
										},
										{
											"title": "Special container types (debugger-only)",
											"children": [
												328,
												336,
												337
											]
										},
										{
											"title": "User-defined elementary types",
											"children": [
												296,
												272,
												295
											]
										}
									]
								},
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										193
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/format/index.ts",
									"line": 11,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Modules",
							"kind": 2,
							"children": [
								389,
								3,
								608,
								192
							],
							"categories": [
								{
									"title": "Main Format",
									"children": [
										389,
										3,
										192
									]
								},
								{
									"title": "Other",
									"children": [
										608
									]
								}
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/index.ts",
							"line": 69,
							"character": 8
						}
					]
				},
				{
					"id": 1275,
					"name": "MappingKey",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isProtected": true,
						"isExported": true
					},
					"comment": {
						"shortText": "For encoding mapping keys"
					},
					"children": [
						{
							"id": 1276,
							"name": "Encode",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 1277,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/mapping-key/encode/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:mapping-key:encode\")"
								},
								{
									"id": 1278,
									"name": "encodeMappingKey",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1279,
											"name": "encodeMappingKey",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1280,
													"name": "input",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Values.ElementaryValue",
														"id": 194
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/mapping-key/encode/index.ts",
											"line": 17,
											"character": 32
										}
									]
								},
								{
									"id": 1281,
									"name": "mappingKeyAsHex",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1282,
											"name": "mappingKeyAsHex",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1283,
													"name": "input",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Values.ElementaryValue",
														"id": 194
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/mapping-key/encode/index.ts",
											"line": 35,
											"character": 31
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1277
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1278,
										1281
									],
									"categories": [
										{
											"title": "Encoding (low-level)",
											"children": [
												1278,
												1281
											]
										}
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/mapping-key/index.ts",
									"line": 2,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Modules",
							"kind": 2,
							"children": [
								1276
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/index.ts",
							"line": 333,
							"character": 8
						}
					]
				},
				{
					"id": 1284,
					"name": "Memory",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "For allocation and decoding of memory data"
					},
					"children": [
						{
							"id": 1285,
							"name": "Allocate",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1290,
									"name": "MemoryAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 1291,
											"name": "members",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/memory/allocate/types.ts",
													"line": 16,
													"character": 9
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "MemoryMemberAllocation",
													"id": 1292
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1291
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/memory/allocate/types.ts",
											"line": 15,
											"character": 33
										}
									]
								},
								{
									"id": 1287,
									"name": "MemoryAllocations",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"indexSignature": [
										{
											"id": 1288,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 1289,
													"name": "id",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "MemoryAllocation",
												"id": 1290
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/memory/allocate/types.ts",
											"line": 11,
											"character": 34
										}
									]
								},
								{
									"id": 1292,
									"name": "MemoryMemberAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 1293,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/memory/allocate/types.ts",
													"line": 20,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1295,
											"name": "pointer",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/memory/allocate/types.ts",
													"line": 22,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"name": "MemoryPointer",
												"id": 1906
											}
										},
										{
											"id": 1294,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/memory/allocate/types.ts",
													"line": 21,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Format.Types.Type",
												"id": 5
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1293,
												1295,
												1294
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/memory/allocate/types.ts",
											"line": 19,
											"character": 39
										}
									]
								},
								{
									"id": 1286,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/memory/allocate/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:memory:allocate\")"
								},
								{
									"id": 1299,
									"name": "allocateStruct",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1300,
											"name": "allocateStruct",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1301,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.StructType",
														"id": 93
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "MemoryAllocation",
												"id": 1290
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/memory/allocate/index.ts",
											"line": 28,
											"character": 23
										}
									]
								},
								{
									"id": 1296,
									"name": "getMemoryAllocations",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1297,
											"name": "getMemoryAllocations",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1298,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 166
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "MemoryAllocations",
												"id": 1287
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/memory/allocate/index.ts",
											"line": 14,
											"character": 36
										}
									]
								}
							],
							"groups": [
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										1290,
										1287,
										1292
									]
								},
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1286
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1299,
										1296
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/memory/index.ts",
									"line": 2,
									"character": 8
								}
							]
						},
						{
							"id": 1302,
							"name": "Decode",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 1303,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/memory/decode/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:memory:decode\")"
								},
								{
									"id": 1304,
									"name": "decodeMemory",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1305,
											"name": "decodeMemory",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1306,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													}
												},
												{
													"id": 1307,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "MemoryPointer",
														"id": 1906
													}
												},
												{
													"id": 1308,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 1964
													}
												},
												{
													"id": 1309,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderOptions"
													},
													"defaultValue": " {}"
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 817
													},
													{
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 282
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/memory/decode/index.ts",
											"line": 15,
											"character": 29
										}
									]
								},
								{
									"id": 1310,
									"name": "decodeMemoryReferenceByAddress",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1311,
											"name": "decodeMemoryReferenceByAddress",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1312,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.ReferenceType",
														"id": 165
													}
												},
												{
													"id": 1313,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Pointer.DataPointer",
														"id": 1896
													}
												},
												{
													"id": 1314,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 1964
													}
												},
												{
													"id": 1315,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderOptions"
													},
													"defaultValue": " {}"
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 817
													},
													{
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 282
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/memory/decode/index.ts",
											"line": 45,
											"character": 47
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1303
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1304,
										1310
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/memory/index.ts",
									"line": 5,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Modules",
							"kind": 2,
							"children": [
								1285,
								1302
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/index.ts",
							"line": 340,
							"character": 13
						}
					]
				},
				{
					"id": 1895,
					"name": "Pointer",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1910,
							"name": "CalldataPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1913,
									"name": "length",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 38,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1911,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 36,
											"character": 10
										}
									],
									"type": {
										"type": "stringLiteral",
										"value": "calldata"
									}
								},
								{
									"id": 1912,
									"name": "start",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 37,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1913,
										1911,
										1912
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 35,
									"character": 32
								}
							]
						},
						{
							"id": 1929,
							"name": "CodePointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1932,
									"name": "length",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 67,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1930,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 65,
											"character": 10
										}
									],
									"type": {
										"type": "stringLiteral",
										"value": "code"
									}
								},
								{
									"id": 1931,
									"name": "start",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 66,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1932,
										1930,
										1931
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 64,
									"character": 28
								}
							]
						},
						{
							"id": 1939,
							"name": "ConstantDefinitionPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1941,
									"name": "definition",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 82,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"name": "AstNode",
										"id": 1532
									}
								},
								{
									"id": 1940,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 81,
											"character": 10
										}
									],
									"type": {
										"type": "stringLiteral",
										"value": "definition"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1941,
										1940
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 80,
									"character": 42
								}
							]
						},
						{
							"id": 1918,
							"name": "EventDataPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1921,
									"name": "length",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 50,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1919,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 48,
											"character": 10
										}
									],
									"type": {
										"type": "stringLiteral",
										"value": "eventdata"
									}
								},
								{
									"id": 1920,
									"name": "start",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 49,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1921,
										1919,
										1920
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 47,
									"character": 33
								}
							]
						},
						{
							"id": 1922,
							"name": "EventTopicPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1923,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 54,
											"character": 10
										}
									],
									"type": {
										"type": "stringLiteral",
										"value": "eventtopic"
									}
								},
								{
									"id": 1924,
									"name": "topic",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 55,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1923,
										1924
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 53,
									"character": 34
								}
							]
						},
						{
							"id": 1925,
							"name": "GenericAbiPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1928,
									"name": "length",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 61,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1926,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 59,
											"character": 10
										}
									],
									"type": {
										"type": "stringLiteral",
										"value": "abi"
									}
								},
								{
									"id": 1927,
									"name": "start",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 60,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1928,
										1926,
										1927
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 58,
									"character": 34
								}
							]
						},
						{
							"id": 1906,
							"name": "MemoryPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1909,
									"name": "length",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 32,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1907,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 30,
											"character": 10
										}
									],
									"type": {
										"type": "stringLiteral",
										"value": "memory"
									}
								},
								{
									"id": 1908,
									"name": "start",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 31,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1909,
										1907,
										1908
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 29,
									"character": 30
								}
							]
						},
						{
							"id": 1914,
							"name": "ReturndataPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1917,
									"name": "length",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 44,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1915,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 42,
											"character": 10
										}
									],
									"type": {
										"type": "stringLiteral",
										"value": "returndata"
									}
								},
								{
									"id": 1916,
									"name": "start",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 43,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1917,
										1915,
										1916
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 41,
									"character": 34
								}
							]
						},
						{
							"id": 1942,
							"name": "SpecialPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1943,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 86,
											"character": 10
										}
									],
									"type": {
										"type": "stringLiteral",
										"value": "special"
									}
								},
								{
									"id": 1944,
									"name": "special",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 87,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1943,
										1944
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 85,
									"character": 31
								}
							]
						},
						{
							"id": 1936,
							"name": "StackLiteralPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1938,
									"name": "literal",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 77,
											"character": 9
										}
									],
									"type": {
										"type": "reference",
										"name": "Uint8Array"
									}
								},
								{
									"id": 1937,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 76,
											"character": 10
										}
									],
									"type": {
										"type": "stringLiteral",
										"value": "stackliteral"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1938,
										1937
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 75,
									"character": 36
								}
							]
						},
						{
							"id": 1902,
							"name": "StackPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1904,
									"name": "from",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 25,
											"character": 6
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1903,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 24,
											"character": 10
										}
									],
									"type": {
										"type": "stringLiteral",
										"value": "stack"
									}
								},
								{
									"id": 1905,
									"name": "to",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 26,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1904,
										1903,
										1905
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 23,
									"character": 29
								}
							]
						},
						{
							"id": 1933,
							"name": "StoragePointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1934,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 71,
											"character": 10
										}
									],
									"type": {
										"type": "stringLiteral",
										"value": "storage"
									}
								},
								{
									"id": 1935,
									"name": "range",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 72,
											"character": 7
										}
									],
									"type": {
										"type": "reference",
										"name": "Range",
										"id": 1368
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1934,
										1935
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 70,
									"character": 31
								}
							]
						},
						{
							"id": 1945,
							"name": "UnreadablePointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1946,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 91,
											"character": 10
										}
									],
									"type": {
										"type": "stringLiteral",
										"value": "nowhere"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1946
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 90,
									"character": 34
								}
							]
						},
						{
							"id": 1899,
							"name": "AbiDataPointer",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 16,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "CalldataPointer",
										"id": 1910
									},
									{
										"type": "reference",
										"name": "ReturndataPointer",
										"id": 1914
									},
									{
										"type": "reference",
										"name": "EventDataPointer",
										"id": 1918
									}
								]
							}
						},
						{
							"id": 1898,
							"name": "AbiPointer",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 15,
									"character": 22
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "AbiDataPointer",
										"id": 1899
									},
									{
										"type": "reference",
										"name": "GenericAbiPointer",
										"id": 1925
									}
								]
							}
						},
						{
							"id": 1900,
							"name": "BytesPointer",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 20,
									"character": 24
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "MemoryPointer",
										"id": 1906
									},
									{
										"type": "reference",
										"name": "AbiDataPointer",
										"id": 1899
									},
									{
										"type": "reference",
										"name": "CodePointer",
										"id": 1929
									}
								]
							}
						},
						{
							"id": 1901,
							"name": "CodeFormPointer",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 21,
									"character": 27
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "CodePointer",
										"id": 1929
									},
									{
										"type": "reference",
										"name": "UnreadablePointer",
										"id": 1945
									}
								]
							}
						},
						{
							"id": 1896,
							"name": "DataPointer",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 4,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "StackFormPointer",
										"id": 1897
									},
									{
										"type": "reference",
										"name": "MemoryPointer",
										"id": 1906
									},
									{
										"type": "reference",
										"name": "StoragePointer",
										"id": 1933
									},
									{
										"type": "reference",
										"name": "AbiDataPointer",
										"id": 1899
									},
									{
										"type": "reference",
										"name": "CodeFormPointer",
										"id": 1901
									},
									{
										"type": "reference",
										"name": "ConstantDefinitionPointer",
										"id": 1939
									},
									{
										"type": "reference",
										"name": "SpecialPointer",
										"id": 1942
									},
									{
										"type": "reference",
										"name": "EventTopicPointer",
										"id": 1922
									}
								]
							}
						},
						{
							"id": 1897,
							"name": "StackFormPointer",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 14,
									"character": 28
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "StackPointer",
										"id": 1902
									},
									{
										"type": "reference",
										"name": "StackLiteralPointer",
										"id": 1936
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								1910,
								1929,
								1939,
								1918,
								1922,
								1925,
								1906,
								1914,
								1942,
								1936,
								1902,
								1933,
								1945
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								1899,
								1898,
								1900,
								1901,
								1896,
								1897
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/index.ts",
							"line": 390,
							"character": 8
						}
					]
				},
				{
					"id": 1316,
					"name": "Special",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isProtected": true,
						"isExported": true
					},
					"comment": {
						"shortText": "For decoding of special/magic variables"
					},
					"children": [
						{
							"id": 1317,
							"name": "Decode",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 1318,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/special/decode/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:special:decode\")"
								},
								{
									"id": 1324,
									"name": "decodeMagic",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1325,
											"name": "decodeMagic",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1326,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "MagicType",
														"id": 150
													}
												},
												{
													"id": 1327,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "SpecialPointer",
														"id": 1942
													}
												},
												{
													"id": 1328,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 1964
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 817
													},
													{
														"type": "reference",
														"name": "Format.Values.MagicResult",
														"id": 328
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/special/decode/index.ts",
											"line": 24,
											"character": 28
										}
									]
								},
								{
									"id": 1319,
									"name": "decodeSpecial",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1320,
											"name": "decodeSpecial",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1321,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													}
												},
												{
													"id": 1322,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "SpecialPointer",
														"id": 1942
													}
												},
												{
													"id": 1323,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 1964
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 817
													},
													{
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 282
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/special/decode/index.ts",
											"line": 12,
											"character": 30
										}
									]
								},
								{
									"id": 1332,
									"name": "externalAddressType",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1333,
											"name": "externalAddressType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1334,
													"name": "compiler",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "CompilerVersion",
														"id": 1743
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Format.Types.AddressType",
												"id": 28
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/special/decode/index.ts",
											"line": 147,
											"character": 28
										}
									]
								},
								{
									"id": 1329,
									"name": "senderType",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1330,
											"name": "senderType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1331,
													"name": "compiler",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "CompilerVersion",
														"id": 1743
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Format.Types.AddressType",
												"id": 28
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/special/decode/index.ts",
											"line": 128,
											"character": 19
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1318
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1324,
										1319,
										1332,
										1329
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/special/index.ts",
									"line": 2,
									"character": 8
								}
							]
						},
						{
							"id": 1335,
							"name": "Read",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 1336,
									"name": "readSpecial",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1337,
											"name": "readSpecial",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1338,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "SpecialPointer",
														"id": 1942
													}
												},
												{
													"id": 1339,
													"name": "state",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmState",
														"id": 1948
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/special/read/index.ts",
											"line": 4,
											"character": 27
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1336
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/special/index.ts",
									"line": 10,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Modules",
							"kind": 2,
							"children": [
								1317,
								1335
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/index.ts",
							"line": 346,
							"character": 9
						}
					]
				},
				{
					"id": 1340,
					"name": "Stack",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "For decoding stack variables"
					},
					"children": [
						{
							"id": 1341,
							"name": "Decode",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 1342,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/stack/decode/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:stack:decode\")"
								},
								{
									"id": 1348,
									"name": "decodeLiteral",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1349,
											"name": "decodeLiteral",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1350,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													}
												},
												{
													"id": 1351,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "StackLiteralPointer",
														"id": 1936
													}
												},
												{
													"id": 1352,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 1964
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 817
													},
													{
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 282
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/stack/decode/index.ts",
											"line": 40,
											"character": 30
										}
									]
								},
								{
									"id": 1343,
									"name": "decodeStack",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1344,
											"name": "decodeStack",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1345,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													}
												},
												{
													"id": 1346,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "StackPointer",
														"id": 1902
													}
												},
												{
													"id": 1347,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 1964
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 817
													},
													{
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 282
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/stack/decode/index.ts",
											"line": 17,
											"character": 28
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1342
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1348,
										1343
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/stack/index.ts",
									"line": 2,
									"character": 8
								}
							]
						},
						{
							"id": 1353,
							"name": "Read",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1354,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/stack/read/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:stack:read\")"
								},
								{
									"id": 1355,
									"name": "readStack",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1356,
											"name": "readStack",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1357,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "StackPointer",
														"id": 1902
													}
												},
												{
													"id": 1358,
													"name": "state",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmState",
														"id": 1948
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/stack/read/index.ts",
											"line": 8,
											"character": 25
										}
									]
								},
								{
									"id": 1359,
									"name": "readStackLiteral",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1360,
											"name": "readStackLiteral",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1361,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "StackLiteralPointer",
														"id": 1936
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/stack/read/index.ts",
											"line": 35,
											"character": 32
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1354
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1355,
										1359
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/stack/index.ts",
									"line": 10,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Modules",
							"kind": 2,
							"children": [
								1341,
								1353
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/index.ts",
							"line": 353,
							"character": 10
						}
					]
				},
				{
					"id": 1362,
					"name": "Storage",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "For allocation and decoding of storage variables"
					},
					"children": [
						{
							"id": 1395,
							"name": "Allocate",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1420,
									"name": "UnknownBaseContractIdError",
									"kind": 128,
									"kindString": "Class",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 1425,
											"name": "constructor",
											"kind": 512,
											"kindString": "Constructor",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 1426,
													"name": "new UnknownBaseContractIdError",
													"kind": 16384,
													"kindString": "Constructor signature",
													"flags": {},
													"parameters": [
														{
															"id": 1427,
															"name": "derivedId",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1428,
															"name": "derivedName",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 1429,
															"name": "derivedKind",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 1430,
															"name": "baseId",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "UnknownBaseContractIdError",
														"id": 1420
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/index.ts",
													"line": 40,
													"character": 24
												}
											]
										},
										{
											"id": 1424,
											"name": "baseId",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isPublic": true,
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/index.ts",
													"line": 40,
													"character": 15
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1421,
											"name": "derivedId",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isPublic": true,
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/index.ts",
													"line": 37,
													"character": 18
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1423,
											"name": "derivedKind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isPublic": true,
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/index.ts",
													"line": 39,
													"character": 20
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1422,
											"name": "derivedName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isPublic": true,
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/index.ts",
													"line": 38,
													"character": 20
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1432,
											"name": "message",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
													"line": 974,
													"character": 11
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "Error.message"
											}
										},
										{
											"id": 1431,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
													"line": 973,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "Error.name"
											}
										},
										{
											"id": 1433,
											"name": "stack",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
													"line": 975,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"overwrites": {
												"type": "reference",
												"name": "Error.stack"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "Error.stack"
											}
										},
										{
											"id": 1434,
											"name": "Error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isStatic": true,
												"isExported": true
											},
											"sources": [
												{
													"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
													"line": 984,
													"character": 17
												}
											],
											"type": {
												"type": "reference",
												"name": "ErrorConstructor"
											}
										}
									],
									"groups": [
										{
											"title": "Constructors",
											"kind": 512,
											"children": [
												1425
											]
										},
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1424,
												1421,
												1423,
												1422,
												1432,
												1431,
												1433,
												1434
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/index.ts",
											"line": 36,
											"character": 39
										}
									],
									"extendedTypes": [
										{
											"type": "reference",
											"name": "Error"
										}
									]
								},
								{
									"id": 1438,
									"name": "DefinitionPair",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1440,
											"name": "definedIn",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/index.ts",
													"line": 64,
													"character": 11
												}
											],
											"type": {
												"type": "reference",
												"name": "AstNode",
												"id": 1532
											}
										},
										{
											"id": 1439,
											"name": "definition",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/index.ts",
													"line": 63,
													"character": 12
												}
											],
											"type": {
												"type": "reference",
												"name": "AstNode",
												"id": 1532
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1440,
												1439
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/index.ts",
											"line": 62,
											"character": 24
										}
									]
								},
								{
									"id": 1407,
									"name": "StateAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 1408,
											"name": "members",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 35,
													"character": 9
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "StateVariableAllocation",
													"id": 1415
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1408
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/types.ts",
											"line": 34,
											"character": 32
										}
									]
								},
								{
									"id": 1409,
									"name": "StateAllocations",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"indexSignature": [
										{
											"id": 1410,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 1411,
													"name": "compilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1412,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": [
														{
															"id": 1413,
															"name": "__index",
															"kind": 8192,
															"kindString": "Index signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1414,
																	"name": "id",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																}
															],
															"type": {
																"type": "reference",
																"name": "StateAllocation",
																"id": 1407
															}
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/storage/allocate/types.ts",
															"line": 27,
															"character": 26
														}
													]
												}
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/types.ts",
											"line": 26,
											"character": 33
										}
									]
								},
								{
									"id": 1415,
									"name": "StateVariableAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 1418,
											"name": "compilationId",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 42,
													"character": 15
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1417,
											"name": "definedIn",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 41,
													"character": 11
												}
											],
											"type": {
												"type": "reference",
												"name": "AstNode",
												"id": 1532
											}
										},
										{
											"id": 1416,
											"name": "definition",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 40,
													"character": 12
												}
											],
											"type": {
												"type": "reference",
												"name": "AstNode",
												"id": 1532
											}
										},
										{
											"id": 1419,
											"name": "pointer",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 43,
													"character": 9
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "StoragePointer",
														"id": 1933
													},
													{
														"type": "reference",
														"name": "ConstantDefinitionPointer",
														"id": 1939
													},
													{
														"type": "reference",
														"name": "Pointer.CodeFormPointer",
														"id": 1901
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1418,
												1417,
												1416,
												1419
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/types.ts",
											"line": 39,
											"character": 40
										}
									]
								},
								{
									"id": 1397,
									"name": "StorageAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 1399,
											"name": "members",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 14,
													"character": 9
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "StorageMemberAllocation",
													"id": 1403
												}
											}
										},
										{
											"id": 1398,
											"name": "size",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 13,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Storage.StorageLength",
												"id": 1363
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1399,
												1398
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/types.ts",
											"line": 12,
											"character": 34
										}
									]
								},
								{
									"id": 1435,
									"name": "StorageAllocationInfo",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1437,
											"name": "allocations",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/index.ts",
													"line": 59,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"name": "StorageAllocations",
												"id": 1400
											}
										},
										{
											"id": 1436,
											"name": "size",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/index.ts",
													"line": 58,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Storage.StorageLength",
												"id": 1363
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1437,
												1436
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/index.ts",
											"line": 57,
											"character": 31
										}
									]
								},
								{
									"id": 1400,
									"name": "StorageAllocations",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"indexSignature": [
										{
											"id": 1401,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 1402,
													"name": "id",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "StorageAllocation",
												"id": 1397
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/types.ts",
											"line": 7,
											"character": 35
										}
									]
								},
								{
									"id": 1403,
									"name": "StorageMemberAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 1404,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 19,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1406,
											"name": "pointer",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 21,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"name": "StoragePointer",
												"id": 1933
											}
										},
										{
											"id": 1405,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 20,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Format.Types.Type",
												"id": 5
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1404,
												1406,
												1405
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/types.ts",
											"line": 18,
											"character": 40
										}
									]
								},
								{
									"id": 1396,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:storage:allocate\")"
								},
								{
									"id": 1468,
									"name": "allocateContractState",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1469,
											"name": "allocateContractState",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1470,
													"name": "contract",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1532
													}
												},
												{
													"id": 1471,
													"name": "immutableReferences",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "ImmutableReferences"
													}
												},
												{
													"id": 1472,
													"name": "compilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 1473,
													"name": "compiler",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "CompilerVersion",
														"id": 1743
													}
												},
												{
													"id": 1474,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNodes",
														"id": 1577
													}
												},
												{
													"id": 1475,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 166
													}
												},
												{
													"id": 1476,
													"name": "storageAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "StorageAllocations",
														"id": 1400
													}
												},
												{
													"id": 1477,
													"name": "existingAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "StateAllocations",
														"id": 1409
													},
													"defaultValue": " {}"
												}
											],
											"type": {
												"type": "reference",
												"name": "StateAllocations",
												"id": 1409
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/index.ts",
											"line": 276,
											"character": 30
										}
									]
								},
								{
									"id": 1459,
									"name": "allocateMembers",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1460,
											"name": "allocateMembers",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1461,
													"name": "parentId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 1462,
													"name": "members",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "NameTypePair",
															"id": 94
														}
													}
												},
												{
													"id": 1463,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 166
													}
												},
												{
													"id": 1464,
													"name": "existingAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "StorageAllocations",
														"id": 1400
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "StorageAllocations",
												"id": 1400
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/index.ts",
											"line": 146,
											"character": 24
										}
									]
								},
								{
									"id": 1454,
									"name": "allocateStruct",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1455,
											"name": "allocateStruct",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1456,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.StructType",
														"id": 93
													}
												},
												{
													"id": 1457,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 166
													}
												},
												{
													"id": 1458,
													"name": "existingAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "StorageAllocations",
														"id": 1400
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "StorageAllocations",
												"id": 1400
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/index.ts",
											"line": 131,
											"character": 23
										}
									]
								},
								{
									"id": 1444,
									"name": "getStateAllocations",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1445,
											"name": "getStateAllocations",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "This function gets allocations for the state variables of the contracts;\nthis is distinct from getStorageAllocations, which gets allocations for\nstorage structs.",
												"text": "While mostly state variables are kept in storage, constant ones are not.\nAnd immutable ones, once those are introduced, will be kept in code!\n(But those don't exist yet so this function doesn't handle them yet.)\n"
											},
											"parameters": [
												{
													"id": 1446,
													"name": "contracts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "ContractAllocationInfo",
															"id": 979
														}
													}
												},
												{
													"id": 1447,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 1448,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"indexSignature": [
																{
																	"id": 1449,
																	"name": "__index",
																	"kind": 8192,
																	"kindString": "Index signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 1450,
																			"name": "compilationId",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	],
																	"type": {
																		"type": "reference",
																		"name": "AstNodes",
																		"id": 1577
																	}
																}
															],
															"sources": [
																{
																	"fileName": "codec/lib/storage/allocate/index.ts",
																	"line": 100,
																	"character": 24
																}
															]
														}
													}
												},
												{
													"id": 1451,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 166
													}
												},
												{
													"id": 1452,
													"name": "storageAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "StorageAllocations",
														"id": 1400
													}
												},
												{
													"id": 1453,
													"name": "existingAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "StateAllocations",
														"id": 1409
													},
													"defaultValue": " {}"
												}
											],
											"type": {
												"type": "reference",
												"name": "StateAllocations",
												"id": 1409
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/index.ts",
											"line": 98,
											"character": 35
										}
									]
								},
								{
									"id": 1465,
									"name": "getStateVariables",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1466,
											"name": "getStateVariables",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1467,
													"name": "contractNode",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1532
													}
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "AstNode",
													"id": 1532
												}
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/index.ts",
											"line": 268,
											"character": 26
										}
									]
								},
								{
									"id": 1441,
									"name": "getStorageAllocations",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1442,
											"name": "getStorageAllocations",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1443,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 166
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "StorageAllocations",
												"id": 1400
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/index.ts",
											"line": 69,
											"character": 37
										}
									]
								},
								{
									"id": 1478,
									"name": "storageSize",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1479,
											"name": "storageSize",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1480,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													}
												},
												{
													"id": 1481,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 166
													}
												},
												{
													"id": 1482,
													"name": "allocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "StorageAllocations",
														"id": 1400
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Storage.StorageLength",
												"id": 1363
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/index.ts",
											"line": 439,
											"character": 27
										}
									]
								},
								{
									"id": 1483,
									"name": "storageSizeAndAllocate",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1484,
											"name": "storageSizeAndAllocate",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1485,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													}
												},
												{
													"id": 1486,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 166
													}
												},
												{
													"id": 1487,
													"name": "existingAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "StorageAllocations",
														"id": 1400
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "StorageAllocationInfo",
												"id": 1435
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/index.ts",
											"line": 447,
											"character": 31
										}
									]
								}
							],
							"groups": [
								{
									"title": "Classes",
									"kind": 128,
									"children": [
										1420
									]
								},
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										1438,
										1407,
										1409,
										1415,
										1397,
										1435,
										1400,
										1403
									]
								},
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1396
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1468,
										1459,
										1454,
										1444,
										1465,
										1441,
										1478,
										1483
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/storage/index.ts",
									"line": 7,
									"character": 8
								}
							]
						},
						{
							"id": 1488,
							"name": "Decode",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 1489,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/storage/decode/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:storage:decode\")"
								},
								{
									"id": 1490,
									"name": "decodeStorage",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1491,
											"name": "decodeStorage",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1492,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													}
												},
												{
													"id": 1493,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "StoragePointer",
														"id": 1933
													}
												},
												{
													"id": 1494,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 1964
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 817
													},
													{
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 282
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/decode/index.ts",
											"line": 18,
											"character": 30
										}
									]
								},
								{
									"id": 1500,
									"name": "decodeStorageReference",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1501,
											"name": "decodeStorageReference",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1502,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.ReferenceType",
														"id": 165
													}
												},
												{
													"id": 1503,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "StoragePointer",
														"id": 1933
													}
												},
												{
													"id": 1504,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 1964
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 817
													},
													{
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 282
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/decode/index.ts",
											"line": 90,
											"character": 39
										}
									]
								},
								{
									"id": 1495,
									"name": "decodeStorageReferenceByAddress",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1496,
											"name": "decodeStorageReferenceByAddress",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1497,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.ReferenceType",
														"id": 165
													}
												},
												{
													"id": 1498,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Pointer.DataPointer",
														"id": 1896
													}
												},
												{
													"id": 1499,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 1964
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 817
													},
													{
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 282
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/decode/index.ts",
											"line": 33,
											"character": 48
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1489
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1490,
										1500,
										1495
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/storage/index.ts",
									"line": 10,
									"character": 8
								}
							]
						},
						{
							"id": 1505,
							"name": "Read",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 1506,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/storage/read/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:storage:read\")"
								},
								{
									"id": 1507,
									"name": "readSlot",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1508,
											"name": "readSlot",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1509,
													"name": "storage",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "WordMapping",
														"id": 1961
													}
												},
												{
													"id": 1510,
													"name": "slot",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Slot",
														"id": 1375
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 817
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/read/index.ts",
											"line": 13,
											"character": 25
										}
									]
								},
								{
									"id": 1511,
									"name": "readStorage",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1512,
											"name": "readStorage",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1513,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "StoragePointer",
														"id": 1933
													}
												},
												{
													"id": 1514,
													"name": "state",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmState",
														"id": 1948
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 817
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/read/index.ts",
											"line": 37,
											"character": 28
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1506
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1507,
										1511
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/storage/index.ts",
									"line": 18,
									"character": 8
								}
							]
						},
						{
							"id": 1380,
							"name": "Utils",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1381,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/storage/utils.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:storage:utils\")"
								},
								{
									"id": 1391,
									"name": "equalSlots",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1392,
											"name": "equalSlots",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1393,
													"name": "slot1",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Slot",
																"id": 1375
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												},
												{
													"id": 1394,
													"name": "slot2",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Slot",
																"id": 1375
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/utils.ts",
											"line": 50,
											"character": 26
										}
									]
								},
								{
									"id": 1382,
									"name": "isWordsLength",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1383,
											"name": "isWordsLength",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1384,
													"name": "size",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "StorageLength",
														"id": 1363
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/utils.ts",
											"line": 9,
											"character": 29
										}
									]
								},
								{
									"id": 1388,
									"name": "slotAddress",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1389,
											"name": "slotAddress",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "convert a slot to a word corresponding to actual storage address",
												"text": "if `slot` is an array, return hash of array values.\nif `slot` array is nested, recurse on sub-arrays\n"
											},
											"parameters": [
												{
													"id": 1390,
													"name": "slot",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "number or possibly-nested array of numbers\n"
													},
													"type": {
														"type": "reference",
														"name": "Slot",
														"id": 1375
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "BN"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/utils.ts",
											"line": 30,
											"character": 27
										}
									]
								},
								{
									"id": 1385,
									"name": "storageLengthToBytes",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1386,
											"name": "storageLengthToBytes",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1387,
													"name": "size",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "StorageLength",
														"id": 1363
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/utils.ts",
											"line": 13,
											"character": 36
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1381
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1391,
										1382,
										1388,
										1385
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/storage/index.ts",
									"line": 4,
									"character": 8
								}
							]
						},
						{
							"id": 1368,
							"name": "Range",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1369,
									"name": "from",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/storage/types.ts",
											"line": 8,
											"character": 6
										}
									],
									"type": {
										"type": "reference",
										"name": "StoragePosition",
										"id": 1372
									}
								},
								{
									"id": 1371,
									"name": "length",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/storage/types.ts",
											"line": 10,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1370,
									"name": "to",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/storage/types.ts",
											"line": 9,
											"character": 4
										}
									],
									"type": {
										"type": "reference",
										"name": "StoragePosition",
										"id": 1372
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1369,
										1371,
										1370
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/storage/types.ts",
									"line": 7,
									"character": 22
								}
							]
						},
						{
							"id": 1375,
							"name": "Slot",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1378,
									"name": "hashPath",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/storage/types.ts",
											"line": 21,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1376,
									"name": "key",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/storage/types.ts",
											"line": 19,
											"character": 5
										}
									],
									"type": {
										"type": "reference",
										"name": "Elementary.ElementaryValue"
									}
								},
								{
									"id": 1379,
									"name": "offset",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/storage/types.ts",
											"line": 22,
											"character": 8
										}
									],
									"type": {
										"type": "reference",
										"name": "BN"
									}
								},
								{
									"id": 1377,
									"name": "path",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/storage/types.ts",
											"line": 20,
											"character": 6
										}
									],
									"type": {
										"type": "reference",
										"name": "Slot",
										"id": 1375
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1378,
										1376,
										1379,
										1377
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/storage/types.ts",
									"line": 18,
									"character": 21
								}
							]
						},
						{
							"id": 1372,
							"name": "StoragePosition",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1374,
									"name": "index",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/storage/types.ts",
											"line": 15,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1373,
									"name": "slot",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/storage/types.ts",
											"line": 14,
											"character": 6
										}
									],
									"type": {
										"type": "reference",
										"name": "Slot",
										"id": 1375
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1374,
										1373
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/storage/types.ts",
									"line": 13,
									"character": 32
								}
							]
						},
						{
							"id": 1363,
							"name": "StorageLength",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "codec/lib/storage/types.ts",
									"line": 5,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reflection",
										"declaration": {
											"id": 1364,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 1365,
													"name": "bytes",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/storage/types.ts",
															"line": 5,
															"character": 35
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														1365
													]
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/storage/types.ts",
													"line": 5,
													"character": 27
												}
											]
										}
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1366,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 1367,
													"name": "words",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/storage/types.ts",
															"line": 5,
															"character": 55
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														1367
													]
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/storage/types.ts",
													"line": 5,
													"character": 47
												}
											]
										}
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Modules",
							"kind": 2,
							"children": [
								1395,
								1488,
								1505,
								1380
							]
						},
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								1368,
								1375,
								1372
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								1363
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/index.ts",
							"line": 359,
							"character": 8
						}
					]
				},
				{
					"id": 1256,
					"name": "Topic",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isProtected": true,
						"isExported": true
					},
					"comment": {
						"shortText": "For decoding of event topics"
					},
					"children": [
						{
							"id": 1257,
							"name": "Decode",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 1258,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/topic/decode/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:topic:decode\")"
								},
								{
									"id": 1259,
									"name": "decodeTopic",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1260,
											"name": "decodeTopic",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1261,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													}
												},
												{
													"id": 1262,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EventTopicPointer",
														"id": 1922
													}
												},
												{
													"id": 1263,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 1964
													}
												},
												{
													"id": 1264,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderOptions"
													},
													"defaultValue": " {}"
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 817
													},
													{
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 282
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/topic/decode/index.ts",
											"line": 12,
											"character": 28
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1258
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1259
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/topic/index.ts",
									"line": 2,
									"character": 8
								}
							]
						},
						{
							"id": 1265,
							"name": "Encode",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 1266,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/topic/encode/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:topic:encode\")"
								},
								{
									"id": 1267,
									"name": "encodeTopic",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1268,
											"name": "encodeTopic",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Encodes for event topics (indexed parameters).\nWarning: This function is not fully implemented yet!"
											},
											"parameters": [
												{
													"id": 1269,
													"name": "input",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 282
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Uint8Array"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/topic/encode/index.ts",
											"line": 14,
											"character": 27
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1266
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1267
									],
									"categories": [
										{
											"title": "Encoding (low-level)",
											"children": [
												1267
											]
										}
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/topic/index.ts",
									"line": 10,
									"character": 8
								}
							]
						},
						{
							"id": 1270,
							"name": "Read",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 1271,
									"name": "readTopic",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1272,
											"name": "readTopic",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1273,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EventTopicPointer",
														"id": 1922
													}
												},
												{
													"id": 1274,
													"name": "state",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmState",
														"id": 1948
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/topic/read/index.ts",
											"line": 4,
											"character": 25
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1271
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/topic/index.ts",
									"line": 18,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Modules",
							"kind": 2,
							"children": [
								1257,
								1265,
								1270
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/index.ts",
							"line": 315,
							"character": 10
						}
					]
				},
				{
					"id": 828,
					"name": "UnknownUserDefinedTypeError",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This error indicates that the decoder was unable to locate a user-defined\ntype (struct, enum, or contract type) via its ID.  Unfortunately, we can't\nalways avoid this at the moment; we're hoping to make this more robust in\nthe future with Truffle DB.  In the meantime, it is at least worth noting that\nyou should not encounter this error if your entire project was written in\nSolidity and all compiled at once.  Sorry."
					},
					"children": [
						{
							"id": 831,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 832,
									"name": "new UnknownUserDefinedTypeError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 833,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 834,
											"name": "typeString",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "UnknownUserDefinedTypeError",
										"id": 828
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/common/types.ts",
									"line": 30,
									"character": 20
								}
							]
						},
						{
							"id": 830,
							"name": "id",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "codec/lib/common/types.ts",
									"line": 30,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 836,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 974,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.message"
							}
						},
						{
							"id": 835,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 973,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.name"
							}
						},
						{
							"id": 837,
							"name": "stack",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 975,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"overwrites": {
								"type": "reference",
								"name": "Error.stack"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.stack"
							}
						},
						{
							"id": 829,
							"name": "typeString",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "codec/lib/common/types.ts",
									"line": 29,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 838,
							"name": "Error",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 984,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "ErrorConstructor"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								831
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								830,
								836,
								835,
								837,
								829,
								838
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/common/types.ts",
							"line": 28,
							"character": 40
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 813,
					"name": "AbiArgument",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents a decoded argument passed to a transaction or event,\nor returned from a call."
					},
					"children": [
						{
							"id": 815,
							"name": "indexed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether this is an indexed paramter.  Only included for event parameters."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 458,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 814,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The name of the parameter.  Excluded if the parameter is nameless."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 454,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 816,
							"name": "value",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The decoded value of the argument.  Note that this is a [[Format.Values.Result|Format.Values.Result]], so it\nmay contain errors (although event decodings should typically not contain errors;\nsee the [[DecodedLog]] documentation for why)."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 464,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "Format.Values.Result",
								"id": 282
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								815,
								814,
								816
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 450,
							"character": 28
						}
					]
				},
				{
					"id": 776,
					"name": "AnonymousDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents a decoding of a log as an anonymous event."
					},
					"children": [
						{
							"id": 781,
							"name": "abi",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The ABI entry for the event.  You can use this to extract the name, for\ninstance."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 271,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "EventAbiEntry",
								"id": 1189
							}
						},
						{
							"id": 780,
							"name": "arguments",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The list of decoded arguments to the event."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 266,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "AbiArgument",
									"id": 813
								}
							}
						},
						{
							"id": 778,
							"name": "class",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The class of the contract that (according to this decoding) emitted the event, as a Format.Types.ContractType.\nThis may be a library!  When a library emits an event, the EVM records it as the calling contract\nhaving emitted the event, but we decode it as if the library emitted the event, for clarity.\n(The address of the contract the EVM thinks emitted the event can of course be found in the original log.)"
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 257,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "Format.Types.ContractType",
								"id": 135
							}
						},
						{
							"id": 782,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 276,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "DecodingMode",
								"id": 736
							}
						},
						{
							"id": 779,
							"name": "definedIn",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The class of the contract that (according to this decoding) defined the event, as a Format.Types.ContractType.\nMay be omitted if we can't determine it, as may occur in ABI mode."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 262,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "Format.Types.ContractType",
								"id": 135
							}
						},
						{
							"id": 777,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is an AnonymousDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 250,
									"character": 6
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "anonymous"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								781,
								780,
								778,
								782,
								779,
								777
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 246,
							"character": 34
						}
					]
				},
				{
					"id": 788,
					"name": "BytecodeDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents a decoding of the return data as bytecode for a known\nclass returned from a constructor.",
						"text": "NOTE: In the future, this type will also contain information about\nany linked libraries the contract being constructed uses.  However,\nthis is not implemented at present.\n"
					},
					"children": [
						{
							"id": 794,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "If the contract created was a library, and was compiled with Solidity\n0.4.20 or later, this field will be included, which gives the address of\nthe created contract (checksummed).  This field will not be included\notherwise!"
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 411,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 793,
							"name": "bytecode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The bytecode of the contract that was created."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 404,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 792,
							"name": "class",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The class of contract being constructed, as a Format.Types.ContractType."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 400,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "Format.Types.ContractType",
								"id": 135
							}
						},
						{
							"id": 791,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 396,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "DecodingMode",
								"id": 736
							}
						},
						{
							"id": 789,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is a BytecodeDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 387,
									"character": 6
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "bytecode"
							}
						},
						{
							"id": 790,
							"name": "status",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Indicates that this kind of decoding indicates a successful return."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 391,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "true"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								794,
								793,
								792,
								791,
								789,
								790
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 383,
							"character": 33
						}
					]
				},
				{
					"id": 821,
					"name": "CodeRequest",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A request for code"
					},
					"children": [
						{
							"id": 823,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 489,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 822,
							"name": "type",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 488,
									"character": 6
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "code"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								823,
								822
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 487,
							"character": 28
						}
					]
				},
				{
					"id": 747,
					"name": "ConstructorDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents a transaction decoding for a constructor call.\nIt's even possible to decode a library constructor call with this.",
						"text": "NOTE: In the future, this type will also contain information about\nany linked libraries the contract being constructed uses.  However,\nthis is not implemented at present.\n"
					},
					"children": [
						{
							"id": 751,
							"name": "abi",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The ABI entry for the constructor that was called.  Note that although\ndefault constructors don't actually get an ABI entry, we still return an\nABI entry regardless in that case."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 111,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "ConstructorAbiEntry",
								"id": 1176
							}
						},
						{
							"id": 750,
							"name": "arguments",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The list of decoded arguments to the constructor.  This will be empty for a\ndefault constructor."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 105,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "AbiArgument",
									"id": 813
								}
							}
						},
						{
							"id": 752,
							"name": "bytecode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The bytecode of the constructor that was called."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 115,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 749,
							"name": "class",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The class of contract being constructed, as a Format.Types.ContractType."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 100,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "Format.Types.ContractType",
								"id": 135
							}
						},
						{
							"id": 753,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 120,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "DecodingMode",
								"id": 736
							}
						},
						{
							"id": 748,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is a ConstructorDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 96,
									"character": 6
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "constructor"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								751,
								750,
								752,
								749,
								753,
								748
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 92,
							"character": 36
						}
					]
				},
				{
					"id": 809,
					"name": "EmptyFailureDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents a decoding of empty return data from an unsuccessful\ncall, a reversion with no message."
					},
					"children": [
						{
							"id": 812,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 343,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "DecodingMode",
								"id": 736
							}
						},
						{
							"id": 810,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is an EmptyFailureDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 334,
									"character": 6
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "failure"
							}
						},
						{
							"id": 811,
							"name": "status",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Indicates that this kind of decoding indicates an unsuccessful return."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 338,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "false"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								812,
								810,
								811
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 330,
							"character": 37
						}
					]
				},
				{
					"id": 768,
					"name": "EventDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents a decoding of a log as a non-anonymous event."
					},
					"children": [
						{
							"id": 773,
							"name": "abi",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The ABI entry for the event.  You can use this to extract the name, for\ninstance."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 229,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "EventAbiEntry",
								"id": 1189
							}
						},
						{
							"id": 772,
							"name": "arguments",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The list of decoded arguments to the event."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 224,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "AbiArgument",
									"id": 813
								}
							}
						},
						{
							"id": 770,
							"name": "class",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The class of the contract that (according to this decoding) emitted the event, as a Format.Types.ContractType.\nThis may be a library!  When a library emits an event, the EVM records it as the calling contract\nhaving emitted the event, but we decode it as if the library emitted the event, for clarity.\n(The address of the contract the EVM thinks emitted the event can of course be found in the original log.)"
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 215,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "Format.Types.ContractType",
								"id": 135
							}
						},
						{
							"id": 775,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 238,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "DecodingMode",
								"id": 736
							}
						},
						{
							"id": 771,
							"name": "definedIn",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The class of the contract that (according to this decoding) defined the event, as a Format.Types.ContractType.\nMay be omitted if we can't determine it, as may occur in ABI mode."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 220,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "Format.Types.ContractType",
								"id": 135
							}
						},
						{
							"id": 769,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is an EventDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 208,
									"character": 6
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "event"
							}
						},
						{
							"id": 774,
							"name": "selector",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The selector for the event, as a hexadecimal string."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 233,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								773,
								772,
								770,
								775,
								771,
								769,
								774
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 204,
							"character": 30
						}
					]
				},
				{
					"id": 740,
					"name": "FunctionDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents a transaction decoding for an ordinary function call to a known class;\nnot a constructor call, not a fallback call."
					},
					"children": [
						{
							"id": 744,
							"name": "abi",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The ABI entry for the function that was called.  You can use this\nto extract the name, for instance."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 70,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "FunctionAbiEntry",
								"id": 1168
							}
						},
						{
							"id": 743,
							"name": "arguments",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The list of decoded arguments to the function."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 65,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "AbiArgument",
									"id": 813
								}
							}
						},
						{
							"id": 742,
							"name": "class",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The class of contract that was called, as a Format.Types.ContractType."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 61,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "Format.Types.ContractType",
								"id": 135
							}
						},
						{
							"id": 746,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "DecodingMode",
								"id": 736
							}
						},
						{
							"id": 741,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is a FunctionDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 57,
									"character": 6
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "function"
							}
						},
						{
							"id": 745,
							"name": "selector",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The selector for the function that was called, as a hexadecimal string."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 74,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								744,
								743,
								742,
								746,
								741,
								745
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 53,
							"character": 33
						}
					]
				},
				{
					"id": 754,
					"name": "MessageDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents a decoding for a call to a known class that does not appear\nto be a function call, i.e., one that will result in the fallback function being invoked\nif there is one."
					},
					"children": [
						{
							"id": 757,
							"name": "abi",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The ABI entry for the contract's fallback or receive function that would\nhandle this message; will be null if there is none."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 143,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "FallbackAbiEntry",
										"id": 1181
									},
									{
										"type": "reference",
										"name": "ReceiveAbiEntry",
										"id": 1185
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 756,
							"name": "class",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The class of contract that was called, as a Format.Types.ContractType."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 138,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "Format.Types.ContractType",
								"id": 135
							}
						},
						{
							"id": 758,
							"name": "data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The data that was sent to the contract."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 147,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 759,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 152,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "DecodingMode",
								"id": 736
							}
						},
						{
							"id": 755,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is a MessageDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 134,
									"character": 6
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "message"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								757,
								756,
								758,
								759,
								755
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 130,
							"character": 32
						}
					]
				},
				{
					"id": 783,
					"name": "ReturnDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents a decoding of the return data as a collection of\nreturn values from a successful call."
					},
					"children": [
						{
							"id": 786,
							"name": "arguments",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The list of decoded return values from the function."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 296,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "AbiArgument",
									"id": 813
								}
							}
						},
						{
							"id": 787,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 301,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "DecodingMode",
								"id": 736
							}
						},
						{
							"id": 784,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is a ReturnDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 288,
									"character": 6
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "return"
							}
						},
						{
							"id": 785,
							"name": "status",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Indicates that this kind of decoding indicates a successful return."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 292,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "true"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								786,
								787,
								784,
								785
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 284,
							"character": 31
						}
					]
				},
				{
					"id": 804,
					"name": "RevertMessageDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents a decoding of the return data as a revert message.\nFor forward-compatibility, we do not assume that the revert message is\na string."
					},
					"children": [
						{
							"id": 807,
							"name": "arguments",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The list of decoded arguments passed to revert(); currently, this will\nalways contain just a single string."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 365,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "AbiArgument",
									"id": 813
								}
							}
						},
						{
							"id": 808,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 370,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "DecodingMode",
								"id": 736
							}
						},
						{
							"id": 805,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is a RevertMessageDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 356,
									"character": 6
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "revert"
							}
						},
						{
							"id": 806,
							"name": "status",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Indicates that this kind of decoding indicates an unsuccessful return."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 360,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "false"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								807,
								808,
								805,
								806
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 352,
							"character": 38
						}
					]
				},
				{
					"id": 800,
					"name": "SelfDestructDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents a decoding of unexpectedly empty return data from a\nsuccessful call, indicating that the contract self-destructed."
					},
					"children": [
						{
							"id": 803,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 322,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "DecodingMode",
								"id": 736
							}
						},
						{
							"id": 801,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is an SelfDestructDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 313,
									"character": 6
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "selfdestruct"
							}
						},
						{
							"id": 802,
							"name": "status",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Indicates that this kind of decoding indicates a successful return."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 317,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "true"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								803,
								801,
								802
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 309,
							"character": 37
						}
					]
				},
				{
					"id": 818,
					"name": "StorageRequest",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A request for storage"
					},
					"children": [
						{
							"id": 820,
							"name": "slot",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 479,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"name": "BN"
							}
						},
						{
							"id": 819,
							"name": "type",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 478,
									"character": 6
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "storage"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								820,
								819
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 477,
							"character": 31
						}
					]
				},
				{
					"id": 795,
					"name": "UnknownBytecodeDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents a decoding of the return data as bytecode for an\nunknown class returned from a constructor.",
						"text": "NOTE: In the future, this type will also contain information about\nany linked libraries the contract being constructed uses.  However,\nthis is not implemented at present.\n"
					},
					"children": [
						{
							"id": 799,
							"name": "bytecode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The bytecode of the contract that was created."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 441,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 798,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 437,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "DecodingMode",
								"id": 736
							}
						},
						{
							"id": 796,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is an UnknownBytecodeDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 428,
									"character": 6
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "unknownbytecode"
							}
						},
						{
							"id": 797,
							"name": "status",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Indicates that this kind of decoding indicates a successful return."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 432,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "true"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								799,
								798,
								796,
								797
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 424,
							"character": 40
						}
					]
				},
				{
					"id": 760,
					"name": "UnknownCallDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents a function call to an unknown class.  In this case,\nit's simply not possible to return much information."
					},
					"children": [
						{
							"id": 763,
							"name": "data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The data that was sent to the contract."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 174,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 762,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 170,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "DecodingMode",
								"id": 736
							}
						},
						{
							"id": 761,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is an UnknownDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 165,
									"character": 6
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "unknown"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								763,
								762,
								761
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 161,
							"character": 36
						}
					]
				},
				{
					"id": 764,
					"name": "UnknownCreationDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents a contract creation for an unknown class. In this case,\nit's simply not possible to return much information."
					},
					"children": [
						{
							"id": 767,
							"name": "bytecode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The bytecode of the contract creation."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 196,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 766,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 192,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "DecodingMode",
								"id": 736
							}
						},
						{
							"id": 765,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is an UnknownCreationDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 187,
									"character": 6
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "create"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								767,
								766,
								765
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 183,
							"character": 40
						}
					]
				},
				{
					"id": 737,
					"name": "CalldataDecoding",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A type representing a transaction (calldata) decoding.  As you can see, these come in five types,\neach of which is documented separately."
					},
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 11,
							"character": 28
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "FunctionDecoding",
								"id": 740
							},
							{
								"type": "reference",
								"name": "ConstructorDecoding",
								"id": 747
							},
							{
								"type": "reference",
								"name": "MessageDecoding",
								"id": 754
							},
							{
								"type": "reference",
								"name": "UnknownCallDecoding",
								"id": 760
							},
							{
								"type": "reference",
								"name": "UnknownCreationDecoding",
								"id": 764
							}
						]
					}
				},
				{
					"id": 827,
					"name": "ContractKind",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {},
					"sources": [
						{
							"fileName": "codec/lib/common/types.ts",
							"line": 16,
							"character": 24
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "stringLiteral",
								"value": "contract"
							},
							{
								"type": "stringLiteral",
								"value": "library"
							},
							{
								"type": "stringLiteral",
								"value": "interface"
							}
						]
					}
				},
				{
					"id": 817,
					"name": "DecoderRequest",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {},
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 470,
							"character": 26
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "StorageRequest",
								"id": 818
							},
							{
								"type": "reference",
								"name": "CodeRequest",
								"id": 821
							}
						]
					}
				},
				{
					"id": 736,
					"name": "DecodingMode",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This is a type for recording what decoding mode a given decoding was produced in.  There are two\ndecoding modes, full mode and ABI mode.  In ABI mode, decoding is done purely based on the ABI JSON.\nFull mode, by contrast, additionally uses AST information to produce a more informative decoding.\nFor more on full mode and ABI mode, see the notes on [Decoding modes](../#decoding-modes)."
					},
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 46,
							"character": 24
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "stringLiteral",
								"value": "full"
							},
							{
								"type": "stringLiteral",
								"value": "abi"
							}
						]
					}
				},
				{
					"id": 824,
					"name": "Location",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {},
					"sources": [
						{
							"fileName": "codec/lib/common/types.ts",
							"line": 4,
							"character": 20
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "stringLiteral",
								"value": "storage"
							},
							{
								"type": "stringLiteral",
								"value": "memory"
							},
							{
								"type": "stringLiteral",
								"value": "calldata"
							}
						]
					}
				},
				{
					"id": 738,
					"name": "LogDecoding",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A type representing a log (event) decoding.  As you can see, these come in two types, each of which\nis documented separately."
					},
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 23,
							"character": 23
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "EventDecoding",
								"id": 768
							},
							{
								"type": "reference",
								"name": "AnonymousDecoding",
								"id": 776
							}
						]
					}
				},
				{
					"id": 826,
					"name": "Mutability",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {},
					"sources": [
						{
							"fileName": "codec/lib/common/types.ts",
							"line": 12,
							"character": 22
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "stringLiteral",
								"value": "pure"
							},
							{
								"type": "stringLiteral",
								"value": "view"
							},
							{
								"type": "stringLiteral",
								"value": "nonpayable"
							},
							{
								"type": "stringLiteral",
								"value": "payable"
							}
						]
					}
				},
				{
					"id": 739,
					"name": "ReturndataDecoding",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A type representing a returndata (return value or revert message) decoding.\nAs you can see, these come in six types, each of which is documented\nseparately."
					},
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 31,
							"character": 30
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "ReturnDecoding",
								"id": 783
							},
							{
								"type": "reference",
								"name": "BytecodeDecoding",
								"id": 788
							},
							{
								"type": "reference",
								"name": "UnknownBytecodeDecoding",
								"id": 795
							},
							{
								"type": "reference",
								"name": "SelfDestructDecoding",
								"id": 800
							},
							{
								"type": "reference",
								"name": "RevertMessageDecoding",
								"id": 804
							},
							{
								"type": "reference",
								"name": "EmptyFailureDecoding",
								"id": 809
							}
						]
					}
				},
				{
					"id": 825,
					"name": "Visibility",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {},
					"sources": [
						{
							"fileName": "codec/lib/common/types.ts",
							"line": 8,
							"character": 22
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "stringLiteral",
								"value": "internal"
							},
							{
								"type": "stringLiteral",
								"value": "external"
							}
						]
					}
				},
				{
					"id": 839,
					"name": "abifyCalldataDecoding",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 840,
							"name": "abifyCalldataDecoding",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"parameters": [
								{
									"id": 841,
									"name": "decoding",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "CalldataDecoding",
										"id": 737
									}
								},
								{
									"id": 842,
									"name": "userDefinedTypes",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "TypesById",
										"id": 166
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "CalldataDecoding",
								"id": 737
							}
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/abify.ts",
							"line": 305,
							"character": 37
						}
					]
				},
				{
					"id": 843,
					"name": "abifyLogDecoding",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 844,
							"name": "abifyLogDecoding",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"parameters": [
								{
									"id": 845,
									"name": "decoding",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "LogDecoding",
										"id": 738
									}
								},
								{
									"id": 846,
									"name": "userDefinedTypes",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "TypesById",
										"id": 166
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "LogDecoding",
								"id": 738
							}
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/abify.ts",
							"line": 332,
							"character": 32
						}
					]
				},
				{
					"id": 704,
					"name": "decodeCalldata",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 705,
							"name": "decodeCalldata",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"parameters": [
								{
									"id": 706,
									"name": "info",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "EvmInfo",
										"id": 1964
									}
								},
								{
									"id": 707,
									"name": "isConstructor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Generator",
								"typeArguments": [
									{
										"type": "reference",
										"name": "DecoderRequest",
										"id": 817
									},
									{
										"type": "reference",
										"name": "CalldataDecoding",
										"id": 737
									},
									{
										"type": "reference",
										"name": "Uint8Array"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/core.ts",
							"line": 51,
							"character": 31
						}
					]
				},
				{
					"id": 699,
					"name": "decodeEvent",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 700,
							"name": "decodeEvent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"parameters": [
								{
									"id": 701,
									"name": "info",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "EvmInfo",
										"id": 1964
									}
								},
								{
									"id": 702,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 703,
									"name": "targetName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Generator",
								"typeArguments": [
									{
										"type": "reference",
										"name": "DecoderRequest",
										"id": 817
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "LogDecoding",
											"id": 738
										}
									},
									{
										"type": "reference",
										"name": "Uint8Array"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/core.ts",
							"line": 205,
							"character": 28
						}
					]
				},
				{
					"id": 708,
					"name": "decodeReturndata",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 709,
							"name": "decodeReturndata",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "If there are multiple possibilities, they're always returned in\nthe order: return, revert, failure, empty, bytecode, unknownbytecode"
							},
							"parameters": [
								{
									"id": 710,
									"name": "info",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "EvmInfo",
										"id": 1964
									}
								},
								{
									"id": 711,
									"name": "successAllocation",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ReturndataAllocation",
												"id": 971
											},
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									}
								},
								{
									"id": 712,
									"name": "status",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Generator",
								"typeArguments": [
									{
										"type": "reference",
										"name": "DecoderRequest",
										"id": 817
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "ReturndataDecoding",
											"id": 739
										}
									},
									{
										"type": "reference",
										"name": "Uint8Array"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/core.ts",
							"line": 488,
							"character": 33
						}
					]
				},
				{
					"id": 713,
					"name": "decodeRevert",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 714,
							"name": "decodeRevert",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Decodes the return data from a failed call.",
								"returns": "An array of possible decodings.  At the moment it's\n  impossible for there to be more than one.  (If the call didn't actually\n  fail, or failed in a nonstandard way, you may get no decodings at all, though!)\n\n  Decodings can either be decodings of revert messages, or decodings\n  indicating that there was no revert message.  If somehow both were to be\n  possible, they'd go in that order, although as mentioned, there (at least\n  currently) isn't any way for that to occur."
							},
							"parameters": [
								{
									"id": 715,
									"name": "returndata",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The returned data, as a Uint8Array."
									},
									"type": {
										"type": "reference",
										"name": "Uint8Array"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "ReturndataDecoding",
									"id": 739
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/core.ts",
							"line": 713,
							"character": 28
						}
					]
				},
				{
					"id": 693,
					"name": "decodeVariable",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 694,
							"name": "decodeVariable",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"parameters": [
								{
									"id": 695,
									"name": "definition",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "AstNode",
										"id": 1532
									}
								},
								{
									"id": 696,
									"name": "pointer",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Pointer.DataPointer",
										"id": 1896
									}
								},
								{
									"id": 697,
									"name": "info",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "EvmInfo",
										"id": 1964
									}
								},
								{
									"id": 698,
									"name": "compilationId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Generator",
								"typeArguments": [
									{
										"type": "reference",
										"name": "DecoderRequest",
										"id": 817
									},
									{
										"type": "reference",
										"name": "Format.Values.Result",
										"id": 282
									},
									{
										"type": "reference",
										"name": "Uint8Array"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/core.ts",
							"line": 33,
							"character": 31
						}
					]
				}
			],
			"groups": [
				{
					"title": "Modules",
					"kind": 2,
					"children": [
						957,
						1528,
						1515,
						847,
						929,
						1752,
						1742,
						1798,
						1862,
						1947,
						2,
						1275,
						1284,
						1895,
						1316,
						1340,
						1362,
						1256
					],
					"categories": [
						{
							"title": "Data",
							"children": [
								2
							]
						},
						{
							"title": "ABI data location",
							"children": [
								957,
								1256
							]
						},
						{
							"title": "Solidity data location",
							"children": [
								1515,
								1275,
								1284,
								1316,
								1340,
								1362
							]
						},
						{
							"title": "Other",
							"children": [
								1528,
								847,
								929,
								1752,
								1742,
								1798,
								1862,
								1947,
								1895
							]
						}
					]
				},
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						828
					],
					"categories": [
						{
							"title": "Errors",
							"children": [
								828
							]
						}
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						813,
						776,
						788,
						821,
						747,
						809,
						768,
						740,
						754,
						783,
						804,
						800,
						818,
						795,
						760,
						764
					],
					"categories": [
						{
							"title": "Output",
							"children": [
								813,
								776,
								788,
								747,
								809,
								768,
								740,
								754,
								783,
								804,
								800,
								795,
								760,
								764
							]
						},
						{
							"title": "Requests",
							"children": [
								821,
								818
							]
						}
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						737,
						827,
						817,
						736,
						824,
						738,
						826,
						739,
						825
					],
					"categories": [
						{
							"title": "Output",
							"children": [
								737,
								736,
								738,
								739
							]
						},
						{
							"title": "Enumerations",
							"children": [
								827,
								824,
								826,
								825
							]
						},
						{
							"title": "Requests",
							"children": [
								817
							]
						}
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						839,
						843,
						704,
						699,
						708,
						713,
						693
					],
					"categories": [
						{
							"title": "Decoding",
							"children": [
								704,
								699,
								708,
								693
							]
						},
						{
							"title": "Decoding convenience",
							"children": [
								713
							]
						},
						{
							"title": "ABIfication",
							"children": [
								839,
								843
							]
						}
					]
				}
			],
			"sources": [
				{
					"fileName": "codec/lib/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 2020,
			"name": "@truffle/decoder",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/home/sniffnoy/truffle/truffle/packages/decoder/lib/index.ts",
			"comment": {
				"shortText": "# Truffle Decoder",
				"text": "This module provides an interface for decoding contract state, transaction\ncalldata, events, and return values and revert strings.  It's an interface to\nthe same low-level decoding functionality that Truffle Debugger uses.  However,\nit has additional functionality that the debugger does not need, and the\ndebugger has additional functionality that this decoder does not need.\n\nThe interface is split into three classes: The wire decoder, the contract\ndecoder, and the contract instance decoder.  The wire decoder is associated to\nthe project as a whole and decodes transaction calldata and events.  The\ncontract decoder is associated to a specific contract class.  It has all the\ncapabilities of the wire decoder, but in addition it acts as a factory for\ncontract instance decoders.  The contract instance decoder is associated to a\nspecific contract instance; it too has all the capabilities of the wire decoder,\nbut it can also decode the state variables for the specific instance.  (In\naddition, in the case that the contract does not include a `deployedBytecode`\nfield in its artifact, which can hinder decoding certain things, the contract\ninstance decoder can sometimes work around this where the other decoders\ncannot.)\n\nThis documentation describes the current state of the decoder, but you should\nexpect to see improvements soon.\n\n## Usage\n\n### Initialization\n\nCreate a decoder with one of the various constructor functions.\n\nFor a wire decoder, use the [[forProject|`forProject`]] function.\n\nFor a contract decoder, use the [[forArtifact|`forArtifact`]] or\n[[forContract|`forContract`]] function.\n\nFor a contract instance decoder, use one of the following:\n[[forDeployedArtifact|`forDeployedArtifact`]]\n[[forDeployedContract|`forDeployedContract`]]\n[[forArtifactAt|`forArtifactAt`]]\n[[forContractAt|`forContractAt`]]\n[[forContractInstance|`forContractInstance`]]\n[[forAddress|`forAddress`]]\n\nSee the documentation of these functions for details, or below for usage\nexamples.\n\nAll of these functions take a final argument in which information about the\nproject is specified; currently only a few methods for specifying project\ninformation are allowed, but more are planned.\n\nOne can also spawn decoders from other decoders by supplying additional\ninformation.  See the documentation for the individual decoder classes for a\nmethod listing.\n\n### Decoder methods\n\nSee the documentation for the individual decoder classes for a method listing.\n\n### Output format information\n\nThe decoder outputs lossless, machine-readable [[Format.Values.Result]] objects\ncontaining individual decoded values. See the [[Format|format documentation]]\nfor an overview and complete module listing.\n\n### Decoding modes, abification, and caveats\n\nThe decoder runs in either of two modes: full mode or ABI mode. Full mode\nrequires some additional constraints but returns substantially more detailed\ninformation. Please see the notes on [decoding modes](../#decoding-modes) for\nmore about this distinction.\n\nSee also the notes about [decoding state variables](../#additional-notes-on-decoding-state-variables) for additional\ncaveats about what may or may not be fully decodable.\n\n### Basic usage examples\n\n#### Decoding a log with the wire decoder\n\nThis usage example is for a project with two contracts, `Contract1` and\n`Contract2`.\n\n```typescript\nimport { forProject } from \"@truffle/decoder\";\nconst contract1 = artifacts.require(\"Contract1\");\nconst contract2 = artifacts.require(\"Contract2\");\nconst provider = web3.currentProvider;\nconst decoder = await Decoder.forProject(provider, [contract1, contract2]);\nconst decodings = await decoder.decodeLog(log);\n```\n\nThe usage of [[WireDecoder.decodeTransaction|decodeTransaction]] is similar.\n\nFor getting already-decoded logs meeting appropriate conditions, see\n[[WireDecoder.events]].\n\n#### Decoding state variables with the contract instance decoder\n\nThis usage example is for decoding the state variables of a contract `Contract`\nin a project that also contains a contract `OtherContract`.\n\n```typescript\nimport { forContract } from \"@truffle/decoder\";\nconst contract = artifacts.require(\"Contract\");\nconst otherContract = artifacts.require(\"OtherContract\");\nconst decoder = await Decoder.forContract(contract, [otherContract]);\nconst instanceDecoder = await decoder.forInstance();\nconst variables = await instanceDecoder.variables();\n```\n\nIn this example, we use the deployed version of `Contract`.  If we wanted an\ninstance at a different address, we could pass the address to `forInstance`.\n\nIn addition, rather than using `forContract` and then `forInstance`, we could\nalso use [[forDeployedContract|`forContractInstance`]] to perform both of these\nin one step.  If we wanted to do this with a specified address, we could use\n[[forContractAt|`forContractAt`]].\n\nYet another way would be:\n```typescript\nimport { forContractInstance } from \"@truffle/decoder\";\nconst contract = artifacts.require(\"Contract\");\nconst otherContract = artifacts.require(\"OtherContract\");\nconst deployedContract = await contract.deployed();\nconst instanceDecoder = await Decoder.forContractInstance(deployedContract, [otherContract]);\nconst variables = await instanceDecoder.variables();\n```\n\nThese examples are not exhaustive.\n\nOne can find more advanced decoding examples with\n[[ContractInstanceDecoder.variable|`variable`]] and\n[[ContractInstanceDecoder.watchMappingKey|`watchMappingKey`]] at the\ndocumentation for these individual functions.\n"
			},
			"children": [
				{
					"id": 2305,
					"name": "ContractAllocationFailedError",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This error indicates that something went wrong while attempting to determine the location\nof this contract's state variables.  This error will be thrown if you attempt to use\ndecoding functions after something went wrong during setup.  Unfortunately, we can't\nalways avoid this at the moment; we're hoping to make this more robust in the future\nwith Truffle DB.  In the meantime, it is at least worth noting that you should not encounter\nthis error if your entire project was written in Solidity and all compiled at once.  Sorry."
					},
					"children": [
						{
							"id": 2309,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2310,
									"name": "new ContractAllocationFailedError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 2311,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 2312,
											"name": "contractName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2313,
											"name": "compilationId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ContractAllocationFailedError",
										"id": 2305
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 63,
									"character": 31
								}
							]
						},
						{
							"id": 2308,
							"name": "compilationId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 63,
									"character": 22
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2307,
							"name": "contractName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 62,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2306,
							"name": "id",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 61,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2315,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 974,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.message"
							}
						},
						{
							"id": 2314,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 973,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.name"
							}
						},
						{
							"id": 2316,
							"name": "stack",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 975,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"overwrites": {
								"type": "reference",
								"name": "Error.stack"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.stack"
							}
						},
						{
							"id": 2317,
							"name": "Error",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 984,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "ErrorConstructor"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2309
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2308,
								2307,
								2306,
								2315,
								2314,
								2316,
								2317
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/errors.ts",
							"line": 60,
							"character": 42
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 2279,
					"name": "ContractBeingDecodedHasNoNodeError",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This error indicates that the contract you are attempting to decode does not have AST\ninformation associated with it, or that the decoder cannot find it.  This error will\nbe thrown if you attempt to use functions that require AST information with such a contract."
					},
					"children": [
						{
							"id": 2282,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2283,
									"name": "new ContractBeingDecodedHasNoNodeError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 2284,
											"name": "contractName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2285,
											"name": "compilationId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ContractBeingDecodedHasNoNodeError",
										"id": 2279
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 9,
									"character": 31
								}
							]
						},
						{
							"id": 2281,
							"name": "compilationId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 9,
									"character": 22
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2280,
							"name": "contractName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 8,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2287,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 974,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.message"
							}
						},
						{
							"id": 2286,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 973,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.name"
							}
						},
						{
							"id": 2288,
							"name": "stack",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 975,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"overwrites": {
								"type": "reference",
								"name": "Error.stack"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.stack"
							}
						},
						{
							"id": 2289,
							"name": "Error",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 984,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "ErrorConstructor"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2282
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2281,
								2280,
								2287,
								2286,
								2288,
								2289
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/errors.ts",
							"line": 7,
							"character": 47
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 2021,
					"name": "ContractDecoder",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The ContractDecoder class.  Spawns the [[ContractInstanceDecoder]] class.\nAlso, decodes transactions and logs.  See below for a method listing."
					},
					"children": [
						{
							"id": 2038,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"signatures": [
								{
									"id": 2039,
									"name": "new ContractDecoder",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2040,
											"name": "contract",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Contract",
												"id": 1765
											}
										},
										{
											"id": 2041,
											"name": "compilation",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Compilation",
												"id": 1753
											}
										},
										{
											"id": 2042,
											"name": "wireDecoder",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "WireDecoder",
												"id": 2188
											}
										},
										{
											"id": 2043,
											"name": "artifact",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "Artifact"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ContractDecoder",
										"id": 2021
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 737,
									"character": 35
								}
							]
						},
						{
							"id": 2030,
							"name": "allocations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 730,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "AllocationInfo",
								"id": 1972
							}
						},
						{
							"id": 2026,
							"name": "artifact",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 725,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"name": "Artifact"
							}
						},
						{
							"id": 2024,
							"name": "compilation",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 723,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "Compilation",
								"id": 1753
							}
						},
						{
							"id": 2029,
							"name": "contextHash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 728,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2023,
							"name": "contexts",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 721,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"name": "DecoderContexts",
								"id": 1801
							}
						},
						{
							"id": 2025,
							"name": "contract",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 724,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"name": "Contract",
								"id": 1765
							}
						},
						{
							"id": 2028,
							"name": "contractNetwork",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 727,
									"character": 25
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2027,
							"name": "contractNode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 726,
									"character": 22
								}
							],
							"type": {
								"type": "reference",
								"name": "AstNode",
								"id": 1532
							}
						},
						{
							"id": 2031,
							"name": "noBytecodeAllocations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 731,
									"character": 31
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 2032,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": [
										{
											"id": 2033,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 2034,
													"name": "selector",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "CalldataAndReturndataAllocation",
												"id": 976
											}
										}
									],
									"sources": [
										{
											"fileName": "decoder/lib/decoders.ts",
											"line": 731,
											"character": 32
										}
									]
								}
							}
						},
						{
							"id": 2036,
							"name": "stateVariableReferences",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 735,
									"character": 33
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "StateVariableAllocation",
									"id": 1415
								}
							}
						},
						{
							"id": 2035,
							"name": "userDefinedTypes",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 734,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"name": "TypesById",
								"id": 166
							}
						},
						{
							"id": 2022,
							"name": "web3",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 719,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "Web3"
							}
						},
						{
							"id": 2037,
							"name": "wireDecoder",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 737,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "WireDecoder",
								"id": 2188
							}
						},
						{
							"id": 2046,
							"name": "context",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"getSignature": [
								{
									"id": 2047,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "DecoderContext",
										"id": 1807
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 837,
									"character": 21
								}
							]
						},
						{
							"id": 2079,
							"name": "abifyCalldataDecoding",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2080,
									"name": "abifyCalldataDecoding",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "See [[WireDecoder.abifyCalldataDecoding]]."
									},
									"parameters": [
										{
											"id": 2081,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "CalldataDecoding",
												"id": 737
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CalldataDecoding",
										"id": 737
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1005,
									"character": 30
								}
							]
						},
						{
							"id": 2082,
							"name": "abifyLogDecoding",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2083,
									"name": "abifyLogDecoding",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "See [[WireDecoder.abifyLogDecoding]]."
									},
									"parameters": [
										{
											"id": 2084,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "LogDecoding",
												"id": 738
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "LogDecoding",
										"id": 738
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1012,
									"character": 25
								}
							]
						},
						{
							"id": 2073,
							"name": "decodeLog",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2074,
									"name": "decodeLog",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "See [[WireDecoder.decodeLog]]."
									},
									"parameters": [
										{
											"id": 2075,
											"name": "log",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The log to be decoded.\n"
											},
											"type": {
												"type": "reference",
												"name": "Log",
												"id": 2383
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "LogDecoding",
													"id": 738
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 986,
									"character": 24
								}
							]
						},
						{
							"id": 2048,
							"name": "decodeReturnValue",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2049,
									"name": "decodeReturnValue",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Decodes the return value of a call.  Return values can be ambiguous, so this so\nthis function returns an array of [[ReturndataDecoding|ReturndataDecodings]].\n\nNote that return values are decoded in strict mode, so none of the decodings should\ncontain errors; if a decoding would contain an error, instead it is simply excluded from the\nlist of possible decodings.\n\nIf there are multiple possible decodings, they will always be listed in the following order:\n1. The decoded return value from a successful call.\n2. The decoded revert message from a call that reverted with a message.\n3. A decoding indicating that the call reverted with no message.\n4. A decoding indicating that the call self-destructed.\n\nYou can check the kind and field to distinguish between these.\n\nIf no possible decodings are found, the returned array of decodings will be empty.\n\nNote that different decodings may use different decoding modes.\n\nDecoding creation calls with this method is not supported.  If you simply\nwant to decode a revert message from an arbitrary call that you know\nfailed, you may also want to see the [[decodeRevert]] function in\n`@truffle/codec`.\n"
									},
									"parameters": [
										{
											"id": 2050,
											"name": "abi",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The abi entry for the function call whose return value is being decoded."
											},
											"type": {
												"type": "reference",
												"name": "FunctionAbiEntry",
												"id": 1168
											}
										},
										{
											"id": 2051,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The data to be decoded, as a hex string (beginning with \"0x\")."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2052,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Additional options, such as the block the call occurred in.\n  See [[ReturnOptions]] for more information.\n"
											},
											"type": {
												"type": "reference",
												"name": "ReturnOptions",
												"id": 2368
											},
											"defaultValue": " {}"
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "ReturndataDecoding",
													"id": 739
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 873,
									"character": 32
								}
							]
						},
						{
							"id": 2053,
							"name": "decodeReturnValueWithAdditionalContexts",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2054,
									"name": "decodeReturnValueWithAdditionalContexts",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2055,
											"name": "abi",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FunctionAbiEntry",
												"id": 1168
											}
										},
										{
											"id": 2056,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2057,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReturnOptions",
												"id": 2368
											},
											"defaultValue": " {}"
										},
										{
											"id": 2058,
											"name": "additionalContexts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "DecoderContexts",
												"id": 1801
											},
											"defaultValue": " {}"
										},
										{
											"id": 2059,
											"name": "contextHash",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": " this.contextHash"
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "ReturndataDecoding",
													"id": 739
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 888,
									"character": 54
								}
							]
						},
						{
							"id": 2070,
							"name": "decodeTransaction",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2071,
									"name": "decodeTransaction",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "See [[WireDecoder.decodeTransaction]]."
									},
									"parameters": [
										{
											"id": 2072,
											"name": "transaction",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The transaction to be decoded.\n"
											},
											"type": {
												"type": "reference",
												"name": "Transaction",
												"id": 2371
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "CalldataDecoding",
												"id": 737
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 974,
									"character": 32
								}
							]
						},
						{
							"id": 2076,
							"name": "events",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2077,
									"name": "events",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "See [[WireDecoder.events]]."
									},
									"parameters": [
										{
											"id": 2078,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Used to determine what events to fetch; see the documentation on the EventOptions type for more.\n"
											},
											"type": {
												"type": "reference",
												"name": "EventOptions",
												"id": 2363
											},
											"defaultValue": " {}"
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "DecodedLog",
													"id": 2353
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 996,
									"character": 21
								}
							]
						},
						{
							"id": 2060,
							"name": "forInstance",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2061,
									"name": "forInstance",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Constructs a contract instance decoder for a given instance of this contract."
									},
									"parameters": [
										{
											"id": 2062,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The address of the contract instance decode.  If left out, it will be autodetected.\n  If an invalid address is provided, this method will throw an exception.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "ContractInstanceDecoder",
												"id": 2093
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 949,
									"character": 26
								}
							]
						},
						{
							"id": 2085,
							"name": "getAllocations",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2086,
									"name": "getAllocations",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "AllocationInfo",
										"id": 1972
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1021,
									"character": 23
								}
							]
						},
						{
							"id": 2063,
							"name": "getCode",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2064,
									"name": "getCode",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2065,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2066,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "DecoderTypes.RegularizedBlockSpecifier"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Uint8Array"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 955,
									"character": 23
								}
							]
						},
						{
							"id": 2091,
							"name": "getContractInfo",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2092,
									"name": "getContractInfo",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "ContractInfo"
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1042,
									"character": 24
								}
							]
						},
						{
							"id": 2087,
							"name": "getStateVariableReferences",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2088,
									"name": "getStateVariableReferences",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "StateVariableAllocation",
											"id": 1415
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1028,
									"character": 35
								}
							]
						},
						{
							"id": 2089,
							"name": "getWireDecoder",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2090,
									"name": "getWireDecoder",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "WireDecoder",
										"id": 2188
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1035,
									"character": 23
								}
							]
						},
						{
							"id": 2044,
							"name": "init",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2045,
									"name": "init",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 833,
									"character": 19
								}
							]
						},
						{
							"id": 2067,
							"name": "regularizeBlock",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2068,
									"name": "regularizeBlock",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2069,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "DecoderTypes.BlockSpecifier"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "DecoderTypes.RegularizedBlockSpecifier"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 962,
									"character": 31
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2038
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2030,
								2026,
								2024,
								2029,
								2023,
								2025,
								2028,
								2027,
								2031,
								2036,
								2035,
								2022,
								2037
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								2046
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								2079,
								2082,
								2073,
								2048,
								2053,
								2070,
								2076,
								2060,
								2085,
								2063,
								2091,
								2087,
								2089,
								2044,
								2067
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/decoders.ts",
							"line": 718,
							"character": 28
						}
					]
				},
				{
					"id": 2093,
					"name": "ContractInstanceDecoder",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The ContractInstanceDecoder class.  Decodes storage for a specified\ninstance.  Also, decodes transactions and logs.  See below for a method\nlisting.",
						"text": "Note that when using this class to decode transactions, logs, and return\nvalues, it does have one advantage over using the WireDecoder or\nContractDecoder.  If the artifact for the class does not have a\ndeployedBytecode field, the WireDecoder (and therefore also the\nContractDecoder) will not be able to tell that this instance is of that\nclass, and so will fail to decode transactions sent to it or logs\noriginating from it, and will fall back to ABI mode when decoding return\nvalues received from it.  However, the ContractInstanceDecoder has that\ninformation and will make use of it, making it possible for it to decode\ntransactions sent to this instance, or logs originating from it, or decode\nreturn values received from it in full mode, even if the deployedBytecode\nfield is misssing."
					},
					"children": [
						{
							"id": 2117,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"signatures": [
								{
									"id": 2118,
									"name": "new ContractInstanceDecoder",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2119,
											"name": "contractDecoder",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ContractDecoder",
												"id": 2021
											}
										},
										{
											"id": 2120,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ContractInstanceDecoder",
										"id": 2093
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1100,
									"character": 35
								}
							]
						},
						{
							"id": 2104,
							"name": "additionalContexts",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1086,
									"character": 28
								}
							],
							"type": {
								"type": "reference",
								"name": "DecoderContexts",
								"id": 1801
							}
						},
						{
							"id": 2110,
							"name": "allocations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1090,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "AllocationInfo",
								"id": 1972
							}
						},
						{
							"id": 2095,
							"name": "compilation",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1076,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "Compilation",
								"id": 1753
							}
						},
						{
							"id": 2102,
							"name": "compiler",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1083,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"name": "CompilerVersion",
								"id": 1743
							}
						},
						{
							"id": 2101,
							"name": "contextHash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1082,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2103,
							"name": "contexts",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1085,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"name": "DecoderContexts",
								"id": 1801
							}
						},
						{
							"id": 2096,
							"name": "contract",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1077,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"name": "Contract",
								"id": 1765
							}
						},
						{
							"id": 2099,
							"name": "contractAddress",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1080,
									"character": 25
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2100,
							"name": "contractCode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1081,
									"character": 22
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2115,
							"name": "contractDecoder",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1099,
									"character": 25
								}
							],
							"type": {
								"type": "reference",
								"name": "ContractDecoder",
								"id": 2021
							}
						},
						{
							"id": 2098,
							"name": "contractNetwork",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1079,
									"character": 25
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2097,
							"name": "contractNode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1078,
									"character": 22
								}
							],
							"type": {
								"type": "reference",
								"name": "AstNode",
								"id": 1532
							}
						},
						{
							"id": 2112,
							"name": "internalFunctionsTable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1093,
									"character": 32
								}
							],
							"type": {
								"type": "reference",
								"name": "InternalFunctions",
								"id": 1979
							}
						},
						{
							"id": 2113,
							"name": "mappingKeys",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1095,
									"character": 21
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Slot",
									"id": 1375
								}
							},
							"defaultValue": " []"
						},
						{
							"id": 2105,
							"name": "referenceDeclarations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1088,
									"character": 31
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 2106,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": [
										{
											"id": 2107,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 2108,
													"name": "compilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "AstNodes",
												"id": 1577
											}
										}
									],
									"sources": [
										{
											"fileName": "decoder/lib/decoders.ts",
											"line": 1088,
											"character": 32
										}
									]
								}
							}
						},
						{
							"id": 2111,
							"name": "stateVariableReferences",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1092,
									"character": 33
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "StateVariableAllocation",
									"id": 1415
								}
							}
						},
						{
							"id": 2114,
							"name": "storageCache",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1097,
									"character": 22
								}
							],
							"type": {
								"type": "reference",
								"name": "StorageCache"
							}
						},
						{
							"id": 2109,
							"name": "userDefinedTypes",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1089,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"name": "TypesById",
								"id": 166
							}
						},
						{
							"id": 2094,
							"name": "web3",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1074,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "Web3"
							}
						},
						{
							"id": 2116,
							"name": "wireDecoder",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1100,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "WireDecoder",
								"id": 2188
							}
						},
						{
							"id": 2123,
							"name": "context",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"getSignature": [
								{
									"id": 2124,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "DecoderContext",
										"id": 1807
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1221,
									"character": 21
								}
							]
						},
						{
							"id": 2175,
							"name": "abifyCalldataDecoding",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2176,
									"name": "abifyCalldataDecoding",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "See [[WireDecoder.abifyCalldataDecoding]]."
									},
									"parameters": [
										{
											"id": 2177,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "CalldataDecoding",
												"id": 737
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CalldataDecoding",
										"id": 737
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1668,
									"character": 30
								}
							]
						},
						{
							"id": 2178,
							"name": "abifyLogDecoding",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2179,
									"name": "abifyLogDecoding",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "See [[WireDecoder.abifyLogDecoding]]."
									},
									"parameters": [
										{
											"id": 2180,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "LogDecoding",
												"id": 738
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "LogDecoding",
										"id": 738
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1675,
									"character": 25
								}
							]
						},
						{
							"id": 2125,
							"name": "checkAllocationSuccess",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2126,
									"name": "checkAllocationSuccess",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1225,
									"character": 32
								}
							]
						},
						{
							"id": 2184,
							"name": "constructSlot",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2185,
									"name": "constructSlot",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2186,
											"name": "variable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 2187,
											"name": "indices",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "tuple",
										"elements": [
											{
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Slot",
														"id": 1375
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											},
											{
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1707,
									"character": 23
								}
							]
						},
						{
							"id": 2167,
							"name": "decodeLog",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2168,
									"name": "decodeLog",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "See [[WireDecoder.decodeLog]].\n"
									},
									"parameters": [
										{
											"id": 2169,
											"name": "log",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Log",
												"id": 2383
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "LogDecoding",
													"id": 738
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1634,
									"character": 24
								}
							]
						},
						{
							"id": 2170,
							"name": "decodeReturnValue",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2171,
									"name": "decodeReturnValue",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "See [[ContractDecoder.decodeReturnValue]].\n\nIf the contract artifact is missing its bytecode, using this method,\nrather than the one in [[ContractDecoder]], can sometimes provide\nadditional decoding information.\n"
									},
									"parameters": [
										{
											"id": 2172,
											"name": "abi",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FunctionAbiEntry",
												"id": 1168
											}
										},
										{
											"id": 2173,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2174,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReturnOptions",
												"id": 2368
											},
											"defaultValue": " {}"
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "ReturndataDecoding",
													"id": 739
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1651,
									"character": 32
								}
							]
						},
						{
							"id": 2164,
							"name": "decodeTransaction",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2165,
									"name": "decodeTransaction",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "See [[WireDecoder.decodeTransaction]].\n"
									},
									"parameters": [
										{
											"id": 2166,
											"name": "transaction",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Transaction",
												"id": 2371
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "CalldataDecoding",
												"id": 737
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1620,
									"character": 32
								}
							]
						},
						{
							"id": 2127,
							"name": "decodeVariable",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2128,
									"name": "decodeVariable",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2129,
											"name": "variable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "StateVariableAllocation",
												"id": 1415
											}
										},
										{
											"id": 2130,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "DecoderTypes.RegularizedBlockSpecifier"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "StateVariable",
												"id": 2349
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1241,
									"character": 30
								}
							]
						},
						{
							"id": 2181,
							"name": "events",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2182,
									"name": "events",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "This mostly behaves as [[WireDecoder.events]].\nHowever, unlike other variants of this function, this one, by default, restricts to events originating from this instance's address.\nIf you don't want to restrict like that, you can explicitly use `address: undefined` in the options to disable this.\n(You can also of course set a different address to restrict to that.)"
									},
									"parameters": [
										{
											"id": 2183,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Used to determine what events to fetch; see the documentation on the [[EventOptions]] type for more.\n"
											},
											"type": {
												"type": "reference",
												"name": "EventOptions",
												"id": 2363
											},
											"defaultValue": " {}"
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "DecodedLog",
													"id": 2353
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1688,
									"character": 21
								}
							]
						},
						{
							"id": 2141,
							"name": "findVariableByNameOrId",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2142,
									"name": "findVariableByNameOrId",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2143,
											"name": "nameOrId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "StateVariableAllocation",
												"id": 1415
											},
											{
												"type": "intrinsic",
												"name": "undefined"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1407,
									"character": 32
								}
							]
						},
						{
							"id": 2149,
							"name": "getCode",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2150,
									"name": "getCode",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2151,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2152,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "DecoderTypes.RegularizedBlockSpecifier"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Uint8Array"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1474,
									"character": 23
								}
							]
						},
						{
							"id": 2144,
							"name": "getStorage",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2145,
									"name": "getStorage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2146,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2147,
											"name": "slot",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "BN"
											}
										},
										{
											"id": 2148,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "DecoderTypes.RegularizedBlockSpecifier"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Uint8Array"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1441,
									"character": 26
								}
							]
						},
						{
							"id": 2121,
							"name": "init",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2122,
									"name": "init",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1144,
									"character": 19
								}
							]
						},
						{
							"id": 2153,
							"name": "regularizeBlock",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2154,
									"name": "regularizeBlock",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2155,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "DecoderTypes.BlockSpecifier"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "DecoderTypes.RegularizedBlockSpecifier"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1481,
									"character": 31
								}
							]
						},
						{
							"id": 2131,
							"name": "state",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2132,
									"name": "state",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Returns information about the state of the contract, but does not include\ninformation about the storage or decoded variables.  See the documentation\nfor the [[ContractState]] type for more."
									},
									"parameters": [
										{
											"id": 2133,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The block to inspect the contract's state at.  Defaults to latest.\n  See [[BlockSpecifier]] for legal values.\n"
											},
											"type": {
												"type": "reference",
												"name": "DecoderTypes.BlockSpecifier"
											},
											"defaultValue": "\"latest\""
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "ContractState",
												"id": 2343
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1309,
									"character": 20
								}
							]
						},
						{
							"id": 2160,
							"name": "unwatchMappingKey",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2161,
									"name": "unwatchMappingKey",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Opposite of [[watchMappingKey]]; unwatches the specified mapping key.  See\nwatchMappingKey for more on how watching mapping keys works, and on how\nthe parameters work.\n\nNote that unwatching a mapping key will also unwatch all its descendants.\nE.g., if `m` is of type `mapping(uint => mapping(uint => uint))`, then\nunwatching `m[0]` will also unwatch `m[0][0]`, `m[0][1]`, etc, if these\nare currently watched.\n\nThis function has the same caveats as watchMappingKey.\n"
									},
									"parameters": [
										{
											"id": 2162,
											"name": "variable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 2163,
											"name": "indices",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1588,
									"character": 32
								}
							]
						},
						{
							"id": 2137,
							"name": "variable",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2138,
									"name": "variable",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Decodes an individual contract variable; returns its value as a\n[[Format.Values.Result|Result]].  See the documentation for\n[[variables|variables()]] for various caveats that also apply here.\n\nIf the variable can't be located, throws an exception.",
										"tags": [
											{
												"tag": "example",
												"text": "Consider a contract `Derived` inheriting from a contract `Base`.\n  Suppose `Derived` has a variable `x` and `Base` has variables `x` and\n  `y`.  One can access `Derived.x` as `variable(\"x\")` or\n  `variable(\"Derived.x\")`, can access `Base.x` as `variable(\"Base.x\")`,\n  and can access `Base.y` as `variable(\"y\")` or `variable(\"Base.y\")`.\n"
											}
										]
									},
									"parameters": [
										{
											"id": 2139,
											"name": "nameOrId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name (or numeric ID, if you know that) of the\n  variable.  Can be given as a qualified name, allowing one to get at\n  shadowed variables from base contracts.  If given by ID, can be given as a\n  number or numeric string."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										},
										{
											"id": 2140,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The block to inspect the contract's state at.  Defaults to latest.\n  See [[BlockSpecifier]] for legal values."
											},
											"type": {
												"type": "reference",
												"name": "DecoderTypes.BlockSpecifier"
											},
											"defaultValue": "\"latest\""
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 282
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1389,
									"character": 23
								}
							]
						},
						{
							"id": 2134,
							"name": "variables",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2135,
									"name": "variables",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Decodes the contract's variables; returns an array of these decoded variables.\nSee the documentation of the [[DecodedVariable]] type for more.\n\nNote that variable decoding can only operate in full mode; if the decoder wasn't able to\nstart up in full mode, this method will throw a [[ContractAllocationFailedError]].\n\nNote that decoding mappings requires first watching mapping keys in order to get any results;\nsee the documentation for [[watchMappingKey]].\nAdditional methods to make mapping decoding a less manual affair are planned for the future.\n\nAlso, due to a technical limitation, it is not currently possible to\nusefully decode internal function pointers.  See the\n[[Format.Values.FunctionInternalValue|FunctionInternalValue]]\ndocumentation and the README for more on how these are handled."
									},
									"parameters": [
										{
											"id": 2136,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The block to inspect the contract's state at.  Defaults to latest.\n  See [[BlockSpecifier]] for legal values.\n"
											},
											"type": {
												"type": "reference",
												"name": "DecoderTypes.BlockSpecifier"
											},
											"defaultValue": "\"latest\""
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "StateVariable",
													"id": 2349
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1349,
									"character": 24
								}
							]
						},
						{
							"id": 2156,
							"name": "watchMappingKey",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2157,
									"name": "watchMappingKey",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Watches a mapping key; adds it to the decoder's list of watched mapping\nkeys.  This affects the results of both [[variables|variables()]] and\n[[variable|variable()]].  When a mapping is decoded, only the values at\nits watched keys will be included in its value.\n\nNote that it is possible\nto watch mappings that are inside structs, arrays, other mappings, etc;\nsee below for more on how to do this.\n\nNote that watching mapping keys is\nonly possible in full mode; if the decoder wasn't able to start up in full\nmode, this method will throw an exception.\n\n**Warning**: At the moment, this function does very little to check its\ninput.  Bad input may have unpredictable results.  This will be remedied\nin the future (by having it throw exceptions on bad input), but right now\nessentially no checking is implemented.  Also, there may be slight changes\nto the format of indices in the future.\n\n(A bad variable name will cause an exception though; that input is checked.)",
										"tags": [
											{
												"tag": "example",
												"text": "First, a simple example.  Say we have a mapping `m` of type\n  `mapping(uint => uint)`.  You could call `watchMappingKey(\"m\", 0)` to\n  watch `m[0]`."
											},
											{
												"tag": "example",
												"text": "Now for a slightly more complicated example.  Say `m` is of type\n  `mapping(uint => mapping(uint => uint))`, then to watch `m[3][5]`, you\n  can call `watchMappingKey(\"m\", 3, 5)`.  This will also automatically\n  watch `m[3]`; otherwise, watching `m[3][5]` wouldn't do much of\n  anything."
											},
											{
												"tag": "example",
												"text": "Now for a well more complicated example.  Say we have a struct\n  type `MapStruct` with a member called `map` which is a `mapping(string => string)`,\n  and say we have a variable `arr` of type `MapStruct[]`, then one could\n  watch `arr[3].map[\"hello\"]` by calling `watchMappingKey(\"arr\", 3, \"map\", \"hello\")`.\n"
											}
										]
									},
									"parameters": [
										{
											"id": 2158,
											"name": "variable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The variable that the mapping lives under; this works like\n  the nameOrId argument to [[variable|variable()]].  If the mapping is a\n  top-level state variable, put the mapping itself here.  Otherwise, put the\n  top-level state variable it lives under."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 2159,
											"name": "indices",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"comment": {
												"text": "Further arguments to watchMappingKey, if given, will be\n  interpreted as indices into or members of the variable identified by the\n  variable argument; see the example.  Array indices and mapping\n  keys are specified by value; struct members are specified by name.\n\n  Numeric values can be given as number, BN, or\n  numeric string.  Bytestring values are given as hex strings.  Boolean\n  values are given as booleans, or as the strings \"true\" or \"false\".\n  Address values are given as hex strings; they are currently not required\n  to be in checksum case, but this will likely change in the future, so\n  don't rely on that.  Contract values work like address values.\n  Enum values can be given either as a numeric value or by name;\n  in the latter case you can use either a qualified name or just the\n  name of the option (i.e., you can just write `\"Option\"` rather than\n  `\"Enum.Option\"` or `\"Contract.Enum.Option\"`, but those will work too).\n\n  Note that if the path to a given mapping key\n  includes mapping keys above it, any ancestors will also be watched\n  automatically."
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1546,
									"character": 30
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2117
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2104,
								2110,
								2095,
								2102,
								2101,
								2103,
								2096,
								2099,
								2100,
								2115,
								2098,
								2097,
								2112,
								2113,
								2105,
								2111,
								2114,
								2109,
								2094,
								2116
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								2123
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								2175,
								2178,
								2125,
								2184,
								2167,
								2170,
								2164,
								2127,
								2181,
								2141,
								2149,
								2144,
								2121,
								2153,
								2131,
								2160,
								2137,
								2134,
								2156
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/decoders.ts",
							"line": 1073,
							"character": 36
						}
					]
				},
				{
					"id": 2290,
					"name": "ContractNotFoundError",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This error indicates that the contract you are attempting to decode could not be found in\nthe project info.  This error will be thrown if you attempt to spawn a contract decoder or\ncontract instance decoder for a contract not appearing in the project info."
					},
					"children": [
						{
							"id": 2295,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2296,
									"name": "new ContractNotFoundError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 2297,
											"name": "contractName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2298,
											"name": "bytecode",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2299,
											"name": "deployedBytecode",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2300,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ContractNotFoundError",
										"id": 2290
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 29,
									"character": 25
								}
							]
						},
						{
							"id": 2294,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 29,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2292,
							"name": "bytecode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 27,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2291,
							"name": "contractName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 26,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2293,
							"name": "deployedBytecode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 28,
									"character": 25
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2302,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 974,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.message"
							}
						},
						{
							"id": 2301,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 973,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.name"
							}
						},
						{
							"id": 2303,
							"name": "stack",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 975,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"overwrites": {
								"type": "reference",
								"name": "Error.stack"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.stack"
							}
						},
						{
							"id": 2304,
							"name": "Error",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 984,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "ErrorConstructor"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2295
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2294,
								2292,
								2291,
								2293,
								2302,
								2301,
								2303,
								2304
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/errors.ts",
							"line": 25,
							"character": 34
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 2318,
					"name": "InvalidAddressError",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This error indicates that an invalid address was passed to one of the\ncontract instance decoder spawners ([[forContractInstance]], etc).  Valid\naddresses are those that Web3 accepts; i.e., either those with correct\nchecksums, or those that are all-lowercase or all-uppercase to deliberately\ncircumvent the checksum."
					},
					"children": [
						{
							"id": 2320,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2321,
									"name": "new InvalidAddressError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 2322,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "InvalidAddressError",
										"id": 2318
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 84,
									"character": 25
								}
							]
						},
						{
							"id": 2319,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 84,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2324,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 974,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.message"
							}
						},
						{
							"id": 2323,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 973,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.name"
							}
						},
						{
							"id": 2325,
							"name": "stack",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 975,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"overwrites": {
								"type": "reference",
								"name": "Error.stack"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.stack"
							}
						},
						{
							"id": 2326,
							"name": "Error",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 984,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "ErrorConstructor"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2320
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2319,
								2324,
								2323,
								2325,
								2326
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/errors.ts",
							"line": 83,
							"character": 32
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 2336,
					"name": "NoProjectInfoError",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This error indicates that the user attempted to instantiate a decoder\nwith no project information (by explicitly overriding the default)."
					},
					"children": [
						{
							"id": 2337,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2338,
									"name": "new NoProjectInfoError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "NoProjectInfoError",
										"id": 2336
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 110,
									"character": 47
								}
							]
						},
						{
							"id": 2340,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 974,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.message"
							}
						},
						{
							"id": 2339,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 973,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.name"
							}
						},
						{
							"id": 2341,
							"name": "stack",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 975,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"overwrites": {
								"type": "reference",
								"name": "Error.stack"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.stack"
							}
						},
						{
							"id": 2342,
							"name": "Error",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 984,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "ErrorConstructor"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2337
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2340,
								2339,
								2341,
								2342
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/errors.ts",
							"line": 110,
							"character": 31
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 2327,
					"name": "VariableNotFoundError",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This error indicates that the user requested a variable that does not exist."
					},
					"children": [
						{
							"id": 2329,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2330,
									"name": "new VariableNotFoundError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 2331,
											"name": "nameOrId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "VariableNotFoundError",
										"id": 2327
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 97,
									"character": 35
								}
							]
						},
						{
							"id": 2333,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 974,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.message"
							}
						},
						{
							"id": 2332,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 973,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.name"
							}
						},
						{
							"id": 2328,
							"name": "nameOrId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 97,
									"character": 17
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 2334,
							"name": "stack",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 975,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"overwrites": {
								"type": "reference",
								"name": "Error.stack"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.stack"
							}
						},
						{
							"id": 2335,
							"name": "Error",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 984,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "ErrorConstructor"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2329
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2333,
								2332,
								2328,
								2334,
								2335
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/errors.ts",
							"line": 96,
							"character": 34
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 2188,
					"name": "WireDecoder",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The WireDecoder class.  Decodes transactions and logs.  See below for a method listing."
					},
					"children": [
						{
							"id": 2202,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"signatures": [
								{
									"id": 2203,
									"name": "new WireDecoder",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2204,
											"name": "compilations",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Compilation",
													"id": 1753
												}
											}
										},
										{
											"id": 2205,
											"name": "provider",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Provider"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "WireDecoder",
										"id": 2188
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 58,
									"character": 49
								}
							]
						},
						{
							"id": 2200,
							"name": "allocations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 56,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "AllocationInfo",
								"id": 1972
							}
						},
						{
							"id": 2201,
							"name": "codeCache",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 58,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "CodeCache"
							}
						},
						{
							"id": 2191,
							"name": "compilations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 49,
									"character": 22
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Compilation",
									"id": 1753
								}
							}
						},
						{
							"id": 2192,
							"name": "contexts",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 50,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"name": "DecoderContexts",
								"id": 1801
							}
						},
						{
							"id": 2194,
							"name": "contractsAndContexts",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 52,
									"character": 30
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "ContractAndContexts"
								}
							},
							"defaultValue": " []"
						},
						{
							"id": 2193,
							"name": "deployedContexts",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 51,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"name": "DecoderContexts",
								"id": 1801
							}
						},
						{
							"id": 2190,
							"name": "network",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 47,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2195,
							"name": "referenceDeclarations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 54,
									"character": 31
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 2196,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": [
										{
											"id": 2197,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 2198,
													"name": "compilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "AstNodes",
												"id": 1577
											}
										}
									],
									"sources": [
										{
											"fileName": "decoder/lib/decoders.ts",
											"line": 54,
											"character": 32
										}
									]
								}
							}
						},
						{
							"id": 2199,
							"name": "userDefinedTypes",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 55,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"name": "TypesById",
								"id": 166
							}
						},
						{
							"id": 2189,
							"name": "web3",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 45,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "Web3"
							}
						},
						{
							"id": 2243,
							"name": "abifyCalldataDecoding",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2244,
									"name": "abifyCalldataDecoding",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Takes a [[CalldataDecoding]], which may have been produced in full mode or ABI mode,\nand converts it to its ABI mode equivalent.  See the README for more information.",
										"text": "Please only use on decodings produced by this same decoder instance; use\non decodings produced by other instances may not work consistently."
									},
									"parameters": [
										{
											"id": 2245,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The decoding to abify\n"
											},
											"type": {
												"type": "reference",
												"name": "CalldataDecoding",
												"id": 737
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CalldataDecoding",
										"id": 737
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 486,
									"character": 30
								}
							]
						},
						{
							"id": 2246,
							"name": "abifyLogDecoding",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2247,
									"name": "abifyLogDecoding",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Takes a [[LogDecoding]], which may have been produced in full mode or ABI mode,\nand converts it to its ABI mode equivalent.  See the README for more information.",
										"text": "Please only use on decodings produced by this same decoder instance; use\non decodings produced by other instances may not work consistently."
									},
									"parameters": [
										{
											"id": 2248,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The decoding to abify\n"
											},
											"type": {
												"type": "reference",
												"name": "LogDecoding",
												"id": 738
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "LogDecoding",
										"id": 738
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 498,
									"character": 25
								}
							]
						},
						{
							"id": 2206,
							"name": "collectUserDefinedTypes",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2207,
									"name": "collectUserDefinedTypes",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2208,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 2209,
													"name": "definitions",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "decoder/lib/decoders.ts",
															"line": 180,
															"character": 15
														}
													],
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 2210,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"indexSignature": [
																{
																	"id": 2211,
																	"name": "__index",
																	"kind": 8192,
																	"kindString": "Index signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 2212,
																			"name": "compilationId",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	],
																	"type": {
																		"type": "reference",
																		"name": "AstNodes",
																		"id": 1577
																	}
																}
															],
															"sources": [
																{
																	"fileName": "decoder/lib/decoders.ts",
																	"line": 180,
																	"character": 16
																}
															]
														}
													}
												},
												{
													"id": 2213,
													"name": "types",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "decoder/lib/decoders.ts",
															"line": 181,
															"character": 9
														}
													],
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 166
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														2209,
														2213
													]
												}
											],
											"sources": [
												{
													"fileName": "decoder/lib/decoders.ts",
													"line": 179,
													"character": 36
												}
											]
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 179,
									"character": 33
								}
							]
						},
						{
							"id": 2228,
							"name": "decodeLog",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2229,
									"name": "decodeLog",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Takes a [[Log]] object and decodes it.  Logs can be ambiguous, so this so\nthis function returns an array of [[LogDecoding|LogDecodings]].\n\nNote that logs are decoded in strict mode, so (with one exception) none of the decodings should\ncontain errors; if a decoding would contain an error, instead it is simply excluded from the\nlist of possible decodings.  The one exception to this is that indexed parameters of reference\ntype cannot meaningfully be decoded, so those will decode to an error.\n\nIf there are multiple possible decodings, they will always be listed in the following order:\n\n1. Non-anonymous events coming from the contract itself (these will moreover be ordered\n  from most derived to most base)\n2. Non-anonymous events coming from libraries\n3. Anonymous events coming from the contract itself (again, ordered from most derived\n  to most base)\n4. Anonymous events coming from libraries\n\nYou can check the kind and class.contractKind fields to distinguish between these.\n\nIf no possible decodings are found, the returned array of decodings will be empty.\n\nNote that different decodings may use different decoding modes.\n"
									},
									"parameters": [
										{
											"id": 2230,
											"name": "log",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The log to be decoded.\n"
											},
											"type": {
												"type": "reference",
												"name": "Log",
												"id": 2383
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "LogDecoding",
													"id": 738
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 368,
									"character": 24
								}
							]
						},
						{
							"id": 2231,
							"name": "decodeLogWithAdditionalOptions",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2232,
									"name": "decodeLogWithAdditionalOptions",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2233,
											"name": "log",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Log",
												"id": 2383
											}
										},
										{
											"id": 2234,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "EventOptions",
												"id": 2363
											},
											"defaultValue": " {}"
										},
										{
											"id": 2235,
											"name": "additionalContexts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "DecoderContexts",
												"id": 1801
											},
											"defaultValue": " {}"
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "LogDecoding",
													"id": 738
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 375,
									"character": 45
								}
							]
						},
						{
							"id": 2221,
							"name": "decodeTransaction",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2222,
									"name": "decodeTransaction",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Takes a [[Transaction]] object and decodes it.  The result is a\n[[CalldataDecoding]]; see the documentation on that interface for more.\n\nNote that decoding of transactions sent to libraries is presently not\nsupported and may have unreliable results.  Limited support for this is\nplanned for future versions."
									},
									"parameters": [
										{
											"id": 2223,
											"name": "transaction",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The transaction to be decoded.\n"
											},
											"type": {
												"type": "reference",
												"name": "Transaction",
												"id": 2371
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "CalldataDecoding",
												"id": 737
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 288,
									"character": 32
								}
							]
						},
						{
							"id": 2224,
							"name": "decodeTransactionWithAdditionalContexts",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2225,
									"name": "decodeTransactionWithAdditionalContexts",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2226,
											"name": "transaction",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Transaction",
												"id": 2371
											}
										},
										{
											"id": 2227,
											"name": "additionalContexts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "DecoderContexts",
												"id": 1801
											},
											"defaultValue": " {}"
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "CalldataDecoding",
												"id": 737
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 297,
									"character": 54
								}
							]
						},
						{
							"id": 2236,
							"name": "events",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2237,
									"name": "events",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Gets all events meeting certain conditions and decodes them.\nThis function is fairly rudimentary at the moment but more functionality\nwill be added in the future.",
										"returns": "An array of [[DecodedLog|DecodedLogs]].\n  These consist of a log together with its possible decodings; see that\n  type for more info.  And see [[decodeLog]] for more info on how log\n  decoding works in general.",
										"tags": [
											{
												"tag": "example",
												"text": "`events({name: \"TestEvent\"})` -- get events named \"TestEvent\"\n  from the most recent block\n"
											}
										]
									},
									"parameters": [
										{
											"id": 2238,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Used to determine what events to fetch; see the documentation\n  on the [[EventOptions]] type for more."
											},
											"type": {
												"type": "reference",
												"name": "EventOptions",
												"id": 2363
											},
											"defaultValue": " {}"
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "DecodedLog",
													"id": 2353
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 427,
									"character": 21
								}
							]
						},
						{
							"id": 2239,
							"name": "eventsWithAdditionalContexts",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2240,
									"name": "eventsWithAdditionalContexts",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2241,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "EventOptions",
												"id": 2363
											},
											"defaultValue": " {}"
										},
										{
											"id": 2242,
											"name": "additionalContexts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "DecoderContexts",
												"id": 1801
											},
											"defaultValue": " {}"
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "DecodedLog",
													"id": 2353
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 436,
									"character": 43
								}
							]
						},
						{
							"id": 2262,
							"name": "forAddress",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2263,
									"name": "forAddress",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Constructs a contract instance decoder for a given instance of a contract in this\nproject.  Unlike [[forInstance]], this method doesn't require an artifact; it\nwill automatically detect the class of the given contract.  If it's not in\nthe project, or the decoder can't identify it, you'll get an exception."
									},
									"parameters": [
										{
											"id": 2264,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The address of the contract instance to decode.\n  If an invalid address is provided, this method will throw an exception."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2265,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "You can include this argument to specify that this should be\n  based on the addresses content's at a specific block (if say the contract\n  has since self-destructed).\n"
											},
											"type": {
												"type": "reference",
												"name": "DecoderTypes.BlockSpecifier"
											},
											"defaultValue": "\"latest\""
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "ContractInstanceDecoder",
												"id": 2093
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 634,
									"character": 25
								}
							]
						},
						{
							"id": 2255,
							"name": "forArtifact",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2256,
									"name": "forArtifact",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Constructs a contract decoder for a given contract artifact."
									},
									"parameters": [
										{
											"id": 2257,
											"name": "artifact",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The artifact for the contract.\n\n  A contract constructor object may be substituted for the artifact, so if\n  you're not sure which you're dealing with, it's OK.\n\n  Note: The artifact must be for a contract that the decoder knows about;\n  otherwise you will have problems.\n"
											},
											"type": {
												"type": "reference",
												"name": "Artifact"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "ContractDecoder",
												"id": 2021
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 538,
									"character": 26
								}
							]
						},
						{
							"id": 2258,
							"name": "forInstance",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2259,
									"name": "forInstance",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Constructs a contract instance decoder for a given instance of a contract in this\nproject."
									},
									"parameters": [
										{
											"id": 2260,
											"name": "artifact",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The artifact for the contract.\n\n  A contract constructor object may be substituted for the artifact, so if\n  you're not sure which you're dealing with, it's OK.\n\n  Note: The artifact must be for a contract that the decoder knows about;\n  otherwise you will have problems."
											},
											"type": {
												"type": "reference",
												"name": "Artifact"
											}
										},
										{
											"id": 2261,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The address of the contract instance to decode.  If left out, it will be autodetected.\n  If an invalid address is provided, this method will throw an exception.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "ContractInstanceDecoder",
												"id": 2093
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 613,
									"character": 26
								}
							]
						},
						{
							"id": 2273,
							"name": "getAllocations",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2274,
									"name": "getAllocations",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "AllocationInfo",
										"id": 1972
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 689,
									"character": 23
								}
							]
						},
						{
							"id": 2214,
							"name": "getCode",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2215,
									"name": "getCode",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2216,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2217,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "DecoderTypes.RegularizedBlockSpecifier"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Uint8Array"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 238,
									"character": 22
								}
							]
						},
						{
							"id": 2249,
							"name": "getContextByAddress",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2250,
									"name": "getContextByAddress",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2251,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2252,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "DecoderTypes.RegularizedBlockSpecifier"
											}
										},
										{
											"id": 2253,
											"name": "constructorBinary",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2254,
											"name": "additionalContexts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "DecoderContexts",
												"id": 1801
											},
											"defaultValue": " {}"
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "DecoderContext",
														"id": 1807
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 506,
									"character": 35
								}
							]
						},
						{
							"id": 2277,
							"name": "getDeployedContexts",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2278,
									"name": "getDeployedContexts",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "DecoderContexts",
										"id": 1801
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 708,
									"character": 28
								}
							]
						},
						{
							"id": 2266,
							"name": "getReferenceDeclarations",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2267,
									"name": "getReferenceDeclarations",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2268,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 2269,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 2270,
															"name": "compilationId",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "AstNodes",
														"id": 1577
													}
												}
											],
											"sources": [
												{
													"fileName": "decoder/lib/decoders.ts",
													"line": 675,
													"character": 36
												}
											]
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 675,
									"character": 33
								}
							]
						},
						{
							"id": 2271,
							"name": "getUserDefinedTypes",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2272,
									"name": "getUserDefinedTypes",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "TypesById",
										"id": 166
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 682,
									"character": 28
								}
							]
						},
						{
							"id": 2275,
							"name": "getWeb3",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2276,
									"name": "getWeb3",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "Web3"
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 701,
									"character": 16
								}
							]
						},
						{
							"id": 2218,
							"name": "regularizeBlock",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2219,
									"name": "regularizeBlock",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2220,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "DecoderTypes.BlockSpecifier"
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "DecoderTypes.RegularizedBlockSpecifier"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 264,
									"character": 30
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2202
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2200,
								2201,
								2191,
								2192,
								2194,
								2193,
								2190,
								2195,
								2199,
								2189
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								2243,
								2246,
								2206,
								2228,
								2231,
								2221,
								2224,
								2236,
								2239,
								2262,
								2255,
								2258,
								2273,
								2214,
								2249,
								2277,
								2266,
								2271,
								2275,
								2218
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/decoders.ts",
							"line": 44,
							"character": 24
						}
					]
				},
				{
					"id": 2343,
					"name": "ContractState",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents the state of a contract aside from its storage."
					},
					"children": [
						{
							"id": 2345,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The contract's address, as a checksummed hex string."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 59,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2346,
							"name": "balanceAsBN",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The contract's balance, in Wei, as a BN."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 63,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "BN"
							}
						},
						{
							"id": 2344,
							"name": "class",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The contract's class, as a Format.Types.ContractType."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 55,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "Format.Types.ContractType",
								"id": 135
							}
						},
						{
							"id": 2348,
							"name": "code",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The contract's code, as a hexidecimal string."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 71,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2347,
							"name": "nonceAsBN",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The contract's nonce, as a BN."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 67,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "BN"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2345,
								2346,
								2344,
								2348,
								2347
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/types.ts",
							"line": 51,
							"character": 30
						}
					]
				},
				{
					"id": 2353,
					"name": "DecodedLog",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents a web3 Log object that has been decoded.\nNote that it extends the Log type and just adds an additional field\nwith the decoding."
					},
					"children": [
						{
							"id": 2355,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Address of the emitter (as checksummed hex string)."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 267,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Log.address",
								"id": 2384
							}
						},
						{
							"id": 2361,
							"name": "blockHash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The block hash (as hex string).  Null if pending."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 292,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Log.blockHash",
								"id": 2390
							}
						},
						{
							"id": 2362,
							"name": "blockNumber",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The block number.  Null if pending."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 296,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Log.blockNumber",
								"id": 2391
							}
						},
						{
							"id": 2356,
							"name": "data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The log's data section (as hex string)."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 271,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Log.data",
								"id": 2385
							}
						},
						{
							"id": 2354,
							"name": "decodings",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "An array of possible decodings of the given log -- it's an array because logs can be ambiguous.",
								"text": "This field works just like the output of [[WireDecoder.decodeLog]], so see that for more\ninformation.\n"
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 108,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "LogDecoding",
									"id": 738
								}
							}
						},
						{
							"id": 2358,
							"name": "logIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Index of the log within the block."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 279,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Log.logIndex",
								"id": 2387
							}
						},
						{
							"id": 2357,
							"name": "topics",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The log's topics; each is a hex string representing 32 bytes."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 275,
									"character": 8
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Log.topics",
								"id": 2386
							}
						},
						{
							"id": 2360,
							"name": "transactionHash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The emitting transaction's hash (as hex string)."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 288,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Log.transactionHash",
								"id": 2389
							}
						},
						{
							"id": 2359,
							"name": "transactionIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Index within the block of the emitting transaction; null if\nblock is pending."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 284,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Log.transactionIndex",
								"id": 2388
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2355,
								2361,
								2362,
								2356,
								2354,
								2358,
								2357,
								2360,
								2359
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/types.ts",
							"line": 101,
							"character": 27
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Log",
							"id": 2383
						}
					]
				},
				{
					"id": 2363,
					"name": "EventOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The type of the options parameter to [[WireDecoder.events|events()]].  This type will be expanded in the future\nas more filtering options are added."
					},
					"children": [
						{
							"id": 2367,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "If included, will restrict to events emitted by the given address.",
								"text": "NOTE: In the contract instance decoder, if omitted, defaults to the\naddress of the contract instance being decoded, rather than not filtering\nby address.  However, this behavior can be turned off by explicitly specifying\naddress as undefined.\n"
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 173,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2365,
							"name": "fromBlock",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The earliest block to include events from.  Defaults to \"latest\"."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 160,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "BlockSpecifier",
								"id": 2392
							}
						},
						{
							"id": 2364,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "If included, the name parameter will restrict to events with the given name."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 156,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2366,
							"name": "toBlock",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The latest block to include events from.  Defaults to \"latest\"."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 164,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "BlockSpecifier",
								"id": 2392
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2367,
								2365,
								2364,
								2366
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/types.ts",
							"line": 152,
							"character": 29
						}
					]
				},
				{
					"id": 2383,
					"name": "Log",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Contains information about a transaction.  Most of the fields have\nbeen made optional; only those needed by the decoder have been made\nmandatory.",
						"text": "Intended to work like Web3's\n[Log](https://web3js.readthedocs.io/en/v1.2.1/web3-eth.html#eth-getpastlogs-return)\ntype."
					},
					"children": [
						{
							"id": 2384,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Address of the emitter (as checksummed hex string)."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 267,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2390,
							"name": "blockHash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The block hash (as hex string).  Null if pending."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 292,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 2391,
							"name": "blockNumber",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The block number.  Null if pending."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 296,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 2385,
							"name": "data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The log's data section (as hex string)."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 271,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2387,
							"name": "logIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Index of the log within the block."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 279,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2386,
							"name": "topics",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The log's topics; each is a hex string representing 32 bytes."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 275,
									"character": 8
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 2389,
							"name": "transactionHash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The emitting transaction's hash (as hex string)."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 288,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2388,
							"name": "transactionIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Index within the block of the emitting transaction; null if\nblock is pending."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 284,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2384,
								2390,
								2391,
								2385,
								2387,
								2386,
								2389,
								2388
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/types.ts",
							"line": 263,
							"character": 20
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "DecodedLog",
							"id": 2353
						}
					]
				},
				{
					"id": 2393,
					"name": "ProjectInfo",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents information about a Truffle project that can be used to\nconstruct and initialize a decoder for that project.  This information may\nbe passed in various ways; this type is given here as an interface rahter\nthan a union, but note that really you only need to include one of these\nfields.  (The `compilations` field will be used if present, then `artifacts`\nif not, etc.)  Further options for how to specify project information are\nintended to be added in the future."
					},
					"children": [
						{
							"id": 2395,
							"name": "artifacts",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "A list of contract artifacts for contracts in the project.\nContract constructor objects may be substituted for artifacts, so if\nyou're not sure which you're dealing with, it's OK."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 36,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Artifact"
								}
							}
						},
						{
							"id": 2394,
							"name": "compilations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "An list of compilations, as specified in codec; this method of specifying\na project is mostly intended for internal Truffle use for now, but you can\nsee the documentation of the Compilations type if you want to use it."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 30,
									"character": 14
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Compilation",
									"id": 1753
								}
							}
						},
						{
							"id": 2396,
							"name": "config",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The project's config object.  If present, and it has the\n`contracts_build_directory` property, the decoder will automatically read\nall the artifacts from there and use those as the project information.\nFurther, smarter use of the config object are intended to be added in\nthe future."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 44,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TruffleConfig"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2395,
								2394,
								2396
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/types.ts",
							"line": 24,
							"character": 28
						}
					]
				},
				{
					"id": 2368,
					"name": "ReturnOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The type of the options parameter to [[ContractDecoder.decodeReturnValue|decodeReturnValue()]]."
					},
					"children": [
						{
							"id": 2369,
							"name": "block",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The block in which the call was made.  Defaults to \"latest\"."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 184,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "BlockSpecifier",
								"id": 2392
							}
						},
						{
							"id": 2370,
							"name": "status",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "If included, tells the decoder to interpret the return data as\nthe return data from a successful call (if `true` is passed) or\nas the return data from a failed call (if `false` is passed). If\nomitted or set to `undefined`, the decoder will account for both\npossibilities."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 192,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2369,
								2370
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/types.ts",
							"line": 180,
							"character": 30
						}
					]
				},
				{
					"id": 2349,
					"name": "StateVariable",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents one of the decoded contract's state variables."
					},
					"children": [
						{
							"id": 2351,
							"name": "class",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The class of the contract that defined the variable, as a Format.Types.ContractType.\nNote that this class may differ from that of the contract being decoded, due\nto inheritance."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 88,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "Format.Types.ContractType",
								"id": 135
							}
						},
						{
							"id": 2350,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The name of the variable.  Note that due to inheritance, this may not be unique."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 82,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2352,
							"name": "value",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The decoded value of the variable.  Note this is a Format.Values.Result, so it may be an error."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 92,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "Format.Values.Result",
								"id": 282
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2351,
								2350,
								2352
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/types.ts",
							"line": 78,
							"character": 30
						}
					]
				},
				{
					"id": 2371,
					"name": "Transaction",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Contains information about a transaction.  Most of the fields have\nbeen made optional; only those needed by the decoder have been made\nmandatory.",
						"text": "Intended to work like Web3's\n[Transaction](https://web3js.readthedocs.io/en/v1.2.1/web3-eth.html#eth-gettransaction-return)\ntype."
					},
					"children": [
						{
							"id": 2374,
							"name": "blockHash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Hash of this transaction's block as hex string; null if pending."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 217,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 2375,
							"name": "blockNumber",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "This transaction's block number; null if pending."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 221,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 2377,
							"name": "from",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Address of the sender (as checksummed hex string)."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 229,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2381,
							"name": "gas",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Gas provided by the sender, as numeric string."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 246,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2380,
							"name": "gasPrice",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Gas price for this transaction, as numeric string."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 242,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2372,
							"name": "hash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The transaction hash as hex string."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 209,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2382,
							"name": "input",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Data sent with the transaction, as hex string."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 250,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2373,
							"name": "nonce",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The nonce of the sender before this transaction was sent."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 213,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2378,
							"name": "to",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Address of the recipient (as checksummed hex string), or null for a\ncontract creation."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 234,
									"character": 4
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 2376,
							"name": "transactionIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Index of transaction in block; null if block is pending."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 225,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 2379,
							"name": "value",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Wei sent with this transaction, as numeric string."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 238,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2374,
								2375,
								2377,
								2381,
								2380,
								2372,
								2382,
								2373,
								2378,
								2376,
								2379
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/types.ts",
							"line": 205,
							"character": 28
						}
					]
				},
				{
					"id": 2392,
					"name": "BlockSpecifier",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Specifies a block.  Can be given by number, or can be given via the\nspecial strings \"genesis\", \"latest\", or \"pending\".",
						"text": "Intended to work like Web3's\n[BlockType](https://web3js.readthedocs.io/en/v1.2.1/web3-eth.html#id14).\n\n*Warning*: Using \"pending\", while allowed, is not advised, as it may lead\nto internally inconsistent results.  Use of \"latest\" is safe and will not\nlead to inconsistent results from a single decoder call due to the decoder's\ncaching system, but pending blocks cannot be cached under this system, which\nmay cause inconsistencies."
					},
					"sources": [
						{
							"fileName": "decoder/lib/types.ts",
							"line": 313,
							"character": 26
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "stringLiteral",
								"value": "genesis"
							},
							{
								"type": "stringLiteral",
								"value": "latest"
							},
							{
								"type": "stringLiteral",
								"value": "pending"
							}
						]
					}
				},
				{
					"id": 2434,
					"name": "forAddress",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2435,
							"name": "forAddress",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract instance decoder for a given instance of a contract in this\nproject.  Unlike the other functions, this method doesn't require giving an\nartifact for the address itself; however, the address had better correspond to\na contract of a type given in the project info, or you'll get an exception."
							},
							"parameters": [
								{
									"id": 2436,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The address of the contract instance to decode.\n  If an invalid address is provided, this method will throw an exception."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2437,
									"name": "provider",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The Web3 provider object to use."
									},
									"type": {
										"type": "reference",
										"name": "Provider"
									}
								},
								{
									"id": 2438,
									"name": "projectInfo",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Information about the project being decoded, or just the\n  contracts relevant to the contract being decoded (e.g., by providing struct\n  or enum definitions, or even just appearing as a contract type).  This may\n  come in several forms. See the [[ProjectInfo]] documentation for more\n  information.  See the projectInfo parameter documentation on [[forProject]]\n  for more detail."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ProjectInfo",
												"id": 2393
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Artifact"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "reference",
										"name": "ContractInstanceDecoder",
										"id": 2093
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 415,
							"character": 32
						}
					]
				},
				{
					"id": 2401,
					"name": "forArtifact",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2402,
							"name": "forArtifact",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract decoder for a given contract artifact."
							},
							"parameters": [
								{
									"id": 2403,
									"name": "artifact",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The artifact for the contract.\n\n  A contract constructor object may be substituted for the artifact, so if\n  you're not sure which you're dealing with, it's OK."
									},
									"type": {
										"type": "reference",
										"name": "Artifact"
									}
								},
								{
									"id": 2404,
									"name": "provider",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The Web3 provider object to use."
									},
									"type": {
										"type": "reference",
										"name": "Provider"
									}
								},
								{
									"id": 2405,
									"name": "projectInfo",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "Information about the project being decoded, or just the\n  contracts relevant to the contract being decoded (e.g., by providing struct\n  or enum definitions, or even just appearing as a contract type).  This may\n  come in several forms; see the [[ProjectInfo]] documentation for more\n  information.\n\n  Alternatively, instead of a [[ProjectInfo]], one may simply pass a list of\n  artifacts.  Contract constructor objects may be substituted for artifacts,\n  so if you're not sure which you're dealing with, it's OK.\n\n  If this latter option is used, one may omit `artifact` itself from the\n  list of artifacts and only include the *other* relevant artifacts; note\n  that omission this is not allowed when passing a `ProjectInfo`.\n\n  If this parameter is omitted, it's treated as if one had passed `[]`."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ProjectInfo",
												"id": 2393
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Artifact"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "reference",
										"name": "ContractDecoder",
										"id": 2021
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 229,
							"character": 33
						}
					]
				},
				{
					"id": 2419,
					"name": "forArtifactAt",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2420,
							"name": "forArtifactAt",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract instance decoder for a contract instance at a given address."
							},
							"parameters": [
								{
									"id": 2421,
									"name": "artifact",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The artifact corresponding to the type of the contract.\n\n  A contract constructor object may be substituted for the artifact, so if\n  you're not sure which you're dealing with, it's OK."
									},
									"type": {
										"type": "reference",
										"name": "Artifact"
									}
								},
								{
									"id": 2422,
									"name": "provider",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The Web3 provider object to use."
									},
									"type": {
										"type": "reference",
										"name": "Provider"
									}
								},
								{
									"id": 2423,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The address of the contract instance to decode.\n\n  Address must either be checksummed, or in all one case to circumvent the checksum.\n  Mixed-case with bad checksum will cause this function to throw an exception."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2424,
									"name": "projectInfo",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "Information about the project being decoded, or just the\n  contracts relevant to the contract being decoded (e.g., by providing struct\n  or enum definitions, or even just appearing as a contract type).  This may\n  come in several forms. see the [[ProjectInfo]] documentation for more\n  information.  See the projectInfo parameter documentation on [[forArtifact]]\n  for more detail."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ProjectInfo",
												"id": 2393
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Artifact"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "reference",
										"name": "ContractInstanceDecoder",
										"id": 2093
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 335,
							"character": 35
						}
					]
				},
				{
					"id": 2406,
					"name": "forContract",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2407,
							"name": "forContract",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract decoder for a given contract."
							},
							"parameters": [
								{
									"id": 2408,
									"name": "contract",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The contract constructor object corresponding to the type of the contract."
									},
									"type": {
										"type": "reference",
										"name": "ContractConstructorObject"
									}
								},
								{
									"id": 2409,
									"name": "projectInfo",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "Information about the project being decoded, or just the\n  contracts relevant to the contract being decoded (e.g., by providing struct\n  or enum definitions, or even just appearing as a contract type).  This may\n  come in several forms. See the [[ProjectInfo]] documentation for more\n  information.  See the projectInfo parameter documentation on [[forArtifact]]\n  for more detail."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ProjectInfo",
												"id": 2393
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Artifact"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "reference",
										"name": "ContractDecoder",
										"id": 2021
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 254,
							"character": 33
						}
					]
				},
				{
					"id": 2425,
					"name": "forContractAt",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2426,
							"name": "forContractAt",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract instance decoder for a contract instance at a given address."
							},
							"parameters": [
								{
									"id": 2427,
									"name": "contract",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The contract constructor object corresponding to the type of the contract."
									},
									"type": {
										"type": "reference",
										"name": "ContractConstructorObject"
									}
								},
								{
									"id": 2428,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The address of the contract instance to decode.\n\n  Address must either be checksummed, or in all one case to circumvent the checksum.\n  Mixed-case with bad checksum will cause this function to throw an exception."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2429,
									"name": "projectInfo",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "Information about the project being decoded, or just the\n  contracts relevant to the contract being decoded (e.g., by providing struct\n  or enum definitions, or even just appearing as a contract type).  This may\n  come in several forms. see the [[ProjectInfo]] documentation for more\n  information.  See the projectInfo parameter documentation on [[forArtifact]]\n  for more detail."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ProjectInfo",
												"id": 2393
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Artifact"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "reference",
										"name": "ContractInstanceDecoder",
										"id": 2093
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 363,
							"character": 35
						}
					]
				},
				{
					"id": 2430,
					"name": "forContractInstance",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2431,
							"name": "forContractInstance",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract instance decoder for a given contract instance."
							},
							"parameters": [
								{
									"id": 2432,
									"name": "contract",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The contract abstraction object corresponding to the contract instance."
									},
									"type": {
										"type": "reference",
										"name": "ContractInstanceObject"
									}
								},
								{
									"id": 2433,
									"name": "projectInfo",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "Information about the project being decoded, or just the\n  contracts relevant to the contract being decoded (e.g., by providing struct\n  or enum definitions, or even just appearing as a contract type).  This may\n  come in several forms. see the [[ProjectInfo]] documentation for more\n  information.  See the projectInfo parameter documentation on [[forArtifact]]\n  for more detail."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ProjectInfo",
												"id": 2393
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Artifact"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "reference",
										"name": "ContractInstanceDecoder",
										"id": 2093
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 386,
							"character": 41
						}
					]
				},
				{
					"id": 2410,
					"name": "forDeployedArtifact",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2411,
							"name": "forDeployedArtifact",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract instance decoder for a deployed contract instance."
							},
							"parameters": [
								{
									"id": 2412,
									"name": "artifact",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The artifact corresponding to the type of the contract.\n\n  A contract constructor object may be substituted for the artifact, so if\n  you're not sure which you're dealing with, it's OK."
									},
									"type": {
										"type": "reference",
										"name": "Artifact"
									}
								},
								{
									"id": 2413,
									"name": "provider",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The Web3 provider object to use."
									},
									"type": {
										"type": "reference",
										"name": "Provider"
									}
								},
								{
									"id": 2414,
									"name": "projectInfo",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "Information about the project being decoded, or just the\n  contracts relevant to the contract being decoded (e.g., by providing struct\n  or enum definitions, or even just appearing as a contract type).  This may\n  come in several forms. see the [[ProjectInfo]] documentation for more\n  information.  See the projectInfo parameter documentation on [[forArtifact]]\n  for more detail."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ProjectInfo",
												"id": 2393
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Artifact"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "reference",
										"name": "ContractInstanceDecoder",
										"id": 2093
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 282,
							"character": 41
						}
					]
				},
				{
					"id": 2415,
					"name": "forDeployedContract",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2416,
							"name": "forDeployedContract",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract instance decoder for a deployed contract instance."
							},
							"parameters": [
								{
									"id": 2417,
									"name": "contract",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The contract constructor object corresponding to the type of the contract."
									},
									"type": {
										"type": "reference",
										"name": "ContractConstructorObject"
									}
								},
								{
									"id": 2418,
									"name": "projectInfo",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "Information about the project being decoded, or just the\n  contracts relevant to the contract being decoded (e.g., by providing struct\n  or enum definitions, or even just appearing as a contract type).  This may\n  come in several forms. see the [[ProjectInfo]] documentation for more\n  information.  See the projectInfo parameter documentation on [[forArtifact]]\n  for more detail."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ProjectInfo",
												"id": 2393
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Artifact"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "reference",
										"name": "ContractInstanceDecoder",
										"id": 2093
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 305,
							"character": 41
						}
					]
				},
				{
					"id": 2397,
					"name": "forProject",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2398,
							"name": "forProject",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a wire decoder for the project."
							},
							"parameters": [
								{
									"id": 2399,
									"name": "provider",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The Web3 provider object to use."
									},
									"type": {
										"type": "reference",
										"name": "Provider"
									}
								},
								{
									"id": 2400,
									"name": "projectInfo",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "Information about the project or contracts being decoded.\n  This may come in several forms; see the [[ProjectInfo]] documentation for\n  more information.\n\n  Alternatively, instead of a [[ProjectInfo]], one may simply pass a list of\n  artifacts.  Contract constructor objects may be substituted for artifacts,\n  so if you're not sure which you're dealing with, it's OK.  If this parameter\n  is omitted, it's treated as if one had passed `[]`."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ProjectInfo",
												"id": 2393
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Artifact"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "reference",
										"name": "WireDecoder",
										"id": 2188
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 195,
							"character": 32
						}
					]
				},
				{
					"id": 2439,
					"name": "infoToCompilations",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 2440,
							"name": "infoToCompilations",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"parameters": [
								{
									"id": 2441,
									"name": "info",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ProjectInfo",
												"id": 2393
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Artifact"
												}
											}
										]
									}
								},
								{
									"id": 2442,
									"name": "primaryArtifact",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "Artifact"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Compilation",
									"id": 1753
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 430,
							"character": 27
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						2305,
						2279,
						2021,
						2093,
						2290,
						2318,
						2336,
						2327,
						2188
					],
					"categories": [
						{
							"title": "Decoder",
							"children": [
								2021,
								2093,
								2188
							]
						},
						{
							"title": "Exception",
							"children": [
								2305,
								2279,
								2290,
								2318,
								2336,
								2327
							]
						}
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						2343,
						2353,
						2363,
						2383,
						2393,
						2368,
						2349,
						2371
					],
					"categories": [
						{
							"title": "Inputs",
							"children": [
								2363,
								2383,
								2393,
								2368,
								2371
							]
						},
						{
							"title": "Results",
							"children": [
								2343,
								2353,
								2349
							]
						}
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						2392
					],
					"categories": [
						{
							"title": "Inputs",
							"children": [
								2392
							]
						}
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						2434,
						2401,
						2419,
						2406,
						2425,
						2430,
						2410,
						2415,
						2397,
						2439
					],
					"categories": [
						{
							"title": "Provider-based Constructor",
							"children": [
								2434,
								2401,
								2419,
								2410,
								2397,
								2439
							]
						},
						{
							"title": "Truffle Contract-based Constructor",
							"children": [
								2406,
								2425,
								2430,
								2415
							]
						}
					]
				}
			],
			"sources": [
				{
					"fileName": "decoder/lib/index.ts",
					"line": 1,
					"character": 0
				}
			]
		}
	],
	"groups": [
		{
			"title": "External modules",
			"kind": 1,
			"children": [
				1,
				2020
			]
		}
	]
}