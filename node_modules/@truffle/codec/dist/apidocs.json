{
	"id": 0,
	"name": "@truffle/codec",
	"kind": 0,
	"flags": {},
	"children": [
		{
			"id": 1,
			"name": "@truffle/codec",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/home/sniffnoy/truffle/truffle/packages/codec/lib/index-typedoc.ts",
			"comment": {
				"shortText": "Usage:",
				"text": "```\nimport { ... } from \"@truffle/codec\";\n```\n"
			},
			"children": [
				{
					"id": 541,
					"name": "Decoders",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 542,
							"name": "ContractDecoder",
							"kind": 128,
							"kindString": "Class",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The ContractDecoder class.  Spawns the [[ContractInstanceDecoder]] class.\nAlso, decodes transactions and logs.  See below for a method listing."
							},
							"children": [
								{
									"id": 552,
									"name": "constructor",
									"kind": 512,
									"kindString": "Constructor",
									"flags": {
										"isPrivate": true,
										"isExported": true
									},
									"comment": {},
									"signatures": [
										{
											"id": 553,
											"name": "new ContractDecoder",
											"kind": 16384,
											"kindString": "Constructor signature",
											"flags": {
												"isPrivate": true
											},
											"comment": {},
											"parameters": [
												{
													"id": 554,
													"name": "contract",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "ContractObject"
													}
												},
												{
													"id": 555,
													"name": "wireDecoder",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "WireDecoder",
														"id": 672
													}
												},
												{
													"id": 556,
													"name": "address",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "ContractDecoder",
												"id": 542
											}
										}
									],
									"sources": [
										{
											"fileName": "interface/decoders/contract.ts",
											"line": 57,
											"character": 35
										}
									]
								},
								{
									"id": 549,
									"name": "allocations",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isPrivate": true,
										"isExported": true
									},
									"sources": [
										{
											"fileName": "interface/decoders/contract.ts",
											"line": 54,
											"character": 21
										}
									],
									"type": {
										"type": "reference",
										"name": "AllocationInfo"
									}
								},
								{
									"id": 548,
									"name": "contextHash",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isPrivate": true,
										"isExported": true
									},
									"sources": [
										{
											"fileName": "interface/decoders/contract.ts",
											"line": 52,
											"character": 21
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 544,
									"name": "contexts",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isPrivate": true,
										"isExported": true
									},
									"sources": [
										{
											"fileName": "interface/decoders/contract.ts",
											"line": 47,
											"character": 18
										}
									],
									"type": {
										"type": "reference",
										"name": "DecoderContexts"
									}
								},
								{
									"id": 545,
									"name": "contract",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isPrivate": true,
										"isExported": true
									},
									"sources": [
										{
											"fileName": "interface/decoders/contract.ts",
											"line": 49,
											"character": 18
										}
									],
									"type": {
										"type": "reference",
										"name": "ContractObject"
									}
								},
								{
									"id": 547,
									"name": "contractNetwork",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isPrivate": true,
										"isExported": true
									},
									"sources": [
										{
											"fileName": "interface/decoders/contract.ts",
											"line": 51,
											"character": 25
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 546,
									"name": "contractNode",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isPrivate": true,
										"isExported": true
									},
									"sources": [
										{
											"fileName": "interface/decoders/contract.ts",
											"line": 50,
											"character": 22
										}
									],
									"type": {
										"type": "reference",
										"name": "AstDefinition"
									}
								},
								{
									"id": 550,
									"name": "stateVariableReferences",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isPrivate": true,
										"isExported": true
									},
									"sources": [
										{
											"fileName": "interface/decoders/contract.ts",
											"line": 55,
											"character": 33
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "StorageMemberAllocation"
										}
									}
								},
								{
									"id": 543,
									"name": "web3",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isPrivate": true,
										"isExported": true
									},
									"sources": [
										{
											"fileName": "interface/decoders/contract.ts",
											"line": 45,
											"character": 14
										}
									],
									"type": {
										"type": "reference",
										"name": "Web3"
									}
								},
								{
									"id": 551,
									"name": "wireDecoder",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isPrivate": true,
										"isExported": true
									},
									"sources": [
										{
											"fileName": "interface/decoders/contract.ts",
											"line": 57,
											"character": 21
										}
									],
									"type": {
										"type": "reference",
										"name": "WireDecoder",
										"id": 672
									}
								},
								{
									"id": 574,
									"name": "abifyCalldataDecoding",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isPublic": true,
										"isExported": true
									},
									"signatures": [
										{
											"id": 575,
											"name": "abifyCalldataDecoding",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "See [[WireDecoder.abifyCalldataDecoding]]."
											},
											"parameters": [
												{
													"id": 576,
													"name": "decoding",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "CalldataDecoding",
														"id": 820
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "CalldataDecoding",
												"id": 820
											}
										}
									],
									"sources": [
										{
											"fileName": "interface/decoders/contract.ts",
											"line": 164,
											"character": 30
										}
									]
								},
								{
									"id": 577,
									"name": "abifyLogDecoding",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isPublic": true,
										"isExported": true
									},
									"signatures": [
										{
											"id": 578,
											"name": "abifyLogDecoding",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "See [[WireDecoder.abifyLogDecoding]]."
											},
											"parameters": [
												{
													"id": 579,
													"name": "decoding",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "LogDecoding",
														"id": 821
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "LogDecoding",
												"id": 821
											}
										}
									],
									"sources": [
										{
											"fileName": "interface/decoders/contract.ts",
											"line": 171,
											"character": 25
										}
									]
								},
								{
									"id": 565,
									"name": "decodeLog",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isPublic": true,
										"isExported": true
									},
									"signatures": [
										{
											"id": 566,
											"name": "decodeLog",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "See [[WireDecoder.decodeLog]]."
											},
											"parameters": [
												{
													"id": 567,
													"name": "log",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "The log to be decoded.\n"
													},
													"type": {
														"type": "reference",
														"name": "Log"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Promise",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecodedLog",
														"id": 801
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "interface/decoders/contract.ts",
											"line": 139,
											"character": 24
										}
									]
								},
								{
									"id": 568,
									"name": "decodeLogs",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isPublic": true,
										"isExported": true
									},
									"signatures": [
										{
											"id": 569,
											"name": "decodeLogs",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "See [[WireDecoder.decodeLogs]]."
											},
											"parameters": [
												{
													"id": 570,
													"name": "logs",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "The logs to be decoded.\n"
													},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "Log"
														}
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Promise",
												"typeArguments": [
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "DecodedLog",
															"id": 801
														}
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "interface/decoders/contract.ts",
											"line": 147,
											"character": 25
										}
									]
								},
								{
									"id": 562,
									"name": "decodeTransaction",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isPublic": true,
										"isExported": true
									},
									"signatures": [
										{
											"id": 563,
											"name": "decodeTransaction",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "See [[WireDecoder.decodeTransaction]]."
											},
											"parameters": [
												{
													"id": 564,
													"name": "transaction",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "The transaction to be decoded.\n"
													},
													"type": {
														"type": "reference",
														"name": "Transaction"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Promise",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecodedTransaction",
														"id": 785
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "interface/decoders/contract.ts",
											"line": 129,
											"character": 32
										}
									]
								},
								{
									"id": 571,
									"name": "events",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isPublic": true,
										"isExported": true
									},
									"signatures": [
										{
											"id": 572,
											"name": "events",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "See [[WireDecoder.events]]."
											},
											"parameters": [
												{
													"id": 573,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "Used to determine what events to fetch; see the documentation on the EventOptions type for more.\n"
													},
													"type": {
														"type": "reference",
														"name": "EventOptions",
														"id": 811
													},
													"defaultValue": " {}"
												}
											],
											"type": {
												"type": "reference",
												"name": "Promise",
												"typeArguments": [
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "DecodedLog",
															"id": 801
														}
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "interface/decoders/contract.ts",
											"line": 155,
											"character": 21
										}
									]
								},
								{
									"id": 559,
									"name": "forInstance",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isPublic": true,
										"isExported": true
									},
									"signatures": [
										{
											"id": 560,
											"name": "forInstance",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Constructs a contract instance decoder for a given instance of this contract."
											},
											"parameters": [
												{
													"id": 561,
													"name": "address",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "The address of the contract instance decode.  If left out, it will be autodetected.\n"
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Promise",
												"typeArguments": [
													{
														"type": "reference",
														"name": "ContractInstanceDecoder",
														"id": 588
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "interface/decoders/contract.ts",
											"line": 119,
											"character": 26
										}
									]
								}
							],
							"groups": [
								{
									"title": "Constructors",
									"kind": 512,
									"children": [
										552
									]
								},
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										549,
										548,
										544,
										545,
										547,
										546,
										550,
										543,
										551
									]
								},
								{
									"title": "Methods",
									"kind": 2048,
									"children": [
										574,
										577,
										565,
										568,
										562,
										571,
										559
									]
								}
							],
							"sources": [
								{
									"fileName": "interface/decoders/contract.ts",
									"line": 44,
									"character": 36
								}
							]
						},
						{
							"id": 588,
							"name": "ContractInstanceDecoder",
							"kind": 128,
							"kindString": "Class",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The ContractInstanceDecoder class.  Decodes storage for a specified\ninstance.  Also, decodes transactions and logs.  See below for a method\nlisting.",
								"text": "Note that when using this class to decode transactions and logs, it does\nhave one advantage over using the WireDecoder or ContractDecoder.  If the\nartifact for the class does not have a deployedBytecode field, the\nWireDecoder (and therefore also the ContractDecoder) will not be able to\ntell that this instance is of that class, and so will fail to decode\ntransactions sent to it or logs originating from it.  However, the\nContractInstanceDecoder has that information and will make use of it, making\nit possible for it to decode transactions sent to this instance, or logs\noriginating from it, even if the deployedBytecode field is misssing.\n"
							},
							"children": [
								{
									"id": 606,
									"name": "constructor",
									"kind": 512,
									"kindString": "Constructor",
									"flags": {
										"isPrivate": true,
										"isExported": true
									},
									"comment": {},
									"signatures": [
										{
											"id": 607,
											"name": "new ContractInstanceDecoder",
											"kind": 16384,
											"kindString": "Constructor signature",
											"flags": {
												"isPrivate": true
											},
											"comment": {},
											"parameters": [
												{
													"id": 608,
													"name": "contractDecoder",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "ContractDecoder",
														"id": 542
													}
												},
												{
													"id": 609,
													"name": "address",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "ContractInstanceDecoder",
												"id": 588
											}
										}
									],
									"sources": [
										{
											"fileName": "interface/decoders/contract.ts",
											"line": 257,
											"character": 35
										}
									]
								},
								{
									"id": 597,
									"name": "additionalContexts",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isPrivate": true,
										"isExported": true
									},
									"sources": [
										{
											"fileName": "interface/decoders/contract.ts",
											"line": 244,
											"character": 28
										}
									],
									"type": {
										"type": "reference",
										"name": "DecoderContexts"
									}
								},
								{
									"id": 600,
									"name": "allocations",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isPrivate": true,
										"isExported": true
									},
									"sources": [
										{
											"fileName": "interface/decoders/contract.ts",
											"line": 248,
											"character": 21
										}
									],
									"type": {
										"type": "reference",
										"name": "AllocationInfo"
									}
								},
								{
									"id": 595,
									"name": "contextHash",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isPrivate": true,
										"isExported": true
									},
									"sources": [
										{
											"fileName": "interface/decoders/contract.ts",
											"line": 241,
											"character": 21
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 596,
									"name": "contexts",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isPrivate": true,
										"isExported": true
									},
									"sources": [
										{
											"fileName": "interface/decoders/contract.ts",
											"line": 243,
											"character": 18
										}
									],
									"type": {
										"type": "reference",
										"name": "DecoderContexts"
									}
								},
								{
									"id": 590,
									"name": "contract",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isPrivate": true,
										"isExported": true
									},
									"sources": [
										{
											"fileName": "interface/decoders/contract.ts",
											"line": 236,
											"character": 18
										}
									],
									"type": {
										"type": "reference",
										"name": "ContractObject"
									}
								},
								{
									"id": 593,
									"name": "contractAddress",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isPrivate": true,
										"isExported": true
									},
									"sources": [
										{
											"fileName": "interface/decoders/contract.ts",
											"line": 239,
											"character": 25
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 594,
									"name": "contractCode",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isPrivate": true,
										"isExported": true
									},
									"sources": [
										{
											"fileName": "interface/decoders/contract.ts",
											"line": 240,
											"character": 22
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 604,
									"name": "contractDecoder",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isPrivate": true,
										"isExported": true
									},
									"sources": [
										{
											"fileName": "interface/decoders/contract.ts",
											"line": 256,
											"character": 25
										}
									],
									"type": {
										"type": "reference",
										"name": "ContractDecoder",
										"id": 542
									}
								},
								{
									"id": 592,
									"name": "contractNetwork",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isPrivate": true,
										"isExported": true
									},
									"sources": [
										{
											"fileName": "interface/decoders/contract.ts",
											"line": 238,
											"character": 25
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 591,
									"name": "contractNode",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isPrivate": true,
										"isExported": true
									},
									"sources": [
										{
											"fileName": "interface/decoders/contract.ts",
											"line": 237,
											"character": 22
										}
									],
									"type": {
										"type": "reference",
										"name": "AstDefinition"
									}
								},
								{
									"id": 602,
									"name": "mappingKeys",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isPrivate": true,
										"isExported": true
									},
									"sources": [
										{
											"fileName": "interface/decoders/contract.ts",
											"line": 252,
											"character": 21
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Slot"
										}
									},
									"defaultValue": " []"
								},
								{
									"id": 598,
									"name": "referenceDeclarations",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isPrivate": true,
										"isExported": true
									},
									"sources": [
										{
											"fileName": "interface/decoders/contract.ts",
											"line": 246,
											"character": 31
										}
									],
									"type": {
										"type": "reference",
										"name": "AstReferences"
									}
								},
								{
									"id": 601,
									"name": "stateVariableReferences",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isPrivate": true,
										"isExported": true
									},
									"sources": [
										{
											"fileName": "interface/decoders/contract.ts",
											"line": 250,
											"character": 33
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "StorageMemberAllocation"
										}
									}
								},
								{
									"id": 603,
									"name": "storageCache",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isPrivate": true,
										"isExported": true
									},
									"sources": [
										{
											"fileName": "interface/decoders/contract.ts",
											"line": 254,
											"character": 22
										}
									],
									"type": {
										"type": "reference",
										"name": "StorageCache"
									}
								},
								{
									"id": 599,
									"name": "userDefinedTypes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isPrivate": true,
										"isExported": true
									},
									"sources": [
										{
											"fileName": "interface/decoders/contract.ts",
											"line": 247,
											"character": 26
										}
									],
									"type": {
										"type": "reference",
										"name": "TypesById",
										"id": 158
									}
								},
								{
									"id": 589,
									"name": "web3",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isPrivate": true,
										"isExported": true
									},
									"sources": [
										{
											"fileName": "interface/decoders/contract.ts",
											"line": 234,
											"character": 14
										}
									],
									"type": {
										"type": "reference",
										"name": "Web3"
									}
								},
								{
									"id": 605,
									"name": "wireDecoder",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isPrivate": true,
										"isExported": true
									},
									"sources": [
										{
											"fileName": "interface/decoders/contract.ts",
											"line": 257,
											"character": 21
										}
									],
									"type": {
										"type": "reference",
										"name": "WireDecoder",
										"id": 672
									}
								},
								{
									"id": 612,
									"name": "context",
									"kind": 262144,
									"kindString": "Accessor",
									"flags": {
										"isPrivate": true,
										"isExported": true
									},
									"getSignature": [
										{
											"id": 613,
											"name": "__get",
											"kind": 524288,
											"kindString": "Get signature",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "DecoderContext"
											}
										}
									],
									"sources": [
										{
											"fileName": "interface/decoders/contract.ts",
											"line": 330,
											"character": 21
										}
									]
								},
								{
									"id": 659,
									"name": "abifyCalldataDecoding",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isPublic": true,
										"isExported": true
									},
									"signatures": [
										{
											"id": 660,
											"name": "abifyCalldataDecoding",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "See [[WireDecoder.abifyCalldataDecoding]]."
											},
											"parameters": [
												{
													"id": 661,
													"name": "decoding",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "CalldataDecoding",
														"id": 820
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "CalldataDecoding",
												"id": 820
											}
										}
									],
									"sources": [
										{
											"fileName": "interface/decoders/contract.ts",
											"line": 691,
											"character": 30
										}
									]
								},
								{
									"id": 662,
									"name": "abifyLogDecoding",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isPublic": true,
										"isExported": true
									},
									"signatures": [
										{
											"id": 663,
											"name": "abifyLogDecoding",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "See [[WireDecoder.abifyLogDecoding]]."
											},
											"parameters": [
												{
													"id": 664,
													"name": "decoding",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "LogDecoding",
														"id": 821
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "LogDecoding",
												"id": 821
											}
										}
									],
									"sources": [
										{
											"fileName": "interface/decoders/contract.ts",
											"line": 698,
											"character": 25
										}
									]
								},
								{
									"id": 614,
									"name": "checkAllocationSuccess",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isPrivate": true,
										"isExported": true
									},
									"signatures": [
										{
											"id": 615,
											"name": "checkAllocationSuccess",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									],
									"sources": [
										{
											"fileName": "interface/decoders/contract.ts",
											"line": 334,
											"character": 32
										}
									]
								},
								{
									"id": 668,
									"name": "constructSlot",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isPrivate": true,
										"isExported": true
									},
									"signatures": [
										{
											"id": 669,
											"name": "constructSlot",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 670,
													"name": "variable",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "intrinsic",
																"name": "string"
															}
														]
													}
												},
												{
													"id": 671,
													"name": "indices",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isRest": true
													},
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											],
											"type": {
												"type": "tuple",
												"elements": [
													{
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Slot"
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													},
													{
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "AstDefinition"
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "interface/decoders/contract.ts",
											"line": 728,
											"character": 23
										}
									]
								},
								{
									"id": 653,
									"name": "decodeLog",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isPublic": true,
										"isExported": true
									},
									"signatures": [
										{
											"id": 654,
											"name": "decodeLog",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "See [[WireDecoder.decodeLog]]."
											},
											"parameters": [
												{
													"id": 655,
													"name": "log",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Log"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Promise",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecodedLog",
														"id": 801
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "interface/decoders/contract.ts",
											"line": 677,
											"character": 24
										}
									]
								},
								{
									"id": 656,
									"name": "decodeLogs",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isPublic": true,
										"isExported": true
									},
									"signatures": [
										{
											"id": 657,
											"name": "decodeLogs",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "See [[WireDecoder.decodeLogs]]."
											},
											"parameters": [
												{
													"id": 658,
													"name": "logs",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "Log"
														}
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Promise",
												"typeArguments": [
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "DecodedLog",
															"id": 801
														}
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "interface/decoders/contract.ts",
											"line": 684,
											"character": 25
										}
									]
								},
								{
									"id": 650,
									"name": "decodeTransaction",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isPublic": true,
										"isExported": true
									},
									"signatures": [
										{
											"id": 651,
											"name": "decodeTransaction",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "See [[WireDecoder.decodeTransaction]]."
											},
											"parameters": [
												{
													"id": 652,
													"name": "transaction",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Transaction"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Promise",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecodedTransaction",
														"id": 785
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "interface/decoders/contract.ts",
											"line": 665,
											"character": 32
										}
									]
								},
								{
									"id": 616,
									"name": "decodeVariable",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isPrivate": true,
										"isExported": true
									},
									"signatures": [
										{
											"id": 617,
											"name": "decodeVariable",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 618,
													"name": "variable",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "StorageMemberAllocation"
													}
												},
												{
													"id": 619,
													"name": "block",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Promise",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecodedVariable",
														"id": 781
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "interface/decoders/contract.ts",
											"line": 346,
											"character": 30
										}
									]
								},
								{
									"id": 665,
									"name": "events",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isPublic": true,
										"isExported": true
									},
									"signatures": [
										{
											"id": 666,
											"name": "events",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "This mostly behaves as [[WireDecoder.events]].\nHowever, unlike other variants of this function, this one, by default, restricts to events originating from this instance's address.\nIf you don't want to restrict like that, you can explicitly use `address: undefined` in the options to disable this.\n(You can also of course set a different address to restrict to that.)"
											},
											"parameters": [
												{
													"id": 667,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "Used to determine what events to fetch; see the documentation on the [[EventOptions]] type for more.\n"
													},
													"type": {
														"type": "reference",
														"name": "EventOptions",
														"id": 811
													},
													"defaultValue": " {}"
												}
											],
											"type": {
												"type": "reference",
												"name": "Promise",
												"typeArguments": [
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "DecodedLog",
															"id": 801
														}
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "interface/decoders/contract.ts",
											"line": 709,
											"character": 21
										}
									]
								},
								{
									"id": 630,
									"name": "findVariableByNameOrId",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isPrivate": true,
										"isExported": true
									},
									"signatures": [
										{
											"id": 631,
											"name": "findVariableByNameOrId",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 632,
													"name": "nameOrId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "StorageMemberAllocation"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "interface/decoders/contract.ts",
											"line": 491,
											"character": 32
										}
									]
								},
								{
									"id": 638,
									"name": "getCode",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isPrivate": true,
										"isExported": true
									},
									"signatures": [
										{
											"id": 639,
											"name": "getCode",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 640,
													"name": "address",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 641,
													"name": "block",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Promise",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "interface/decoders/contract.ts",
											"line": 550,
											"character": 23
										}
									]
								},
								{
									"id": 633,
									"name": "getStorage",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isPrivate": true,
										"isExported": true
									},
									"signatures": [
										{
											"id": 634,
											"name": "getStorage",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 635,
													"name": "address",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 636,
													"name": "slot",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "BN"
													}
												},
												{
													"id": 637,
													"name": "block",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Promise",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "interface/decoders/contract.ts",
											"line": 525,
											"character": 26
										}
									]
								},
								{
									"id": 620,
									"name": "state",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isPublic": true,
										"isExported": true
									},
									"signatures": [
										{
											"id": 621,
											"name": "state",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Returns information about the state of the contract, but does not include\ninformation about the storage or decoded variables.  See the documentation\nfor the [[ContractState]] type for more."
											},
											"parameters": [
												{
													"id": 622,
													"name": "block",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "The block to inspect the contract's state at.  Defaults to latest.\n"
													},
													"type": {
														"type": "reference",
														"name": "BlockType"
													},
													"defaultValue": "\"latest\""
												}
											],
											"type": {
												"type": "reference",
												"name": "Promise",
												"typeArguments": [
													{
														"type": "reference",
														"name": "ContractState",
														"id": 776
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "interface/decoders/contract.ts",
											"line": 396,
											"character": 20
										}
									]
								},
								{
									"id": 646,
									"name": "unwatchMappingKey",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isPublic": true,
										"isExported": true
									},
									"signatures": [
										{
											"id": 647,
											"name": "unwatchMappingKey",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Opposite of [[watchMappingKey]]; unwatches the specified mapping key.  See\nwatchMappingKey for more on how watching mapping keys works, and on how\nthe parameters work.",
												"text": "Note that unwatching a mapping key will also unwatch all its descendants.\nE.g., if `m` is of type `mapping(uint => mapping(uint => uint))`, then\nunwatching `m[0]` will also unwatch `m[0][0]`, `m[0][1]`, etc, if these\nare currently watched.\n\nThis function has the same caveats as watchMappingKey.\n"
											},
											"parameters": [
												{
													"id": 648,
													"name": "variable",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "intrinsic",
																"name": "string"
															}
														]
													}
												},
												{
													"id": 649,
													"name": "indices",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isRest": true
													},
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									],
									"sources": [
										{
											"fileName": "interface/decoders/contract.ts",
											"line": 641,
											"character": 26
										}
									]
								},
								{
									"id": 626,
									"name": "variable",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isPublic": true,
										"isExported": true
									},
									"signatures": [
										{
											"id": 627,
											"name": "variable",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Decodes an individual contract variable; returns its value as a\n[[Format.Values.Result|Result]].  See the documentation for\n[[variables|variables()]] for various caveats that also apply here.",
												"text": "If the variable can't be located, returns undefined.  In the future this\nwill probably throw an exception instead.",
												"tags": [
													{
														"tag": "example",
														"text": "Consider a contract `Derived` inheriting from a contract `Base`.\n  Suppose `Derived` has a variable `x` and `Base` has variables `x` and\n  `y`.  One can access `Derived.x` as `variable(\"x\")` or\n  `variable(\"Derived.x\")`, can access `Base.x` as `variable(\"Base.x\")`,\n  and can access `Base.y` as `variable(\"y\")` or `variable(\"Base.y\")`.\n"
													}
												]
											},
											"parameters": [
												{
													"id": 628,
													"name": "nameOrId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "The name (or numeric ID, if you know that) of the\n  variable.  Can be given as a qualified name, allowing one to get at\n  shadowed variables from base contracts.  If given by ID, can be given as a\n  number or numeric string."
													},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												},
												{
													"id": 629,
													"name": "block",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "The block to inspect the contract's variables at.  Defaults\n  to latest."
													},
													"type": {
														"type": "reference",
														"name": "BlockType"
													},
													"defaultValue": "\"latest\""
												}
											],
											"type": {
												"type": "reference",
												"name": "Promise",
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Values.Result",
																"id": 230
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "interface/decoders/contract.ts",
											"line": 470,
											"character": 23
										}
									]
								},
								{
									"id": 623,
									"name": "variables",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isPublic": true,
										"isExported": true
									},
									"signatures": [
										{
											"id": 624,
											"name": "variables",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Decodes the contract's variables; returns an array of these decoded variables.\nSee the documentation of the [[DecodedVariable]] type for more.",
												"text": "Note that variable decoding can only operate in full mode; if the decoder wasn't able to\nstart up in full mode, this method will throw an exception.\n\nNote that decoding mappings requires first watching mapping keys in order to get any results;\nsee the documentation for [[watchMappingKey]].\nAdditional methods to make mapping decoding a less manual affair are planned for the future.\n\nAlso, due to a technical limitation, it is not currently possible to\nusefully decode internal function pointers.  See the\n[[Format.Values.FunctionInternalValue|FunctionInternalValue]]\ndocumentation and the README for more on how these are handled."
											},
											"parameters": [
												{
													"id": 625,
													"name": "block",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "The block to inspect the contract's variables at.  Defaults to latest.\n"
													},
													"type": {
														"type": "reference",
														"name": "BlockType"
													},
													"defaultValue": "\"latest\""
												}
											],
											"type": {
												"type": "reference",
												"name": "Promise",
												"typeArguments": [
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "DecodedVariable",
															"id": 781
														}
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "interface/decoders/contract.ts",
											"line": 428,
											"character": 24
										}
									]
								},
								{
									"id": 642,
									"name": "watchMappingKey",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isPublic": true,
										"isExported": true
									},
									"signatures": [
										{
											"id": 643,
											"name": "watchMappingKey",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Watches a mapping key; adds it to the decoder's list of watched mapping\nkeys.  This affects the results of both [[variables|variables()]] and\n[[variable|variable()]].  When a mapping is decoded, only the values at\nits watched keys will be included in its value.",
												"text": "Note that it is possible\nto watch mappings that are inside structs, arrays, other mappings, etc;\nsee below for more on how to do this.\n\nNote that watching mapping keys is\nonly possible in full mode; if the decoder wasn't able to start up in full\nmode, this method will throw an exception.\n\nWarning: At the moment, this\nfunction does very little to check its input.  Bad input may have\nunpredictable results.  This will be remedied in the future (by having it\nthrow exceptions on bad input), but right now essentially no checking is\nimplemented.  Also, there may be slight changes to the format of indices\nin the future.",
												"tags": [
													{
														"tag": "example",
														"text": "First, a simple example.  Say we have a mapping `m` of type\n  `mapping(uint => uint)`.  You could call `watchMappingKey(\"m\", 0)` to\n  watch `m[0]`."
													},
													{
														"tag": "example",
														"text": "Now for a slightly more complicated example.  Say `m` is of type\n  `mapping(uint => mapping(uint => uint))`, then to watch `m[3][5]`, you\n  can call `watchMappingKey(\"m\", 3, 5)`.  This will also automatically\n  watch `m[3]`; otherwise, watching `m[3][5]` wouldn't do much of\n  anything."
													},
													{
														"tag": "example",
														"text": "Now for a well more complicated example.  Say we have a struct\n  type `MapStruct` with a member called `map` which is a `mapping(string => string)`,\n  and say we have a variable `arr` of type `MapStruct[]`, then one could\n  watch `arr[3].map[\"hello\"]` by calling `watchMappingKey(\"arr\", 3, \"map\", \"hello\")`.\n"
													}
												]
											},
											"parameters": [
												{
													"id": 644,
													"name": "variable",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "The variable that the mapping lives under; this works like\n  the nameOrId argument to [[variable|variable()]].  If the mapping is a\n  top-level state variable, put the mapping itself here.  Otherwise, put the\n  top-level state variable it lives under."
													},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "intrinsic",
																"name": "string"
															}
														]
													}
												},
												{
													"id": 645,
													"name": "indices",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isRest": true
													},
													"comment": {
														"text": "Further arguments to watchMappingKey, if given, will be\n  interpreted as indices into or members of the variable identified by the\n  variable argument; see the example.  Array indices and mapping\n  keys are specified by value; struct members are specified by name or (if\n  you know it) numeric ID.\n\n  Numeric values can be given as number, BN, or\n  numeric string.  Bytestring values are given as hex strings.  Boolean\n  values are given as booleans, or as the strings \"true\" or \"false\".\n  Address values are given as hex strings; they are currently not required\n  to be in checksum case, but this will likely change in the future, so\n  don't rely on that.\n\n  Note that if the path to a given mapping key\n  includes mapping keys above it, any ancestors will also be watched\n  automatically."
													},
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									],
									"sources": [
										{
											"fileName": "interface/decoders/contract.ts",
											"line": 607,
											"character": 24
										}
									]
								}
							],
							"groups": [
								{
									"title": "Constructors",
									"kind": 512,
									"children": [
										606
									]
								},
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										597,
										600,
										595,
										596,
										590,
										593,
										594,
										604,
										592,
										591,
										602,
										598,
										601,
										603,
										599,
										589,
										605
									]
								},
								{
									"title": "Accessors",
									"kind": 262144,
									"children": [
										612
									]
								},
								{
									"title": "Methods",
									"kind": 2048,
									"children": [
										659,
										662,
										614,
										668,
										653,
										656,
										650,
										616,
										665,
										630,
										638,
										633,
										620,
										646,
										626,
										623,
										642
									]
								}
							],
							"sources": [
								{
									"fileName": "interface/decoders/contract.ts",
									"line": 233,
									"character": 36
								}
							]
						},
						{
							"id": 672,
							"name": "WireDecoder",
							"kind": 128,
							"kindString": "Class",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The WireDecoder class.  Decodes transactions and logs.  See below for a method listing."
							},
							"children": [
								{
									"id": 683,
									"name": "constructor",
									"kind": 512,
									"kindString": "Constructor",
									"flags": {
										"isPrivate": true,
										"isExported": true
									},
									"comment": {},
									"signatures": [
										{
											"id": 684,
											"name": "new WireDecoder",
											"kind": 16384,
											"kindString": "Constructor signature",
											"flags": {
												"isPrivate": true
											},
											"comment": {},
											"parameters": [
												{
													"id": 685,
													"name": "contracts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "ContractObject"
														}
													}
												},
												{
													"id": 686,
													"name": "provider",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Provider"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "WireDecoder",
												"id": 672
											}
										}
									],
									"sources": [
										{
											"fileName": "interface/decoders/wire.ts",
											"line": 56,
											"character": 49
										}
									]
								},
								{
									"id": 681,
									"name": "allocations",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isPrivate": true,
										"isExported": true
									},
									"sources": [
										{
											"fileName": "interface/decoders/wire.ts",
											"line": 54,
											"character": 21
										}
									],
									"type": {
										"type": "reference",
										"name": "AllocationInfo"
									}
								},
								{
									"id": 682,
									"name": "codeCache",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isPrivate": true,
										"isExported": true
									},
									"sources": [
										{
											"fileName": "interface/decoders/wire.ts",
											"line": 56,
											"character": 19
										}
									],
									"type": {
										"type": "reference",
										"name": "CodeCache"
									}
								},
								{
									"id": 677,
									"name": "contexts",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isPrivate": true,
										"isExported": true
									},
									"sources": [
										{
											"fileName": "interface/decoders/wire.ts",
											"line": 49,
											"character": 18
										}
									],
									"type": {
										"type": "reference",
										"name": "DecoderContexts"
									}
								},
								{
									"id": 676,
									"name": "contractNodes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isPrivate": true,
										"isExported": true
									},
									"sources": [
										{
											"fileName": "interface/decoders/wire.ts",
											"line": 48,
											"character": 23
										}
									],
									"type": {
										"type": "reference",
										"name": "AstReferences"
									}
								},
								{
									"id": 675,
									"name": "contracts",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isPrivate": true,
										"isExported": true
									},
									"sources": [
										{
											"fileName": "interface/decoders/wire.ts",
											"line": 47,
											"character": 19
										}
									],
									"type": {
										"type": "reference",
										"name": "ContractMapping"
									}
								},
								{
									"id": 678,
									"name": "deployedContexts",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isPrivate": true,
										"isExported": true
									},
									"sources": [
										{
											"fileName": "interface/decoders/wire.ts",
											"line": 50,
											"character": 26
										}
									],
									"type": {
										"type": "reference",
										"name": "DecoderContexts"
									}
								},
								{
									"id": 674,
									"name": "network",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isPrivate": true,
										"isExported": true
									},
									"sources": [
										{
											"fileName": "interface/decoders/wire.ts",
											"line": 45,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 679,
									"name": "referenceDeclarations",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isPrivate": true,
										"isExported": true
									},
									"sources": [
										{
											"fileName": "interface/decoders/wire.ts",
											"line": 52,
											"character": 31
										}
									],
									"type": {
										"type": "reference",
										"name": "AstReferences"
									}
								},
								{
									"id": 680,
									"name": "userDefinedTypes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isPrivate": true,
										"isExported": true
									},
									"sources": [
										{
											"fileName": "interface/decoders/wire.ts",
											"line": 53,
											"character": 26
										}
									],
									"type": {
										"type": "reference",
										"name": "TypesById",
										"id": 158
									}
								},
								{
									"id": 673,
									"name": "web3",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isPrivate": true,
										"isExported": true
									},
									"sources": [
										{
											"fileName": "interface/decoders/wire.ts",
											"line": 43,
											"character": 14
										}
									],
									"type": {
										"type": "reference",
										"name": "Web3"
									}
								},
								{
									"id": 714,
									"name": "abifyCalldataDecoding",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isPublic": true,
										"isExported": true
									},
									"signatures": [
										{
											"id": 715,
											"name": "abifyCalldataDecoding",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Takes a [[CalldataDecoding]], which may have been produced in full mode or ABI mode,\nand converts it to its ABI mode equivalent.  See the README for more information.",
												"text": "Please only use on decodings produced by this same decoder instance; use\non decodings produced by other instances may not work consistently."
											},
											"parameters": [
												{
													"id": 716,
													"name": "decoding",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "The decoding to abify\n"
													},
													"type": {
														"type": "reference",
														"name": "CalldataDecoding",
														"id": 820
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "CalldataDecoding",
												"id": 820
											}
										}
									],
									"sources": [
										{
											"fileName": "interface/decoders/wire.ts",
											"line": 381,
											"character": 30
										}
									]
								},
								{
									"id": 717,
									"name": "abifyLogDecoding",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isPublic": true,
										"isExported": true
									},
									"signatures": [
										{
											"id": 718,
											"name": "abifyLogDecoding",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Takes a [[LogDecoding]], which may have been produced in full mode or ABI mode,\nand converts it to its ABI mode equivalent.  See the README for more information.",
												"text": "Please only use on decodings produced by this same decoder instance; use\non decodings produced by other instances may not work consistently."
											},
											"parameters": [
												{
													"id": 719,
													"name": "decoding",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "The decoding to abify\n"
													},
													"type": {
														"type": "reference",
														"name": "LogDecoding",
														"id": 821
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "LogDecoding",
												"id": 821
											}
										}
									],
									"sources": [
										{
											"fileName": "interface/decoders/wire.ts",
											"line": 393,
											"character": 25
										}
									]
								},
								{
									"id": 687,
									"name": "collectUserDefinedTypes",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isPrivate": true,
										"isExported": true
									},
									"signatures": [
										{
											"id": 688,
											"name": "collectUserDefinedTypes",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 689,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 690,
															"name": "definitions",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "interface/decoders/wire.ts",
																	"line": 159,
																	"character": 15
																}
															],
															"type": {
																"type": "reference",
																"name": "AstReferences"
															}
														},
														{
															"id": 691,
															"name": "types",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "interface/decoders/wire.ts",
																	"line": 160,
																	"character": 9
																}
															],
															"type": {
																"type": "reference",
																"name": "TypesById",
																"id": 158
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																690,
																691
															]
														}
													],
													"sources": [
														{
															"fileName": "interface/decoders/wire.ts",
															"line": 158,
															"character": 36
														}
													]
												}
											}
										}
									],
									"sources": [
										{
											"fileName": "interface/decoders/wire.ts",
											"line": 158,
											"character": 33
										}
									]
								},
								{
									"id": 700,
									"name": "decodeLog",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isPublic": true,
										"isExported": true
									},
									"signatures": [
										{
											"id": 701,
											"name": "decodeLog",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Takes a Web3\n[Log](https://web3js.readthedocs.io/en/v1.2.1/web3-eth.html#eth-getpastlogs-return)\nobject and returns a copy of that object but with an additional decodings\nfield.  This field holds an array of [[LogDecoding|LogDecodings]]; see the\ndocumentation on [[DecodedLog]] for more."
											},
											"parameters": [
												{
													"id": 702,
													"name": "log",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "The log to be decoded."
													},
													"type": {
														"type": "reference",
														"name": "Log"
													}
												},
												{
													"id": 703,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "Meant for internal use; please don't use this."
													},
													"type": {
														"type": "reference",
														"name": "EventOptions",
														"id": 811
													},
													"defaultValue": " {}"
												},
												{
													"id": 704,
													"name": "additionalContexts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "For internal use only; please don't use this.\n"
													},
													"type": {
														"type": "reference",
														"name": "DecoderContexts"
													},
													"defaultValue": " {}"
												}
											],
											"type": {
												"type": "reference",
												"name": "Promise",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecodedLog",
														"id": 801
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "interface/decoders/wire.ts",
											"line": 281,
											"character": 24
										}
									]
								},
								{
									"id": 705,
									"name": "decodeLogs",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isPublic": true,
										"isExported": true
									},
									"signatures": [
										{
											"id": 706,
											"name": "decodeLogs",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Similar to [[decodeLog]], but operates on an array of logs and decodes them all."
											},
											"parameters": [
												{
													"id": 707,
													"name": "logs",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "The logs to be decoded."
													},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "Log"
														}
													}
												},
												{
													"id": 708,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "Meant for internal use; please don't use this."
													},
													"type": {
														"type": "reference",
														"name": "EventOptions",
														"id": 811
													},
													"defaultValue": " {}"
												},
												{
													"id": 709,
													"name": "additionalContexts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "For internal use only; please don't use this.\n"
													},
													"type": {
														"type": "reference",
														"name": "DecoderContexts"
													},
													"defaultValue": " {}"
												}
											],
											"type": {
												"type": "reference",
												"name": "Promise",
												"typeArguments": [
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "DecodedLog",
															"id": 801
														}
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "interface/decoders/wire.ts",
											"line": 328,
											"character": 25
										}
									]
								},
								{
									"id": 696,
									"name": "decodeTransaction",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isPublic": true,
										"isExported": true
									},
									"signatures": [
										{
											"id": 697,
											"name": "decodeTransaction",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Takes a Web3\n[Transaction](https://web3js.readthedocs.io/en/v1.2.1/web3-eth.html#eth-gettransaction-return)\nobject and returns a copy of that object but with an additional decoding\nfield.  This field holds a [[CalldataDecoding]]; see the documentation on\n[[DecodedTransaction]] for more.",
												"text": "Note that decoding of transactions sent to libraries is presently not\nsupported and may have unreliable results.  Limited support for this is\nplanned for future versions."
											},
											"parameters": [
												{
													"id": 698,
													"name": "transaction",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "The transaction to be decoded."
													},
													"type": {
														"type": "reference",
														"name": "Transaction"
													}
												},
												{
													"id": 699,
													"name": "additionalContexts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "For internal use only; please don't use this.\n"
													},
													"type": {
														"type": "reference",
														"name": "DecoderContexts"
													},
													"defaultValue": " {}"
												}
											],
											"type": {
												"type": "reference",
												"name": "Promise",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecodedTransaction",
														"id": 785
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "interface/decoders/wire.ts",
											"line": 224,
											"character": 32
										}
									]
								},
								{
									"id": 710,
									"name": "events",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isPublic": true,
										"isExported": true
									},
									"signatures": [
										{
											"id": 711,
											"name": "events",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Gets all events meeting certain conditions and decodes them.\nThis function is fairly rudimentary at the moment but more functionality\nwill be added in the future.",
												"tags": [
													{
														"tag": "example",
														"text": "`events({name: \"TestEvent\"})` -- get events named \"TestEvent\"\n  from the most recent block\n"
													}
												]
											},
											"parameters": [
												{
													"id": 712,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "Used to determine what events to fetch; see the documentation\n  on the [[EventOptions]] type for more."
													},
													"type": {
														"type": "reference",
														"name": "EventOptions",
														"id": 811
													},
													"defaultValue": " {}"
												},
												{
													"id": 713,
													"name": "additionalContexts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "For internal use only; please don't use this."
													},
													"type": {
														"type": "reference",
														"name": "DecoderContexts"
													},
													"defaultValue": " {}"
												}
											],
											"type": {
												"type": "reference",
												"name": "Promise",
												"typeArguments": [
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "DecodedLog",
															"id": 801
														}
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "interface/decoders/wire.ts",
											"line": 348,
											"character": 21
										}
									]
								},
								{
									"id": 720,
									"name": "getContextByAddress",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isPrivate": true,
										"isExported": true
									},
									"signatures": [
										{
											"id": 721,
											"name": "getContextByAddress",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 722,
													"name": "address",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 723,
													"name": "block",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 724,
													"name": "constructorBinary",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 725,
													"name": "additionalContexts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderContexts"
													},
													"defaultValue": " {}"
												}
											],
											"type": {
												"type": "reference",
												"name": "Promise",
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "DecoderContext"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "interface/decoders/wire.ts",
											"line": 401,
											"character": 35
										}
									]
								}
							],
							"groups": [
								{
									"title": "Constructors",
									"kind": 512,
									"children": [
										683
									]
								},
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										681,
										682,
										677,
										676,
										675,
										678,
										674,
										679,
										680,
										673
									]
								},
								{
									"title": "Methods",
									"kind": 2048,
									"children": [
										714,
										717,
										687,
										700,
										705,
										696,
										710,
										720
									]
								}
							],
							"sources": [
								{
									"fileName": "interface/decoders/wire.ts",
									"line": 42,
									"character": 32
								}
							]
						}
					],
					"groups": [
						{
							"title": "Classes",
							"kind": 128,
							"children": [
								542,
								588,
								672
							]
						}
					],
					"sources": [
						{
							"fileName": "interface/index.ts",
							"line": 6,
							"character": 8
						}
					]
				},
				{
					"id": 736,
					"name": "Errors",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 746,
							"name": "ContractAllocationFailedError",
							"kind": 128,
							"kindString": "Class",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "This error indicates that something went wrong while attempting to determine the location\nof this contract's state variables.  This error will be thrown if you attempt to use\ndecoding functions after something went wrong during setup.  Unfortunately, we can't\nalways avoid this at the moment; we're hoping to make this more robust in the future\nwith Truffle DB.  In the meantime, it is at least worth noting that you should not encounter\nthis error if your entire project was written in Solidity and all compiled at once.  Sorry."
							},
							"children": [
								{
									"id": 749,
									"name": "constructor",
									"kind": 512,
									"kindString": "Constructor",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 750,
											"name": "new ContractAllocationFailedError",
											"kind": 16384,
											"kindString": "Constructor signature",
											"flags": {},
											"parameters": [
												{
													"id": 751,
													"name": "id",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 752,
													"name": "contractName",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "ContractAllocationFailedError",
												"id": 746
											}
										}
									],
									"sources": [
										{
											"fileName": "interface/errors.ts",
											"line": 25,
											"character": 30
										}
									]
								},
								{
									"id": 748,
									"name": "contractName",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isPublic": true,
										"isExported": true
									},
									"sources": [
										{
											"fileName": "interface/errors.ts",
											"line": 25,
											"character": 21
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 747,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isPublic": true,
										"isExported": true
									},
									"sources": [
										{
											"fileName": "interface/errors.ts",
											"line": 24,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 754,
									"name": "message",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
											"line": 974,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Error.message"
									}
								},
								{
									"id": 753,
									"name": "name",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
											"line": 973,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Error.name"
									}
								},
								{
									"id": 755,
									"name": "stack",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
											"line": 975,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Error.stack"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Error.stack"
									}
								},
								{
									"id": 756,
									"name": "Error",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isStatic": true,
										"isExported": true
									},
									"sources": [
										{
											"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
											"line": 984,
											"character": 17
										}
									],
									"type": {
										"type": "reference",
										"name": "ErrorConstructor"
									}
								}
							],
							"groups": [
								{
									"title": "Constructors",
									"kind": 512,
									"children": [
										749
									]
								},
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										748,
										747,
										754,
										753,
										755,
										756
									]
								}
							],
							"sources": [
								{
									"fileName": "interface/errors.ts",
									"line": 23,
									"character": 42
								}
							],
							"extendedTypes": [
								{
									"type": "reference",
									"name": "Error"
								}
							]
						},
						{
							"id": 737,
							"name": "ContractBeingDecodedHasNoNodeError",
							"kind": 128,
							"kindString": "Class",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "This error indicates that the contract you are attempting to decode does not have AST\ninformation associated with it, or that the decoder cannot find it.  This error will\nbe thrown if you attempt to use functions that require AST information with such a contract."
							},
							"children": [
								{
									"id": 739,
									"name": "constructor",
									"kind": 512,
									"kindString": "Constructor",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 740,
											"name": "new ContractBeingDecodedHasNoNodeError",
											"kind": 16384,
											"kindString": "Constructor signature",
											"flags": {},
											"parameters": [
												{
													"id": 741,
													"name": "contractName",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "ContractBeingDecodedHasNoNodeError",
												"id": 737
											}
										}
									],
									"sources": [
										{
											"fileName": "interface/errors.ts",
											"line": 7,
											"character": 30
										}
									]
								},
								{
									"id": 738,
									"name": "contractName",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isPublic": true,
										"isExported": true
									},
									"sources": [
										{
											"fileName": "interface/errors.ts",
											"line": 7,
											"character": 21
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 743,
									"name": "message",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
											"line": 974,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Error.message"
									}
								},
								{
									"id": 742,
									"name": "name",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
											"line": 973,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Error.name"
									}
								},
								{
									"id": 744,
									"name": "stack",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
											"line": 975,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Error.stack"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Error.stack"
									}
								},
								{
									"id": 745,
									"name": "Error",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isStatic": true,
										"isExported": true
									},
									"sources": [
										{
											"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
											"line": 984,
											"character": 17
										}
									],
									"type": {
										"type": "reference",
										"name": "ErrorConstructor"
									}
								}
							],
							"groups": [
								{
									"title": "Constructors",
									"kind": 512,
									"children": [
										739
									]
								},
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										738,
										743,
										742,
										744,
										745
									]
								}
							],
							"sources": [
								{
									"fileName": "interface/errors.ts",
									"line": 6,
									"character": 47
								}
							],
							"extendedTypes": [
								{
									"type": "reference",
									"name": "Error"
								}
							]
						}
					],
					"groups": [
						{
							"title": "Classes",
							"kind": 128,
							"children": [
								746,
								737
							]
						}
					],
					"sources": [
						{
							"fileName": "interface/index.ts",
							"line": 9,
							"character": 8
						}
					]
				},
				{
					"id": 2,
					"name": "Format",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 348,
							"name": "Errors",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 391,
									"name": "AddressErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 394,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 146,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 501
													},
													{
														"type": "reference",
														"name": "AddressError",
														"id": 395
													}
												]
											}
										},
										{
											"id": 393,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 145,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 392,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 144,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.AddressType",
												"id": 28
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												394,
												393,
												392
											]
										}
									],
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 143,
											"character": 35
										}
									]
								},
								{
									"id": 396,
									"name": "AddressPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 398,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 156,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "AddressPaddingError"
											}
										},
										{
											"id": 397,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex string; no checksum"
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 155,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												398,
												397
											]
										}
									],
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 151,
											"character": 36
										}
									]
								},
								{
									"id": 420,
									"name": "ArrayErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 423,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 209,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 501
													},
													{
														"type": "reference",
														"name": "ArrayError",
														"id": 424
													}
												]
											}
										},
										{
											"id": 422,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 208,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 421,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 207,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.ArrayType",
												"id": 51
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												423,
												422,
												421
											]
										}
									],
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 206,
											"character": 33
										}
									]
								},
								{
									"id": 370,
									"name": "BoolErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 373,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 106,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 501
													},
													{
														"type": "reference",
														"name": "BoolError",
														"id": 374
													}
												]
											}
										},
										{
											"id": 372,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 105,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 371,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 104,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "BoolType",
												"id": 14
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												373,
												372,
												371
											]
										}
									],
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 103,
											"character": 32
										}
									]
								},
								{
									"id": 375,
									"name": "BoolOutOfRangeError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 377,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 113,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "BoolOutOfRangeError"
											}
										},
										{
											"id": 376,
											"name": "rawAsBN",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 112,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"name": "BN"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												377,
												376
											]
										}
									],
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 111,
											"character": 36
										}
									]
								},
								{
									"id": 386,
									"name": "BytesDynamicErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 389,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 137,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 501
													},
													{
														"type": "reference",
														"name": "BytesDynamicError",
														"id": 390
													}
												]
											}
										},
										{
											"id": 388,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 136,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 387,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 135,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "BytesTypeDynamic",
												"id": 23
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												389,
												388,
												387
											]
										}
									],
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 134,
											"character": 40
										}
									]
								},
								{
									"id": 383,
									"name": "BytesPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 385,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 130,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "BytesPaddingError"
											}
										},
										{
											"id": 384,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 129,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												385,
												384
											]
										}
									],
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 125,
											"character": 34
										}
									]
								},
								{
									"id": 378,
									"name": "BytesStaticErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 381,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 120,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 501
													},
													{
														"type": "reference",
														"name": "BytesStaticError",
														"id": 382
													}
												]
											}
										},
										{
											"id": 380,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 119,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 379,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 118,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "BytesTypeStatic",
												"id": 18
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												381,
												380,
												379
											]
										}
									],
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 117,
											"character": 39
										}
									]
								},
								{
									"id": 458,
									"name": "ContractErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 461,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 284,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 501
													},
													{
														"type": "reference",
														"name": "ContractError",
														"id": 462
													}
												]
											}
										},
										{
											"id": 460,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 283,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 459,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 282,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.ContractType",
												"id": 135
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												461,
												460,
												459
											]
										}
									],
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 281,
											"character": 36
										}
									]
								},
								{
									"id": 463,
									"name": "ContractPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 465,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 294,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "ContractPaddingError"
											}
										},
										{
											"id": 464,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 293,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												465,
												464
											]
										}
									],
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 289,
											"character": 37
										}
									]
								},
								{
									"id": 491,
									"name": "DeployedFunctionInConstructorError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Indicates that this is a deployed-style pointer,\ndespite the fact that you're in a constructor"
									},
									"children": [
										{
											"id": 495,
											"name": "constructorProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 383,
													"character": 27
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 493,
											"name": "context",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 381,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.ContractType",
												"id": 135
											}
										},
										{
											"id": 494,
											"name": "deployedProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 382,
													"character": 24
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 492,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 380,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "DeployedFunctionInConstructorError"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												495,
												493,
												494,
												492
											]
										}
									],
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 379,
											"character": 51
										}
									]
								},
								{
									"id": 445,
									"name": "EnumErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 448,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 259,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 501
													},
													{
														"type": "reference",
														"name": "EnumError",
														"id": 449
													}
												]
											}
										},
										{
											"id": 447,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 258,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 446,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 257,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.EnumType",
												"id": 120
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												448,
												447,
												446
											]
										}
									],
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 256,
											"character": 32
										}
									]
								},
								{
									"id": 454,
									"name": "EnumNotFoundDecodingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 455,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 271,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "EnumNotFoundDecodingError"
											}
										},
										{
											"id": 457,
											"name": "rawAsBN",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 273,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"name": "BN"
											}
										},
										{
											"id": 456,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 272,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.EnumType",
												"id": 120
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												455,
												457,
												456
											]
										}
									],
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 270,
											"character": 42
										}
									]
								},
								{
									"id": 450,
									"name": "EnumOutOfRangeError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 451,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 265,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "EnumOutOfRangeError"
											}
										},
										{
											"id": 453,
											"name": "rawAsBN",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 267,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"name": "BN"
											}
										},
										{
											"id": 452,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 266,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.EnumType",
												"id": 120
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												451,
												453,
												452
											]
										}
									],
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 264,
											"character": 36
										}
									]
								},
								{
									"id": 404,
									"name": "FixedErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 407,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 172,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 501
													},
													{
														"type": "reference",
														"name": "FixedError",
														"id": 412
													}
												]
											}
										},
										{
											"id": 406,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 171,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 405,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 170,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "FixedType",
												"id": 41
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												407,
												406,
												405
											]
										}
									],
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 169,
											"character": 33
										}
									]
								},
								{
									"id": 413,
									"name": "FixedPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 415,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 187,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "FixedPaddingError"
											}
										},
										{
											"id": 414,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 186,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												415,
												414
											]
										}
									],
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 182,
											"character": 34
										}
									]
								},
								{
									"id": 466,
									"name": "FunctionExternalErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 469,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 305,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 501
													},
													{
														"type": "reference",
														"name": "FunctionExternalError",
														"id": 470
													}
												]
											}
										},
										{
											"id": 468,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 304,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 467,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 303,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.FunctionExternalType",
												"id": 78
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												469,
												468,
												467
											]
										}
									],
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 302,
											"character": 44
										}
									]
								},
								{
									"id": 471,
									"name": "FunctionExternalNonStackPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "This error kind represents a padding error for an external function pointer located anywhere other than the stack."
									},
									"children": [
										{
											"id": 473,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 320,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "FunctionExternalNonStackPaddingError"
											}
										},
										{
											"id": 472,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 319,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												473,
												472
											]
										}
									],
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 315,
											"character": 53
										}
									]
								},
								{
									"id": 474,
									"name": "FunctionExternalStackPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "This error kind represents a padding error for external function pointer located on the stack."
									},
									"children": [
										{
											"id": 477,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 335,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "FunctionExternalStackPaddingError"
											}
										},
										{
											"id": 475,
											"name": "rawAddress",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex string (no checksum; also a full word long)"
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 330,
													"character": 12
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 476,
											"name": "rawSelector",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex string (but a full word long)"
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 334,
													"character": 13
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												477,
												475,
												476
											]
										}
									],
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 326,
											"character": 50
										}
									]
								},
								{
									"id": 478,
									"name": "FunctionInternalErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 481,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 346,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 501
													},
													{
														"type": "reference",
														"name": "FunctionInternalError",
														"id": 482
													}
												]
											}
										},
										{
											"id": 480,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 345,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 479,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 344,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "FunctionInternalType",
												"id": 72
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												481,
												480,
												479
											]
										}
									],
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 343,
											"character": 44
										}
									]
								},
								{
									"id": 483,
									"name": "FunctionInternalPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 485,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 360,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "FunctionInternalPaddingError"
											}
										},
										{
											"id": 484,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 359,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												485,
												484
											]
										}
									],
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 355,
											"character": 45
										}
									]
								},
								{
									"id": 505,
									"name": "IndexedReferenceTypeError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Used when decoding an indexed parameter of reference type.  These can't meaningfully\nbe decoded, so instead they decode to an error, sorry."
									},
									"children": [
										{
											"id": 506,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 421,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "IndexedReferenceTypeError"
											}
										},
										{
											"id": 508,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 426,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 507,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 422,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.ReferenceType",
												"id": 157
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												506,
												508,
												507
											]
										}
									],
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 420,
											"character": 42
										}
									]
								},
								{
									"id": 362,
									"name": "IntErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 365,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 89,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 501
													},
													{
														"type": "reference",
														"name": "IntError",
														"id": 366
													}
												]
											}
										},
										{
											"id": 364,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 88,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 363,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 87,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "IntType",
												"id": 10
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												365,
												364,
												363
											]
										}
									],
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 86,
											"character": 31
										}
									]
								},
								{
									"id": 367,
									"name": "IntPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 369,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 99,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "IntPaddingError"
											}
										},
										{
											"id": 368,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 98,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												369,
												368
											]
										}
									],
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 94,
											"character": 32
										}
									]
								},
								{
									"id": 538,
									"name": "InternalFunctionInABIError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 539,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 485,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "InternalFunctionInABIError"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												539
											]
										}
									],
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 484,
											"character": 43
										}
									]
								},
								{
									"id": 440,
									"name": "MagicErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 443,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 245,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 501
													},
													{
														"type": "reference",
														"name": "MagicError",
														"id": 444
													}
												]
											}
										},
										{
											"id": 442,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 244,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 441,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 243,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "MagicType",
												"id": 150
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												443,
												442,
												441
											]
										}
									],
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 242,
											"character": 33
										}
									]
								},
								{
									"id": 496,
									"name": "MalformedInternalFunctionError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Used when the deployed PC is zero but the constructor PC\nis nonzero"
									},
									"children": [
										{
											"id": 500,
											"name": "constructorProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 394,
													"character": 27
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 498,
											"name": "context",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 392,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.ContractType",
												"id": 135
											}
										},
										{
											"id": 499,
											"name": "deployedProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 393,
													"character": 24
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 497,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 391,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "MalformedInternalFunctionError"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												500,
												498,
												499,
												497
											]
										}
									],
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 390,
											"character": 47
										}
									]
								},
								{
									"id": 425,
									"name": "MappingErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 428,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 218,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 501
													},
													{
														"type": "reference",
														"name": "MappingError",
														"id": 429
													}
												]
											}
										},
										{
											"id": 427,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 217,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 426,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 216,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "MappingType",
												"id": 66
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												428,
												427,
												426
											]
										}
									],
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 215,
											"character": 35
										}
									]
								},
								{
									"id": 486,
									"name": "NoSuchInternalFunctionError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Indicates that the function pointer being decoded\nfails to point to a valid function, and also is not one of the\ndefault values"
									},
									"children": [
										{
											"id": 490,
											"name": "constructorProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 372,
													"character": 27
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 488,
											"name": "context",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 370,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.ContractType",
												"id": 135
											}
										},
										{
											"id": 489,
											"name": "deployedProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 371,
													"character": 24
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 487,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 369,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "NoSuchInternalFunctionError"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												490,
												488,
												489,
												487
											]
										}
									],
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 368,
											"character": 44
										}
									]
								},
								{
									"id": 530,
									"name": "OverlargePointersNotImplementedError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 531,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 465,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "OverlargePointersNotImplementedError"
											}
										},
										{
											"id": 532,
											"name": "pointerAsBN",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 466,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"name": "BN"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												531,
												532
											]
										}
									],
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 464,
											"character": 53
										}
									]
								},
								{
									"id": 534,
									"name": "OverlongArrayOrStringStrictModeError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 537,
											"name": "dataLength",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 480,
													"character": 12
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 535,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 478,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "OverlongArrayOrStringStrictModeError"
											}
										},
										{
											"id": 536,
											"name": "lengthAsBN",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 479,
													"character": 12
												}
											],
											"type": {
												"type": "reference",
												"name": "BN"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												537,
												535,
												536
											]
										}
									],
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 477,
											"character": 53
										}
									]
								},
								{
									"id": 526,
									"name": "OverlongArraysAndStringsNotImplementedError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 529,
											"name": "dataLength",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 461,
													"character": 12
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 527,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 459,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "OverlongArraysAndStringsNotImplementedError"
											}
										},
										{
											"id": 528,
											"name": "lengthAsBN",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 460,
													"character": 12
												}
											],
											"type": {
												"type": "reference",
												"name": "BN"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												529,
												527,
												528
											]
										}
									],
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 458,
											"character": 60
										}
									]
								},
								{
									"id": 519,
									"name": "ReadErrorBytes",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 520,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 448,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "ReadErrorBytes"
											}
										},
										{
											"id": 522,
											"name": "length",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 450,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 521,
											"name": "start",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 449,
													"character": 7
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												520,
												522,
												521
											]
										}
									],
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 447,
											"character": 31
										}
									]
								},
								{
									"id": 515,
									"name": "ReadErrorStack",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 517,
											"name": "from",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 443,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 516,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 442,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "ReadErrorStack"
											}
										},
										{
											"id": 518,
											"name": "to",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 444,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												517,
												516,
												518
											]
										}
									],
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 441,
											"character": 31
										}
									]
								},
								{
									"id": 523,
									"name": "ReadErrorStorage",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 524,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 454,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "ReadErrorStorage"
											}
										},
										{
											"id": 525,
											"name": "range",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 455,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"name": "Range"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												524,
												525
											]
										}
									],
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 453,
											"character": 33
										}
									]
								},
								{
									"id": 399,
									"name": "StringErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 402,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 163,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 501
													},
													{
														"type": "reference",
														"name": "StringError",
														"id": 403
													}
												]
											}
										},
										{
											"id": 401,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 162,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 400,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 161,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "StringType",
												"id": 37
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												402,
												401,
												400
											]
										}
									],
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 160,
											"character": 34
										}
									]
								},
								{
									"id": 430,
									"name": "StructErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 433,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 227,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 501
													},
													{
														"type": "reference",
														"name": "StructError",
														"id": 434
													}
												]
											}
										},
										{
											"id": 432,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 226,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 431,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 225,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.StructType",
												"id": 93
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												433,
												432,
												431
											]
										}
									],
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 224,
											"character": 34
										}
									]
								},
								{
									"id": 435,
									"name": "TupleErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 438,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 236,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 501
													},
													{
														"type": "reference",
														"name": "TupleError",
														"id": 439
													}
												]
											}
										},
										{
											"id": 437,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 235,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 436,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 234,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "TupleType",
												"id": 116
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												438,
												437,
												436
											]
										}
									],
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 233,
											"character": 33
										}
									]
								},
								{
									"id": 408,
									"name": "UfixedErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 411,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 177,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 501
													},
													{
														"type": "reference",
														"name": "UfixedError",
														"id": 416
													}
												]
											}
										},
										{
											"id": 410,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 176,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 409,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 175,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "UfixedType",
												"id": 46
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												411,
												410,
												409
											]
										}
									],
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 174,
											"character": 34
										}
									]
								},
								{
									"id": 417,
									"name": "UfixedPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 419,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 197,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "UfixedPaddingError"
											}
										},
										{
											"id": 418,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 196,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												419,
												418
											]
										}
									],
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 192,
											"character": 35
										}
									]
								},
								{
									"id": 354,
									"name": "UintErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 357,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 72,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 501
													},
													{
														"type": "reference",
														"name": "UintError",
														"id": 358
													}
												]
											}
										},
										{
											"id": 356,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 71,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 355,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 70,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "UintType",
												"id": 6
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												357,
												356,
												355
											]
										}
									],
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 69,
											"character": 32
										}
									]
								},
								{
									"id": 359,
									"name": "UintPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 361,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 82,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "UintPaddingError"
											}
										},
										{
											"id": 360,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 81,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												361,
												360
											]
										}
									],
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 77,
											"character": 33
										}
									]
								},
								{
									"id": 512,
									"name": "UnsupportedConstantError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 514,
											"name": "definition",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 438,
													"character": 12
												}
											],
											"type": {
												"type": "reference",
												"name": "AstDefinition"
											}
										},
										{
											"id": 513,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 437,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "UnsupportedConstantError"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												514,
												513
											]
										}
									],
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 436,
											"character": 41
										}
									]
								},
								{
									"id": 509,
									"name": "UserDefinedTypeNotFoundError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 510,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 431,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "UserDefinedTypeNotFoundError"
											}
										},
										{
											"id": 511,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/errors.ts",
													"line": 432,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.UserDefinedType",
												"id": 92
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												510,
												511
											]
										}
									],
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 430,
											"character": 45
										}
									]
								},
								{
									"id": 395,
									"name": "AddressError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 149,
											"character": 24
										}
									],
									"type": {
										"type": "reference",
										"name": "AddressPaddingError",
										"id": 396
									}
								},
								{
									"id": 424,
									"name": "ArrayError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 212,
											"character": 22
										}
									],
									"type": {
										"type": "reference",
										"name": "DynamicDataImplementationError",
										"id": 503
									}
								},
								{
									"id": 374,
									"name": "BoolError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 109,
											"character": 21
										}
									],
									"type": {
										"type": "reference",
										"name": "BoolOutOfRangeError",
										"id": 375
									}
								},
								{
									"id": 390,
									"name": "BytesDynamicError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 140,
											"character": 29
										}
									],
									"type": {
										"type": "reference",
										"name": "DynamicDataImplementationError",
										"id": 503
									}
								},
								{
									"id": 353,
									"name": "BytesErrorResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 66,
											"character": 28
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "BytesStaticErrorResult",
												"id": 378
											},
											{
												"type": "reference",
												"name": "BytesDynamicErrorResult",
												"id": 386
											}
										]
									}
								},
								{
									"id": 382,
									"name": "BytesStaticError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 123,
											"character": 28
										}
									],
									"type": {
										"type": "reference",
										"name": "BytesPaddingError",
										"id": 383
									}
								},
								{
									"id": 462,
									"name": "ContractError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 287,
											"character": 25
										}
									],
									"type": {
										"type": "reference",
										"name": "ContractPaddingError",
										"id": 463
									}
								},
								{
									"id": 351,
									"name": "DecoderError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 31,
											"character": 24
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "GenericError",
												"id": 501
											},
											{
												"type": "reference",
												"name": "UintError",
												"id": 358
											},
											{
												"type": "reference",
												"name": "IntError",
												"id": 366
											},
											{
												"type": "reference",
												"name": "BoolError",
												"id": 374
											},
											{
												"type": "reference",
												"name": "BytesStaticError",
												"id": 382
											},
											{
												"type": "reference",
												"name": "BytesDynamicError",
												"id": 390
											},
											{
												"type": "reference",
												"name": "AddressError",
												"id": 395
											},
											{
												"type": "reference",
												"name": "StringError",
												"id": 403
											},
											{
												"type": "reference",
												"name": "FixedError",
												"id": 412
											},
											{
												"type": "reference",
												"name": "UfixedError",
												"id": 416
											},
											{
												"type": "reference",
												"name": "ArrayError",
												"id": 424
											},
											{
												"type": "reference",
												"name": "MappingError",
												"id": 429
											},
											{
												"type": "reference",
												"name": "StructError",
												"id": 434
											},
											{
												"type": "reference",
												"name": "MagicError",
												"id": 444
											},
											{
												"type": "reference",
												"name": "TupleError",
												"id": 439
											},
											{
												"type": "reference",
												"name": "EnumError",
												"id": 449
											},
											{
												"type": "reference",
												"name": "ContractError",
												"id": 462
											},
											{
												"type": "reference",
												"name": "FunctionExternalError",
												"id": 470
											},
											{
												"type": "reference",
												"name": "FunctionInternalError",
												"id": 482
											},
											{
												"type": "reference",
												"name": "InternalUseError",
												"id": 533
											}
										]
									}
								},
								{
									"id": 503,
									"name": "DynamicDataImplementationError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 410,
											"character": 42
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "OverlongArraysAndStringsNotImplementedError",
												"id": 526
											},
											{
												"type": "reference",
												"name": "OverlargePointersNotImplementedError",
												"id": 530
											}
										]
									}
								},
								{
									"id": 352,
									"name": "ElementaryErrorResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 57,
											"character": 33
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "UintErrorResult",
												"id": 354
											},
											{
												"type": "reference",
												"name": "IntErrorResult",
												"id": 362
											},
											{
												"type": "reference",
												"name": "BoolErrorResult",
												"id": 370
											},
											{
												"type": "reference",
												"name": "BytesErrorResult",
												"id": 353
											},
											{
												"type": "reference",
												"name": "AddressErrorResult",
												"id": 391
											},
											{
												"type": "reference",
												"name": "StringErrorResult",
												"id": 399
											},
											{
												"type": "reference",
												"name": "FixedErrorResult",
												"id": 404
											},
											{
												"type": "reference",
												"name": "UfixedErrorResult",
												"id": 408
											}
										]
									}
								},
								{
									"id": 449,
									"name": "EnumError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 262,
											"character": 21
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "EnumOutOfRangeError",
												"id": 450
											},
											{
												"type": "reference",
												"name": "EnumNotFoundDecodingError",
												"id": 454
											}
										]
									}
								},
								{
									"id": 504,
									"name": "ErrorForThrowing",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 414,
											"character": 28
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "UserDefinedTypeNotFoundError",
												"id": 509
											},
											{
												"type": "reference",
												"name": "ReadError",
												"id": 502
											}
										]
									}
								},
								{
									"id": 350,
									"name": "ErrorResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 19,
											"character": 23
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ElementaryErrorResult",
												"id": 352
											},
											{
												"type": "reference",
												"name": "ArrayErrorResult",
												"id": 420
											},
											{
												"type": "reference",
												"name": "MappingErrorResult",
												"id": 425
											},
											{
												"type": "reference",
												"name": "StructErrorResult",
												"id": 430
											},
											{
												"type": "reference",
												"name": "MagicErrorResult",
												"id": 440
											},
											{
												"type": "reference",
												"name": "TupleErrorResult",
												"id": 435
											},
											{
												"type": "reference",
												"name": "EnumErrorResult",
												"id": 445
											},
											{
												"type": "reference",
												"name": "ContractErrorResult",
												"id": 458
											},
											{
												"type": "reference",
												"name": "FunctionExternalErrorResult",
												"id": 466
											},
											{
												"type": "reference",
												"name": "FunctionInternalErrorResult",
												"id": 478
											}
										]
									}
								},
								{
									"id": 412,
									"name": "FixedError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 180,
											"character": 22
										}
									],
									"type": {
										"type": "reference",
										"name": "FixedPaddingError",
										"id": 413
									}
								},
								{
									"id": 470,
									"name": "FunctionExternalError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 308,
											"character": 33
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "FunctionExternalNonStackPaddingError",
												"id": 471
											},
											{
												"type": "reference",
												"name": "FunctionExternalStackPaddingError",
												"id": 474
											}
										]
									}
								},
								{
									"id": 482,
									"name": "FunctionInternalError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 349,
											"character": 33
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "FunctionInternalPaddingError",
												"id": 483
											},
											{
												"type": "reference",
												"name": "NoSuchInternalFunctionError",
												"id": 486
											},
											{
												"type": "reference",
												"name": "DeployedFunctionInConstructorError",
												"id": 491
											},
											{
												"type": "reference",
												"name": "MalformedInternalFunctionError",
												"id": 496
											}
										]
									}
								},
								{
									"id": 501,
									"name": "GenericError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 401,
											"character": 24
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "UserDefinedTypeNotFoundError",
												"id": 509
											},
											{
												"type": "reference",
												"name": "IndexedReferenceTypeError",
												"id": 505
											},
											{
												"type": "reference",
												"name": "ReadError",
												"id": 502
											}
										]
									}
								},
								{
									"id": 366,
									"name": "IntError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 92,
											"character": 20
										}
									],
									"type": {
										"type": "reference",
										"name": "IntPaddingError",
										"id": 367
									}
								},
								{
									"id": 533,
									"name": "InternalUseError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 473,
											"character": 28
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "OverlongArrayOrStringStrictModeError",
												"id": 534
											},
											{
												"type": "reference",
												"name": "InternalFunctionInABIError",
												"id": 538
											}
										]
									}
								},
								{
									"id": 444,
									"name": "MagicError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 248,
											"character": 22
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "never"
									}
								},
								{
									"id": 429,
									"name": "MappingError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 221,
											"character": 24
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "never"
									}
								},
								{
									"id": 502,
									"name": "ReadError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 405,
											"character": 21
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "UnsupportedConstantError",
												"id": 512
											},
											{
												"type": "reference",
												"name": "ReadErrorStack",
												"id": 515
											},
											{
												"type": "reference",
												"name": "ReadErrorBytes",
												"id": 519
											},
											{
												"type": "reference",
												"name": "ReadErrorStorage",
												"id": 523
											}
										]
									}
								},
								{
									"id": 403,
									"name": "StringError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 166,
											"character": 23
										}
									],
									"type": {
										"type": "reference",
										"name": "DynamicDataImplementationError",
										"id": 503
									}
								},
								{
									"id": 434,
									"name": "StructError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 230,
											"character": 23
										}
									],
									"type": {
										"type": "reference",
										"name": "DynamicDataImplementationError",
										"id": 503
									}
								},
								{
									"id": 439,
									"name": "TupleError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 239,
											"character": 22
										}
									],
									"type": {
										"type": "reference",
										"name": "DynamicDataImplementationError",
										"id": 503
									}
								},
								{
									"id": 416,
									"name": "UfixedError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 190,
											"character": 23
										}
									],
									"type": {
										"type": "reference",
										"name": "UfixedPaddingError",
										"id": 417
									}
								},
								{
									"id": 358,
									"name": "UintError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 75,
											"character": 21
										}
									],
									"type": {
										"type": "reference",
										"name": "UintPaddingError",
										"id": 359
									}
								},
								{
									"id": 349,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "format/errors.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:format:errors\")"
								}
							],
							"groups": [
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										391,
										396,
										420,
										370,
										375,
										386,
										383,
										378,
										458,
										463,
										491,
										445,
										454,
										450,
										404,
										413,
										466,
										471,
										474,
										478,
										483,
										505,
										362,
										367,
										538,
										440,
										496,
										425,
										486,
										530,
										534,
										526,
										519,
										515,
										523,
										399,
										430,
										435,
										408,
										417,
										354,
										359,
										512,
										509
									]
								},
								{
									"title": "Type aliases",
									"kind": 4194304,
									"children": [
										395,
										424,
										374,
										390,
										353,
										382,
										462,
										351,
										503,
										352,
										449,
										504,
										350,
										412,
										470,
										482,
										501,
										366,
										533,
										444,
										429,
										502,
										403,
										434,
										439,
										416,
										358
									]
								},
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										349
									]
								}
							],
							"sources": [
								{
									"fileName": "format/index.ts",
									"line": 17,
									"character": 23
								}
							]
						},
						{
							"id": 3,
							"name": "Types",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 33,
									"name": "AddressTypeGeneral",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 35,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 67,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "general"
											}
										},
										{
											"id": 34,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 66,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "address"
											}
										},
										{
											"id": 36,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 68,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												35,
												34,
												36
											]
										}
									],
									"sources": [
										{
											"fileName": "format/types.ts",
											"line": 65,
											"character": 35
										}
									]
								},
								{
									"id": 29,
									"name": "AddressTypeSpecific",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 31,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 61,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "specific"
											}
										},
										{
											"id": 32,
											"name": "payable",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 62,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 30,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 60,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "address"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												31,
												32,
												30
											]
										}
									],
									"sources": [
										{
											"fileName": "format/types.ts",
											"line": 59,
											"character": 36
										}
									]
								},
								{
									"id": 59,
									"name": "ArrayTypeDynamic",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 62,
											"name": "baseType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 105,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "Type",
												"id": 5
											}
										},
										{
											"id": 61,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 104,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "dynamic"
											}
										},
										{
											"id": 63,
											"name": "location",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 106,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "Ast.Location"
											}
										},
										{
											"id": 60,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 103,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "array"
											}
										},
										{
											"id": 64,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 107,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												62,
												61,
												63,
												60,
												64
											]
										}
									],
									"sources": [
										{
											"fileName": "format/types.ts",
											"line": 102,
											"character": 33
										}
									]
								},
								{
									"id": 52,
									"name": "ArrayTypeStatic",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 55,
											"name": "baseType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 96,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "Type",
												"id": 5
											}
										},
										{
											"id": 54,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 95,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "static"
											}
										},
										{
											"id": 56,
											"name": "length",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 97,
													"character": 8
												}
											],
											"type": {
												"type": "reference",
												"name": "BN"
											}
										},
										{
											"id": 57,
											"name": "location",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 98,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "Ast.Location"
											}
										},
										{
											"id": 53,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 94,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "array"
											}
										},
										{
											"id": 58,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 99,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												55,
												54,
												56,
												57,
												53,
												58
											]
										}
									],
									"sources": [
										{
											"fileName": "format/types.ts",
											"line": 93,
											"character": 32
										}
									]
								},
								{
									"id": 14,
									"name": "BoolType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 15,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 37,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "bool"
											}
										},
										{
											"id": 16,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 38,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												15,
												16
											]
										}
									],
									"sources": [
										{
											"fileName": "format/types.ts",
											"line": 36,
											"character": 25
										}
									]
								},
								{
									"id": 23,
									"name": "BytesTypeDynamic",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 25,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 52,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "dynamic"
											}
										},
										{
											"id": 26,
											"name": "location",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 53,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "Ast.Location"
											}
										},
										{
											"id": 24,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 51,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "bytes"
											}
										},
										{
											"id": 27,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 54,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												25,
												26,
												24,
												27
											]
										}
									],
									"sources": [
										{
											"fileName": "format/types.ts",
											"line": 50,
											"character": 33
										}
									]
								},
								{
									"id": 18,
									"name": "BytesTypeStatic",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 20,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 45,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "static"
											}
										},
										{
											"id": 21,
											"name": "length",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 46,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 19,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 44,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "bytes"
											}
										},
										{
											"id": 22,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 47,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												20,
												21,
												19,
												22
											]
										}
									],
									"sources": [
										{
											"fileName": "format/types.ts",
											"line": 43,
											"character": 32
										}
									]
								},
								{
									"id": 143,
									"name": "ContractTypeForeign",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 147,
											"name": "contractKind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 270,
													"character": 14
												}
											],
											"type": {
												"type": "reference",
												"name": "Ast.ContractKind"
											}
										},
										{
											"id": 145,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 268,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "foreign"
											}
										},
										{
											"id": 148,
											"name": "payable",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"shortText": "Indicates whether contract has payable fallback function"
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 274,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 144,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 267,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "contract"
											}
										},
										{
											"id": 146,
											"name": "typeName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 269,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												147,
												145,
												148,
												144,
												146
											]
										}
									],
									"sources": [
										{
											"fileName": "format/types.ts",
											"line": 266,
											"character": 36
										}
									]
								},
								{
									"id": 136,
									"name": "ContractTypeNative",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 141,
											"name": "contractKind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 257,
													"character": 14
												}
											],
											"type": {
												"type": "reference",
												"name": "Ast.ContractKind"
											}
										},
										{
											"id": 139,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "Internal ID.  Format may change in future."
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 255,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 138,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 251,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "native"
											}
										},
										{
											"id": 142,
											"name": "payable",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"shortText": "Indicates whether contract has payable fallback function"
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 261,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 137,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 250,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "contract"
											}
										},
										{
											"id": 140,
											"name": "typeName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 256,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												141,
												139,
												138,
												142,
												137,
												140
											]
										}
									],
									"sources": [
										{
											"fileName": "format/types.ts",
											"line": 249,
											"character": 35
										}
									]
								},
								{
									"id": 129,
									"name": "EnumTypeGlobal",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 132,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "Internal ID.  Format may change in future."
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 236,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 131,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 232,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "global"
											}
										},
										{
											"id": 134,
											"name": "options",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"shortText": "these should be in order"
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 241,
													"character": 9
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										},
										{
											"id": 130,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 231,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "enum"
											}
										},
										{
											"id": 133,
											"name": "typeName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 237,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												132,
												131,
												134,
												130,
												133
											]
										}
									],
									"sources": [
										{
											"fileName": "format/types.ts",
											"line": 230,
											"character": 31
										}
									]
								},
								{
									"id": 121,
									"name": "EnumTypeLocal",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 127,
											"name": "definingContract",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 223,
													"character": 18
												}
											],
											"type": {
												"type": "reference",
												"name": "ContractTypeNative",
												"id": 136
											}
										},
										{
											"id": 126,
											"name": "definingContractName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 222,
													"character": 22
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 124,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "Internal ID.  Format may change in future."
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 220,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 123,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 216,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "local"
											}
										},
										{
											"id": 128,
											"name": "options",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"shortText": "these should be in order"
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 227,
													"character": 9
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										},
										{
											"id": 122,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 215,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "enum"
											}
										},
										{
											"id": 125,
											"name": "typeName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 221,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												127,
												126,
												124,
												123,
												128,
												122,
												125
											]
										}
									],
									"sources": [
										{
											"fileName": "format/types.ts",
											"line": 214,
											"character": 30
										}
									]
								},
								{
									"id": 41,
									"name": "FixedType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 43,
											"name": "bits",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 79,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 44,
											"name": "places",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 80,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 42,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 78,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "fixed"
											}
										},
										{
											"id": 45,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 81,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												43,
												44,
												42,
												45
											]
										}
									],
									"sources": [
										{
											"fileName": "format/types.ts",
											"line": 77,
											"character": 26
										}
									]
								},
								{
									"id": 86,
									"name": "FunctionExternalTypeGeneral",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 89,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 146,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "general"
											}
										},
										{
											"id": 87,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 144,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "function"
											}
										},
										{
											"id": 90,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 148,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 88,
											"name": "visibility",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 145,
													"character": 12
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "external"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												89,
												87,
												90,
												88
											]
										}
									],
									"sources": [
										{
											"fileName": "format/types.ts",
											"line": 143,
											"character": 44
										}
									]
								},
								{
									"id": 79,
									"name": "FunctionExternalTypeSpecific",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 84,
											"name": "inputParameterTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 138,
													"character": 21
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Type",
													"id": 5
												}
											}
										},
										{
											"id": 82,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 136,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "specific"
											}
										},
										{
											"id": 83,
											"name": "mutability",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 137,
													"character": 12
												}
											],
											"type": {
												"type": "reference",
												"name": "Ast.Mutability"
											}
										},
										{
											"id": 85,
											"name": "outputParameterTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 139,
													"character": 22
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Type",
													"id": 5
												}
											}
										},
										{
											"id": 80,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 134,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "function"
											}
										},
										{
											"id": 81,
											"name": "visibility",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 135,
													"character": 12
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "external"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												84,
												82,
												83,
												85,
												80,
												81
											]
										}
									],
									"sources": [
										{
											"fileName": "format/types.ts",
											"line": 133,
											"character": 45
										}
									]
								},
								{
									"id": 72,
									"name": "FunctionInternalType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 76,
											"name": "inputParameterTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 126,
													"character": 21
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Type",
													"id": 5
												}
											}
										},
										{
											"id": 75,
											"name": "mutability",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 125,
													"character": 12
												}
											],
											"type": {
												"type": "reference",
												"name": "Ast.Mutability"
											}
										},
										{
											"id": 77,
											"name": "outputParameterTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 127,
													"character": 22
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Type",
													"id": 5
												}
											}
										},
										{
											"id": 73,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 123,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "function"
											}
										},
										{
											"id": 74,
											"name": "visibility",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 124,
													"character": 12
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "internal"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												76,
												75,
												77,
												73,
												74
											]
										}
									],
									"sources": [
										{
											"fileName": "format/types.ts",
											"line": 122,
											"character": 37
										}
									]
								},
								{
									"id": 10,
									"name": "IntType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 12,
											"name": "bits",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 32,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 11,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 31,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "int"
											}
										},
										{
											"id": 13,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 33,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												12,
												11,
												13
											]
										}
									],
									"sources": [
										{
											"fileName": "format/types.ts",
											"line": 30,
											"character": 24
										}
									]
								},
								{
									"id": 150,
									"name": "MagicType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 153,
											"name": "memberTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 287,
													"character": 13
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 154,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": [
														{
															"id": 155,
															"name": "__index",
															"kind": 8192,
															"kindString": "Index signature",
															"flags": {},
															"parameters": [
																{
																	"id": 156,
																	"name": "field",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "reference",
																"name": "Type",
																"id": 5
															}
														}
													],
													"sources": [
														{
															"fileName": "format/types.ts",
															"line": 287,
															"character": 15
														}
													]
												}
											}
										},
										{
											"id": 151,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 282,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "magic"
											}
										},
										{
											"id": 152,
											"name": "variable",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 283,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "MagicVariableName",
												"id": 149
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												153,
												151,
												152
											]
										}
									],
									"sources": [
										{
											"fileName": "format/types.ts",
											"line": 281,
											"character": 26
										}
									]
								},
								{
									"id": 66,
									"name": "MappingType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 68,
											"name": "keyType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 115,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"name": "ElementaryType",
												"id": 65
											}
										},
										{
											"id": 70,
											"name": "location",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 117,
													"character": 10
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "storage"
											}
										},
										{
											"id": 67,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 114,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "mapping"
											}
										},
										{
											"id": 69,
											"name": "valueType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 116,
													"character": 11
												}
											],
											"type": {
												"type": "reference",
												"name": "Type",
												"id": 5
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												68,
												70,
												67,
												69
											]
										}
									],
									"sources": [
										{
											"fileName": "format/types.ts",
											"line": 113,
											"character": 28
										}
									]
								},
								{
									"id": 94,
									"name": "NameTypePair",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 95,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 161,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 96,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 162,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Type",
												"id": 5
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												95,
												96
											]
										}
									],
									"sources": [
										{
											"fileName": "format/types.ts",
											"line": 160,
											"character": 29
										}
									]
								},
								{
									"id": 113,
									"name": "OptionallyNamedType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 114,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 198,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 115,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 199,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Type",
												"id": 5
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												114,
												115
											]
										}
									],
									"sources": [
										{
											"fileName": "format/types.ts",
											"line": 197,
											"character": 36
										}
									]
								},
								{
									"id": 37,
									"name": "StringType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 39,
											"name": "location",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 73,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "Ast.Location"
											}
										},
										{
											"id": 38,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 72,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "string"
											}
										},
										{
											"id": 40,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 74,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												39,
												38,
												40
											]
										}
									],
									"sources": [
										{
											"fileName": "format/types.ts",
											"line": 71,
											"character": 27
										}
									]
								},
								{
									"id": 106,
									"name": "StructTypeGlobal",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 109,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "Internal ID.  Format may change in future."
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 188,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 108,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 184,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "global"
											}
										},
										{
											"id": 112,
											"name": "location",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 194,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "Ast.Location"
											}
										},
										{
											"id": 111,
											"name": "memberTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"shortText": "these should be in order"
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 193,
													"character": 13
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "NameTypePair",
													"id": 94
												}
											}
										},
										{
											"id": 107,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 183,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "struct"
											}
										},
										{
											"id": 110,
											"name": "typeName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 189,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												109,
												108,
												112,
												111,
												107,
												110
											]
										}
									],
									"sources": [
										{
											"fileName": "format/types.ts",
											"line": 182,
											"character": 33
										}
									]
								},
								{
									"id": 97,
									"name": "StructTypeLocal",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 103,
											"name": "definingContract",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 174,
													"character": 18
												}
											],
											"type": {
												"type": "reference",
												"name": "ContractTypeNative",
												"id": 136
											}
										},
										{
											"id": 102,
											"name": "definingContractName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 173,
													"character": 22
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 100,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "Internal ID.  Format may change in future."
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 171,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 99,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 167,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "local"
											}
										},
										{
											"id": 105,
											"name": "location",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 179,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "Ast.Location"
											}
										},
										{
											"id": 104,
											"name": "memberTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"shortText": "these should be in order"
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 178,
													"character": 13
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "NameTypePair",
													"id": 94
												}
											}
										},
										{
											"id": 98,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 166,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "struct"
											}
										},
										{
											"id": 101,
											"name": "typeName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 172,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												103,
												102,
												100,
												99,
												105,
												104,
												98,
												101
											]
										}
									],
									"sources": [
										{
											"fileName": "format/types.ts",
											"line": 165,
											"character": 32
										}
									]
								},
								{
									"id": 116,
									"name": "TupleType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 118,
											"name": "memberTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 204,
													"character": 13
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "OptionallyNamedType",
													"id": 113
												}
											}
										},
										{
											"id": 117,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 203,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "tuple"
											}
										},
										{
											"id": 119,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 205,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												118,
												117,
												119
											]
										}
									],
									"sources": [
										{
											"fileName": "format/types.ts",
											"line": 202,
											"character": 26
										}
									]
								},
								{
									"id": 158,
									"name": "TypesById",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"indexSignature": [
										{
											"id": 159,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 160,
													"name": "id",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "UserDefinedType",
												"id": 92
											}
										}
									],
									"sources": [
										{
											"fileName": "format/types.ts",
											"line": 295,
											"character": 26
										}
									]
								},
								{
									"id": 46,
									"name": "UfixedType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 48,
											"name": "bits",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 86,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 49,
											"name": "places",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 87,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 47,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 85,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "ufixed"
											}
										},
										{
											"id": 50,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 88,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												48,
												49,
												47,
												50
											]
										}
									],
									"sources": [
										{
											"fileName": "format/types.ts",
											"line": 84,
											"character": 27
										}
									]
								},
								{
									"id": 6,
									"name": "UintType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 8,
											"name": "bits",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 26,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 7,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 25,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "uint"
											}
										},
										{
											"id": 9,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "format/types.ts",
													"line": 27,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												8,
												7,
												9
											]
										}
									],
									"sources": [
										{
											"fileName": "format/types.ts",
											"line": 24,
											"character": 25
										}
									]
								},
								{
									"id": 28,
									"name": "AddressType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/types.ts",
											"line": 57,
											"character": 23
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "AddressTypeSpecific",
												"id": 29
											},
											{
												"type": "reference",
												"name": "AddressTypeGeneral",
												"id": 33
											}
										]
									}
								},
								{
									"id": 51,
									"name": "ArrayType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/types.ts",
											"line": 91,
											"character": 21
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ArrayTypeStatic",
												"id": 52
											},
											{
												"type": "reference",
												"name": "ArrayTypeDynamic",
												"id": 59
											}
										]
									}
								},
								{
									"id": 17,
									"name": "BytesType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/types.ts",
											"line": 41,
											"character": 21
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "BytesTypeStatic",
												"id": 18
											},
											{
												"type": "reference",
												"name": "BytesTypeDynamic",
												"id": 23
											}
										]
									}
								},
								{
									"id": 91,
									"name": "ContractDefinedType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/types.ts",
											"line": 151,
											"character": 31
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "StructTypeLocal",
												"id": 97
											},
											{
												"type": "reference",
												"name": "EnumTypeLocal",
												"id": 121
											}
										]
									}
								},
								{
									"id": 135,
									"name": "ContractType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Contract types may be native (has Solidity info) or foreign (lacking Solidity info)."
									},
									"sources": [
										{
											"fileName": "format/types.ts",
											"line": 247,
											"character": 24
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ContractTypeNative",
												"id": 136
											},
											{
												"type": "reference",
												"name": "ContractTypeForeign",
												"id": 143
											}
										]
									}
								},
								{
									"id": 65,
									"name": "ElementaryType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/types.ts",
											"line": 110,
											"character": 26
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "UintType",
												"id": 6
											},
											{
												"type": "reference",
												"name": "IntType",
												"id": 10
											},
											{
												"type": "reference",
												"name": "BoolType",
												"id": 14
											},
											{
												"type": "reference",
												"name": "BytesType",
												"id": 17
											},
											{
												"type": "reference",
												"name": "FixedType",
												"id": 41
											},
											{
												"type": "reference",
												"name": "UfixedType",
												"id": 46
											},
											{
												"type": "reference",
												"name": "AddressType",
												"id": 28
											},
											{
												"type": "reference",
												"name": "StringType",
												"id": 37
											}
										]
									}
								},
								{
									"id": 120,
									"name": "EnumType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Enums may be local (defined in a contract) or global (defined outside of any contract);\nthe latter will be introduced in Solidity 0.6.x"
									},
									"sources": [
										{
											"fileName": "format/types.ts",
											"line": 212,
											"character": 20
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "EnumTypeLocal",
												"id": 121
											},
											{
												"type": "reference",
												"name": "EnumTypeGlobal",
												"id": 129
											}
										]
									}
								},
								{
									"id": 78,
									"name": "FunctionExternalType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/types.ts",
											"line": 131,
											"character": 32
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "FunctionExternalTypeSpecific",
												"id": 79
											},
											{
												"type": "reference",
												"name": "FunctionExternalTypeGeneral",
												"id": 86
											}
										]
									}
								},
								{
									"id": 71,
									"name": "FunctionType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/types.ts",
											"line": 120,
											"character": 24
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "FunctionInternalType",
												"id": 72
											},
											{
												"type": "reference",
												"name": "FunctionExternalType",
												"id": 78
											}
										]
									}
								},
								{
									"id": 149,
									"name": "MagicVariableName",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/types.ts",
											"line": 279,
											"character": 29
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "stringLiteral",
												"value": "message"
											},
											{
												"type": "stringLiteral",
												"value": "block"
											},
											{
												"type": "stringLiteral",
												"value": "transaction"
											}
										]
									}
								},
								{
									"id": 157,
									"name": "ReferenceType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/types.ts",
											"line": 293,
											"character": 25
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ArrayType",
												"id": 51
											},
											{
												"type": "reference",
												"name": "MappingType",
												"id": 66
											},
											{
												"type": "reference",
												"name": "StructType",
												"id": 93
											},
											{
												"type": "reference",
												"name": "StringType",
												"id": 37
											},
											{
												"type": "reference",
												"name": "BytesTypeDynamic",
												"id": 23
											}
										]
									}
								},
								{
									"id": 93,
									"name": "StructType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Structs may be local (defined in a contract) or global (defined outside of any contract);\nthe latter will be introduced in Solidity 0.6.x"
									},
									"sources": [
										{
											"fileName": "format/types.ts",
											"line": 158,
											"character": 22
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "StructTypeLocal",
												"id": 97
											},
											{
												"type": "reference",
												"name": "StructTypeGlobal",
												"id": 106
											}
										]
									}
								},
								{
									"id": 5,
									"name": "Type",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/types.ts",
											"line": 20,
											"character": 16
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "UintType",
												"id": 6
											},
											{
												"type": "reference",
												"name": "IntType",
												"id": 10
											},
											{
												"type": "reference",
												"name": "BoolType",
												"id": 14
											},
											{
												"type": "reference",
												"name": "BytesType",
												"id": 17
											},
											{
												"type": "reference",
												"name": "AddressType",
												"id": 28
											},
											{
												"type": "reference",
												"name": "FixedType",
												"id": 41
											},
											{
												"type": "reference",
												"name": "UfixedType",
												"id": 46
											},
											{
												"type": "reference",
												"name": "StringType",
												"id": 37
											},
											{
												"type": "reference",
												"name": "ArrayType",
												"id": 51
											},
											{
												"type": "reference",
												"name": "MappingType",
												"id": 66
											},
											{
												"type": "reference",
												"name": "FunctionType",
												"id": 71
											},
											{
												"type": "reference",
												"name": "StructType",
												"id": 93
											},
											{
												"type": "reference",
												"name": "EnumType",
												"id": 120
											},
											{
												"type": "reference",
												"name": "ContractType",
												"id": 135
											},
											{
												"type": "reference",
												"name": "MagicType",
												"id": 150
											},
											{
												"type": "reference",
												"name": "TupleType",
												"id": 116
											}
										]
									}
								},
								{
									"id": 92,
									"name": "UserDefinedType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/types.ts",
											"line": 152,
											"character": 27
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ContractDefinedType",
												"id": 91
											},
											{
												"type": "reference",
												"name": "ContractTypeNative",
												"id": 136
											},
											{
												"type": "reference",
												"name": "StructTypeGlobal",
												"id": 106
											},
											{
												"type": "reference",
												"name": "EnumTypeGlobal",
												"id": 129
											}
										]
									}
								},
								{
									"id": 4,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "format/types.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:format:types\")"
								}
							],
							"groups": [
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										33,
										29,
										59,
										52,
										14,
										23,
										18,
										143,
										136,
										129,
										121,
										41,
										86,
										79,
										72,
										10,
										150,
										66,
										94,
										113,
										37,
										106,
										97,
										116,
										158,
										46,
										6
									]
								},
								{
									"title": "Type aliases",
									"kind": 4194304,
									"children": [
										28,
										51,
										17,
										91,
										135,
										65,
										120,
										78,
										71,
										149,
										157,
										93,
										5,
										92
									]
								},
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										4
									]
								}
							],
							"sources": [
								{
									"fileName": "format/index.ts",
									"line": 17,
									"character": 8
								}
							]
						},
						{
							"id": 161,
							"name": "Values",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 198,
									"name": "AddressValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 200,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/elementary.ts",
													"line": 75,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 199,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/elementary.ts",
													"line": 74,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.AddressType",
												"id": 28
											}
										},
										{
											"id": 201,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/elementary.ts",
													"line": 76,
													"character": 7
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 202,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 203,
															"name": "asAddress",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"comment": {
																"shortText": "has leading \"0x\" and is checksum-cased"
															},
															"sources": [
																{
																	"fileName": "format/elementary.ts",
																	"line": 80,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 204,
															"name": "rawAsHex",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "just a hex string, so no checksum"
															},
															"sources": [
																{
																	"fileName": "format/elementary.ts",
																	"line": 84,
																	"character": 12
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																203,
																204
															]
														}
													],
													"sources": [
														{
															"fileName": "format/elementary.ts",
															"line": 76,
															"character": 8
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												200,
												199,
												201
											]
										}
									],
									"sources": [
										{
											"fileName": "format/elementary.ts",
											"line": 73,
											"character": 29
										}
									]
								},
								{
									"id": 244,
									"name": "ArrayValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 246,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 123,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 247,
											"name": "reference",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"shortText": "will be used in the future for circular vales"
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 127,
													"character": 11
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 245,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 122,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.ArrayType",
												"id": 51
											}
										},
										{
											"id": 248,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 128,
													"character": 7
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Result",
													"id": 230
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												246,
												247,
												245,
												248
											]
										}
									],
									"sources": [
										{
											"fileName": "format/values.ts",
											"line": 121,
											"character": 27
										}
									]
								},
								{
									"id": 179,
									"name": "BoolValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 181,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/elementary.ts",
													"line": 41,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 180,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/elementary.ts",
													"line": 40,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "BoolType",
												"id": 14
											}
										},
										{
											"id": 182,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/elementary.ts",
													"line": 42,
													"character": 7
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 183,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 184,
															"name": "asBoolean",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "format/elementary.ts",
																	"line": 43,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																184
															]
														}
													],
													"sources": [
														{
															"fileName": "format/elementary.ts",
															"line": 42,
															"character": 8
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												181,
												180,
												182
											]
										}
									],
									"sources": [
										{
											"fileName": "format/elementary.ts",
											"line": 39,
											"character": 26
										}
									]
								},
								{
									"id": 192,
									"name": "BytesDynamicValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 194,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/elementary.ts",
													"line": 63,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 193,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/elementary.ts",
													"line": 62,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "BytesTypeDynamic",
												"id": 23
											}
										},
										{
											"id": 195,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/elementary.ts",
													"line": 64,
													"character": 7
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 196,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 197,
															"name": "asHex",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"comment": {
																"shortText": "hex-formatted, with leading \"0x\""
															},
															"sources": [
																{
																	"fileName": "format/elementary.ts",
																	"line": 68,
																	"character": 9
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																197
															]
														}
													],
													"sources": [
														{
															"fileName": "format/elementary.ts",
															"line": 64,
															"character": 8
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												194,
												193,
												195
											]
										}
									],
									"sources": [
										{
											"fileName": "format/elementary.ts",
											"line": 61,
											"character": 34
										}
									]
								},
								{
									"id": 185,
									"name": "BytesStaticValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 187,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/elementary.ts",
													"line": 50,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 186,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/elementary.ts",
													"line": 49,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "BytesTypeStatic",
												"id": 18
											}
										},
										{
											"id": 188,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/elementary.ts",
													"line": 51,
													"character": 7
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 189,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 190,
															"name": "asHex",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"comment": {
																"shortText": "hex-formatted, with leading \"0x\""
															},
															"sources": [
																{
																	"fileName": "format/elementary.ts",
																	"line": 55,
																	"character": 9
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 191,
															"name": "rawAsHex",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "format/elementary.ts",
																	"line": 56,
																	"character": 12
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																190,
																191
															]
														}
													],
													"sources": [
														{
															"fileName": "format/elementary.ts",
															"line": 51,
															"character": 8
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												187,
												186,
												188
											]
										}
									],
									"sources": [
										{
											"fileName": "format/elementary.ts",
											"line": 48,
											"character": 33
										}
									]
								},
								{
									"id": 291,
									"name": "ContractValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 293,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 227,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 292,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 226,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.ContractType",
												"id": 135
											}
										},
										{
											"id": 294,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 228,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"name": "ContractValueInfo",
												"id": 295
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												293,
												292,
												294
											]
										}
									],
									"sources": [
										{
											"fileName": "format/values.ts",
											"line": 225,
											"character": 30
										}
									]
								},
								{
									"id": 296,
									"name": "ContractValueInfoKnown",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "This type of ContractValueInfo is used when we can identify the class."
									},
									"children": [
										{
											"id": 298,
											"name": "address",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "formatted as address (leading \"0x\", checksum-cased);\nnote that this is not an AddressResult!"
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 248,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 300,
											"name": "class",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 253,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.ContractType",
												"id": 135
											}
										},
										{
											"id": 297,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 243,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "known"
											}
										},
										{
											"id": 299,
											"name": "rawAddress",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"shortText": "this is just a hexstring; no checksum (also may have padding on end)"
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 252,
													"character": 12
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												298,
												300,
												297,
												299
											]
										}
									],
									"sources": [
										{
											"fileName": "format/values.ts",
											"line": 242,
											"character": 39
										}
									]
								},
								{
									"id": 301,
									"name": "ContractValueInfoUnknown",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "This type of ContractValueInfo is used when we can't identify the class."
									},
									"children": [
										{
											"id": 303,
											"name": "address",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "formatted as address (leading \"0x\", checksum-cased);\nnote that this is not an AddressResult!"
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 266,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 302,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 261,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "unknown"
											}
										},
										{
											"id": 304,
											"name": "rawAddress",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"shortText": "this is just a hexstring; no checksum (also may have padding on end)"
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 270,
													"character": 12
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												303,
												302,
												304
											]
										}
									],
									"sources": [
										{
											"fileName": "format/values.ts",
											"line": 260,
											"character": 41
										}
									]
								},
								{
									"id": 283,
									"name": "EnumValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 285,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 207,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 284,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 206,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.EnumType",
												"id": 120
											}
										},
										{
											"id": 286,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 208,
													"character": 7
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 287,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 288,
															"name": "name",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "format/values.ts",
																	"line": 209,
																	"character": 8
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 289,
															"name": "numericAsBN",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"comment": {
																"shortText": "the numeric value of the enum"
															},
															"sources": [
																{
																	"fileName": "format/values.ts",
																	"line": 213,
																	"character": 15
																}
															],
															"type": {
																"type": "reference",
																"name": "BN"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																288,
																289
															]
														}
													],
													"sources": [
														{
															"fileName": "format/values.ts",
															"line": 208,
															"character": 8
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												285,
												284,
												286
											]
										}
									],
									"sources": [
										{
											"fileName": "format/values.ts",
											"line": 205,
											"character": 26
										}
									]
								},
								{
									"id": 216,
									"name": "FixedValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 218,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/elementary.ts",
													"line": 123,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 217,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/elementary.ts",
													"line": 122,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "FixedType",
												"id": 41
											}
										},
										{
											"id": 219,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/elementary.ts",
													"line": 124,
													"character": 7
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 220,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 221,
															"name": "asBig",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "format/elementary.ts",
																	"line": 125,
																	"character": 9
																}
															],
															"type": {
																"type": "reference",
																"name": "Big"
															}
														},
														{
															"id": 222,
															"name": "rawAsBig",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "format/elementary.ts",
																	"line": 126,
																	"character": 12
																}
															],
															"type": {
																"type": "reference",
																"name": "Big"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																221,
																222
															]
														}
													],
													"sources": [
														{
															"fileName": "format/elementary.ts",
															"line": 124,
															"character": 8
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												218,
												217,
												219
											]
										}
									],
									"sources": [
										{
											"fileName": "format/elementary.ts",
											"line": 121,
											"character": 27
										}
									]
								},
								{
									"id": 306,
									"name": "FunctionExternalValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 308,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 284,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 307,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 283,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.FunctionExternalType",
												"id": 78
											}
										},
										{
											"id": 309,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 285,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"name": "FunctionExternalValueInfo",
												"id": 310
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												308,
												307,
												309
											]
										}
									],
									"sources": [
										{
											"fileName": "format/values.ts",
											"line": 282,
											"character": 38
										}
									]
								},
								{
									"id": 316,
									"name": "FunctionExternalValueInfoInvalid",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "This type of FunctionExternalValueInfo is used when we can identify the class but can't locate the function."
									},
									"children": [
										{
											"id": 318,
											"name": "contract",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 318,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "ContractValueInfoKnown",
												"id": 296
											}
										},
										{
											"id": 317,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 317,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "invalid"
											}
										},
										{
											"id": 319,
											"name": "selector",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "formatted as a hex string"
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 322,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												318,
												317,
												319
											]
										}
									],
									"sources": [
										{
											"fileName": "format/values.ts",
											"line": 316,
											"character": 49
										}
									]
								},
								{
									"id": 311,
									"name": "FunctionExternalValueInfoKnown",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "This type of FunctionExternalValueInfo is used for a known function of a known class."
									},
									"children": [
										{
											"id": 315,
											"name": "abi",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 309,
													"character": 5
												}
											],
											"type": {
												"type": "reference",
												"name": "FunctionAbiEntry"
											}
										},
										{
											"id": 313,
											"name": "contract",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 304,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "ContractValueInfoKnown",
												"id": 296
											}
										},
										{
											"id": 312,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 303,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "known"
											}
										},
										{
											"id": 314,
											"name": "selector",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "formatted as a hex string"
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 308,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												315,
												313,
												312,
												314
											]
										}
									],
									"sources": [
										{
											"fileName": "format/values.ts",
											"line": 302,
											"character": 47
										}
									]
								},
								{
									"id": 320,
									"name": "FunctionExternalValueInfoUnknown",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "This type of FunctionExternalValueInfo is used when we can't even locate the class."
									},
									"children": [
										{
											"id": 322,
											"name": "contract",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 330,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "ContractValueInfoUnknown",
												"id": 301
											}
										},
										{
											"id": 321,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 329,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "unknown"
											}
										},
										{
											"id": 323,
											"name": "selector",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "formatted as a hex string"
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 334,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												322,
												321,
												323
											]
										}
									],
									"sources": [
										{
											"fileName": "format/values.ts",
											"line": 328,
											"character": 49
										}
									]
								},
								{
									"id": 325,
									"name": "FunctionInternalValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 327,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 348,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 326,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 347,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "FunctionInternalType",
												"id": 72
											}
										},
										{
											"id": 328,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 349,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"name": "FunctionInternalValueInfo",
												"id": 329
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												327,
												326,
												328
											]
										}
									],
									"sources": [
										{
											"fileName": "format/values.ts",
											"line": 346,
											"character": 38
										}
									]
								},
								{
									"id": 338,
									"name": "FunctionInternalValueInfoException",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A default value -- internal functions have two default values\ndepending on whether they live in storage or elsewhere.\nIn storage the default value is 0 for both program counters.\nElsewhere they're both nonzero."
									},
									"children": [
										{
											"id": 342,
											"name": "constructorProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 387,
													"character": 27
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 340,
											"name": "context",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 385,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.ContractType",
												"id": 135
											}
										},
										{
											"id": 341,
											"name": "deployedProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 386,
													"character": 24
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 339,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 384,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "exception"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												342,
												340,
												341,
												339
											]
										}
									],
									"sources": [
										{
											"fileName": "format/values.ts",
											"line": 383,
											"character": 51
										}
									]
								},
								{
									"id": 330,
									"name": "FunctionInternalValueInfoKnown",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "This type of FunctionInternalValueInfo is used for an actual internal function."
									},
									"children": [
										{
											"id": 334,
											"name": "constructorProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 370,
													"character": 27
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 332,
											"name": "context",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 368,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.ContractType",
												"id": 135
											}
										},
										{
											"id": 336,
											"name": "definedIn",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 372,
													"character": 11
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.ContractType",
												"id": 135
											}
										},
										{
											"id": 333,
											"name": "deployedProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 369,
													"character": 24
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 331,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 367,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "function"
											}
										},
										{
											"id": 337,
											"name": "mutability",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 373,
													"character": 12
												}
											],
											"type": {
												"type": "reference",
												"name": "Mutability"
											}
										},
										{
											"id": 335,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 371,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												334,
												332,
												336,
												333,
												331,
												337,
												335
											]
										}
									],
									"sources": [
										{
											"fileName": "format/values.ts",
											"line": 366,
											"character": 47
										}
									]
								},
								{
									"id": 343,
									"name": "FunctionInternalValueInfoUnknown",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "This type is used when decoding internal functions from the high-level\ndecoding interface, which presently doesn't support detailed decoding of\ninternal functions.  (The debugger, however, supports it!  You can get this\ndetailed information in the debugger!)  You'll still get the program counter\nvalues, but further information will be absent.  Note you'll get this even\nif really it should decode to an error, because the decoding interface\ndoesn't have the information to determine that it's an error."
									},
									"children": [
										{
											"id": 347,
											"name": "constructorProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 403,
													"character": 27
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 345,
											"name": "context",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 401,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.ContractType",
												"id": 135
											}
										},
										{
											"id": 346,
											"name": "deployedProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 402,
													"character": 24
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 344,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 400,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "unknown"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												347,
												345,
												346,
												344
											]
										}
									],
									"sources": [
										{
											"fileName": "format/values.ts",
											"line": 399,
											"character": 49
										}
									]
								},
								{
									"id": 172,
									"name": "IntValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 174,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/elementary.ts",
													"line": 31,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 173,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/elementary.ts",
													"line": 30,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "IntType",
												"id": 10
											}
										},
										{
											"id": 175,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/elementary.ts",
													"line": 32,
													"character": 7
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 176,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 177,
															"name": "asBN",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "format/elementary.ts",
																	"line": 33,
																	"character": 8
																}
															],
															"type": {
																"type": "reference",
																"name": "BN"
															}
														},
														{
															"id": 178,
															"name": "rawAsBN",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "format/elementary.ts",
																	"line": 34,
																	"character": 11
																}
															],
															"type": {
																"type": "reference",
																"name": "BN"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																177,
																178
															]
														}
													],
													"sources": [
														{
															"fileName": "format/elementary.ts",
															"line": 32,
															"character": 8
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												174,
												173,
												175
											]
										}
									],
									"sources": [
										{
											"fileName": "format/elementary.ts",
											"line": 29,
											"character": 25
										}
									]
								},
								{
									"id": 254,
									"name": "KeyValuePair",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 255,
											"name": "key",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 146,
													"character": 5
												}
											],
											"type": {
												"type": "reference",
												"name": "ElementaryValue",
												"id": 163
											}
										},
										{
											"id": 256,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 147,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"name": "Result",
												"id": 230
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												255,
												256
											]
										}
									],
									"sources": [
										{
											"fileName": "format/values.ts",
											"line": 145,
											"character": 29
										}
									]
								},
								{
									"id": 275,
									"name": "MagicValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 277,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 190,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 276,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 189,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "MagicType",
												"id": 150
											}
										},
										{
											"id": 278,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 192,
													"character": 7
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 279,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": [
														{
															"id": 280,
															"name": "__index",
															"kind": 8192,
															"kindString": "Index signature",
															"flags": {},
															"parameters": [
																{
																	"id": 281,
																	"name": "field",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "reference",
																"name": "Result",
																"id": 230
															}
														}
													],
													"sources": [
														{
															"fileName": "format/values.ts",
															"line": 192,
															"character": 8
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												277,
												276,
												278
											]
										}
									],
									"sources": [
										{
											"fileName": "format/values.ts",
											"line": 188,
											"character": 27
										}
									]
								},
								{
									"id": 250,
									"name": "MappingValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 252,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 136,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 251,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 135,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "MappingType",
												"id": 66
											}
										},
										{
											"id": 253,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "order is irrelevant; also note keys must be values, not errors"
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 142,
													"character": 7
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "KeyValuePair",
													"id": 254
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												252,
												251,
												253
											]
										}
									],
									"sources": [
										{
											"fileName": "format/values.ts",
											"line": 134,
											"character": 29
										}
									]
								},
								{
									"id": 263,
									"name": "NameValuePair",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 264,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 167,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 265,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 168,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"name": "Result",
												"id": 230
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												264,
												265
											]
										}
									],
									"sources": [
										{
											"fileName": "format/values.ts",
											"line": 166,
											"character": 30
										}
									]
								},
								{
									"id": 271,
									"name": "OptionallyNamedValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 272,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 181,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 273,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 182,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"name": "Result",
												"id": 230
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												272,
												273
											]
										}
									],
									"sources": [
										{
											"fileName": "format/values.ts",
											"line": 180,
											"character": 37
										}
									]
								},
								{
									"id": 205,
									"name": "StringValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 207,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/elementary.ts",
													"line": 92,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 206,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/elementary.ts",
													"line": 91,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "StringType",
												"id": 37
											}
										},
										{
											"id": 208,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/elementary.ts",
													"line": 93,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"name": "StringValueInfo",
												"id": 209
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												207,
												206,
												208
											]
										}
									],
									"sources": [
										{
											"fileName": "format/elementary.ts",
											"line": 90,
											"character": 28
										}
									]
								},
								{
									"id": 213,
									"name": "StringValueInfoMalformed",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "This type of StringValueInfo represents a malformed string."
									},
									"children": [
										{
											"id": 215,
											"name": "asHex",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex-formatted, with leading \"0x\""
											},
											"sources": [
												{
													"fileName": "format/elementary.ts",
													"line": 117,
													"character": 7
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 214,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/elementary.ts",
													"line": 113,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "malformed"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												215,
												214
											]
										}
									],
									"sources": [
										{
											"fileName": "format/elementary.ts",
											"line": 112,
											"character": 41
										}
									]
								},
								{
									"id": 210,
									"name": "StringValueInfoValid",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "This type of StringValueInfo represents a valid UTF-8 string."
									},
									"children": [
										{
											"id": 212,
											"name": "asString",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/elementary.ts",
													"line": 106,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 211,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/elementary.ts",
													"line": 105,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "valid"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												212,
												211
											]
										}
									],
									"sources": [
										{
											"fileName": "format/elementary.ts",
											"line": 104,
											"character": 37
										}
									]
								},
								{
									"id": 258,
									"name": "StructValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 260,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 155,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 261,
											"name": "reference",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"shortText": "will be used in the future for circular vales"
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 159,
													"character": 11
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 259,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 154,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.StructType",
												"id": 93
											}
										},
										{
											"id": 262,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "these must be stored in order!"
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 163,
													"character": 7
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "NameValuePair",
													"id": 263
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												260,
												261,
												259,
												262
											]
										}
									],
									"sources": [
										{
											"fileName": "format/values.ts",
											"line": 153,
											"character": 28
										}
									]
								},
								{
									"id": 267,
									"name": "TupleValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 269,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 176,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 268,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 175,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "TupleType",
												"id": 116
											}
										},
										{
											"id": 270,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/values.ts",
													"line": 177,
													"character": 7
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "OptionallyNamedValue",
													"id": 271
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												269,
												268,
												270
											]
										}
									],
									"sources": [
										{
											"fileName": "format/values.ts",
											"line": 174,
											"character": 27
										}
									]
								},
								{
									"id": 223,
									"name": "UfixedValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 225,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/elementary.ts",
													"line": 132,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 224,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/elementary.ts",
													"line": 131,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "UfixedType",
												"id": 46
											}
										},
										{
											"id": 226,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/elementary.ts",
													"line": 133,
													"character": 7
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 227,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 228,
															"name": "asBig",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "format/elementary.ts",
																	"line": 134,
																	"character": 9
																}
															],
															"type": {
																"type": "reference",
																"name": "Big"
															}
														},
														{
															"id": 229,
															"name": "rawAsBig",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "format/elementary.ts",
																	"line": 135,
																	"character": 12
																}
															],
															"type": {
																"type": "reference",
																"name": "Big"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																228,
																229
															]
														}
													],
													"sources": [
														{
															"fileName": "format/elementary.ts",
															"line": 133,
															"character": 8
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												225,
												224,
												226
											]
										}
									],
									"sources": [
										{
											"fileName": "format/elementary.ts",
											"line": 130,
											"character": 28
										}
									]
								},
								{
									"id": 165,
									"name": "UintValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 167,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/elementary.ts",
													"line": 21,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 166,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/elementary.ts",
													"line": 20,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "UintType",
												"id": 6
											}
										},
										{
											"id": 168,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "format/elementary.ts",
													"line": 22,
													"character": 7
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 169,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 170,
															"name": "asBN",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "format/elementary.ts",
																	"line": 23,
																	"character": 8
																}
															],
															"type": {
																"type": "reference",
																"name": "BN"
															}
														},
														{
															"id": 171,
															"name": "rawAsBN",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "format/elementary.ts",
																	"line": 24,
																	"character": 11
																}
															],
															"type": {
																"type": "reference",
																"name": "BN"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																170,
																171
															]
														}
													],
													"sources": [
														{
															"fileName": "format/elementary.ts",
															"line": 22,
															"character": 8
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												167,
												166,
												168
											]
										}
									],
									"sources": [
										{
											"fileName": "format/elementary.ts",
											"line": 19,
											"character": 26
										}
									]
								},
								{
									"id": 239,
									"name": "AddressResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/values.ts",
											"line": 104,
											"character": 25
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "AddressValue",
												"id": 198
											},
											{
												"type": "reference",
												"name": "AddressErrorResult",
												"id": 391
											}
										]
									}
								},
								{
									"id": 243,
									"name": "ArrayResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/values.ts",
											"line": 119,
											"character": 23
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ArrayValue",
												"id": 244
											},
											{
												"type": "reference",
												"name": "ArrayErrorResult",
												"id": 420
											}
										]
									}
								},
								{
									"id": 236,
									"name": "BoolResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/values.ts",
											"line": 92,
											"character": 22
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "BoolValue",
												"id": 179
											},
											{
												"type": "reference",
												"name": "BoolErrorResult",
												"id": 370
											}
										]
									}
								},
								{
									"id": 238,
									"name": "BytesDynamicResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/values.ts",
											"line": 99,
											"character": 30
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "BytesDynamicValue",
												"id": 192
											},
											{
												"type": "reference",
												"name": "BytesDynamicErrorResult",
												"id": 386
											}
										]
									}
								},
								{
									"id": 233,
									"name": "BytesResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/values.ts",
											"line": 84,
											"character": 23
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "BytesStaticResult",
												"id": 237
											},
											{
												"type": "reference",
												"name": "BytesDynamicResult",
												"id": 238
											}
										]
									}
								},
								{
									"id": 237,
									"name": "BytesStaticResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/values.ts",
											"line": 95,
											"character": 29
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "BytesStaticValue",
												"id": 185
											},
											{
												"type": "reference",
												"name": "BytesStaticErrorResult",
												"id": 378
											}
										]
									}
								},
								{
									"id": 164,
									"name": "BytesValue",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/elementary.ts",
											"line": 16,
											"character": 22
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "BytesStaticValue",
												"id": 185
											},
											{
												"type": "reference",
												"name": "BytesDynamicValue",
												"id": 192
											}
										]
									}
								},
								{
									"id": 290,
									"name": "ContractResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/values.ts",
											"line": 222,
											"character": 26
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ContractValue",
												"id": 291
											},
											{
												"type": "reference",
												"name": "ContractErrorResult",
												"id": 458
											}
										]
									}
								},
								{
									"id": 295,
									"name": "ContractValueInfo",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "There are two types -- one for contracts whose class we can identify, and one\nfor when we can't identify the class."
									},
									"sources": [
										{
											"fileName": "format/values.ts",
											"line": 235,
											"character": 29
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ContractValueInfoKnown",
												"id": 296
											},
											{
												"type": "reference",
												"name": "ContractValueInfoUnknown",
												"id": 301
											}
										]
									}
								},
								{
									"id": 232,
									"name": "ElementaryResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/values.ts",
											"line": 75,
											"character": 28
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "UintResult",
												"id": 234
											},
											{
												"type": "reference",
												"name": "IntResult",
												"id": 235
											},
											{
												"type": "reference",
												"name": "BoolResult",
												"id": 236
											},
											{
												"type": "reference",
												"name": "BytesResult",
												"id": 233
											},
											{
												"type": "reference",
												"name": "AddressResult",
												"id": 239
											},
											{
												"type": "reference",
												"name": "StringResult",
												"id": 240
											},
											{
												"type": "reference",
												"name": "FixedResult",
												"id": 241
											},
											{
												"type": "reference",
												"name": "UfixedResult",
												"id": 242
											}
										]
									}
								},
								{
									"id": 163,
									"name": "ElementaryValue",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/elementary.ts",
											"line": 7,
											"character": 27
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "UintValue",
												"id": 165
											},
											{
												"type": "reference",
												"name": "IntValue",
												"id": 172
											},
											{
												"type": "reference",
												"name": "BoolValue",
												"id": 179
											},
											{
												"type": "reference",
												"name": "BytesValue",
												"id": 164
											},
											{
												"type": "reference",
												"name": "AddressValue",
												"id": 198
											},
											{
												"type": "reference",
												"name": "StringValue",
												"id": 205
											},
											{
												"type": "reference",
												"name": "FixedValue",
												"id": 216
											},
											{
												"type": "reference",
												"name": "UfixedValue",
												"id": 223
											}
										]
									}
								},
								{
									"id": 282,
									"name": "EnumResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/values.ts",
											"line": 203,
											"character": 22
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "EnumValue",
												"id": 283
											},
											{
												"type": "reference",
												"name": "EnumErrorResult",
												"id": 445
											}
										]
									}
								},
								{
									"id": 241,
									"name": "FixedResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/values.ts",
											"line": 110,
											"character": 23
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "FixedValue",
												"id": 216
											},
											{
												"type": "reference",
												"name": "FixedErrorResult",
												"id": 404
											}
										]
									}
								},
								{
									"id": 305,
									"name": "FunctionExternalResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/values.ts",
											"line": 278,
											"character": 34
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "FunctionExternalValue",
												"id": 306
											},
											{
												"type": "reference",
												"name": "FunctionExternalErrorResult",
												"id": 466
											}
										]
									}
								},
								{
									"id": 310,
									"name": "FunctionExternalValueInfo",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "External function values come in 3 types:\n1. known function of known class\n2. known class, but can't locate function\n3. can't determine class"
									},
									"sources": [
										{
											"fileName": "format/values.ts",
											"line": 294,
											"character": 37
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "FunctionExternalValueInfoKnown",
												"id": 311
											},
											{
												"type": "reference",
												"name": "FunctionExternalValueInfoInvalid",
												"id": 316
											},
											{
												"type": "reference",
												"name": "FunctionExternalValueInfoUnknown",
												"id": 320
											}
										]
									}
								},
								{
									"id": 324,
									"name": "FunctionInternalResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/values.ts",
											"line": 342,
											"character": 34
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "FunctionInternalValue",
												"id": 325
											},
											{
												"type": "reference",
												"name": "FunctionInternalErrorResult",
												"id": 478
											}
										]
									}
								},
								{
									"id": 329,
									"name": "FunctionInternalValueInfo",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Internal functions come in three types:\n1. An actual function,\n2. A default value,\n3. A special value to indicate that decoding internal functions isn't supported in this context."
									},
									"sources": [
										{
											"fileName": "format/values.ts",
											"line": 358,
											"character": 37
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "FunctionInternalValueInfoKnown",
												"id": 330
											},
											{
												"type": "reference",
												"name": "FunctionInternalValueInfoException",
												"id": 338
											},
											{
												"type": "reference",
												"name": "FunctionInternalValueInfoUnknown",
												"id": 343
											}
										]
									}
								},
								{
									"id": 235,
									"name": "IntResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/values.ts",
											"line": 89,
											"character": 21
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "IntValue",
												"id": 172
											},
											{
												"type": "reference",
												"name": "IntErrorResult",
												"id": 362
											}
										]
									}
								},
								{
									"id": 274,
									"name": "MagicResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/values.ts",
											"line": 186,
											"character": 23
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "MagicValue",
												"id": 275
											},
											{
												"type": "reference",
												"name": "MagicErrorResult",
												"id": 440
											}
										]
									}
								},
								{
									"id": 249,
									"name": "MappingResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/values.ts",
											"line": 132,
											"character": 25
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "MappingValue",
												"id": 250
											},
											{
												"type": "reference",
												"name": "MappingErrorResult",
												"id": 425
											}
										]
									}
								},
								{
									"id": 230,
									"name": "Result",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/values.ts",
											"line": 42,
											"character": 18
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ElementaryResult",
												"id": 232
											},
											{
												"type": "reference",
												"name": "ArrayResult",
												"id": 243
											},
											{
												"type": "reference",
												"name": "MappingResult",
												"id": 249
											},
											{
												"type": "reference",
												"name": "StructResult",
												"id": 257
											},
											{
												"type": "reference",
												"name": "TupleResult",
												"id": 266
											},
											{
												"type": "reference",
												"name": "MagicResult",
												"id": 274
											},
											{
												"type": "reference",
												"name": "EnumResult",
												"id": 282
											},
											{
												"type": "reference",
												"name": "ContractResult",
												"id": 290
											},
											{
												"type": "reference",
												"name": "FunctionExternalResult",
												"id": 305
											},
											{
												"type": "reference",
												"name": "FunctionInternalResult",
												"id": 324
											}
										]
									}
								},
								{
									"id": 240,
									"name": "StringResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/values.ts",
											"line": 107,
											"character": 24
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "StringValue",
												"id": 205
											},
											{
												"type": "reference",
												"name": "StringErrorResult",
												"id": 399
											}
										]
									}
								},
								{
									"id": 209,
									"name": "StringValueInfo",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "These come in two types: valid strings and malformed strings."
									},
									"sources": [
										{
											"fileName": "format/elementary.ts",
											"line": 99,
											"character": 27
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "StringValueInfoValid",
												"id": 210
											},
											{
												"type": "reference",
												"name": "StringValueInfoMalformed",
												"id": 213
											}
										]
									}
								},
								{
									"id": 257,
									"name": "StructResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/values.ts",
											"line": 151,
											"character": 24
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "StructValue",
												"id": 258
											},
											{
												"type": "reference",
												"name": "StructErrorResult",
												"id": 430
											}
										]
									}
								},
								{
									"id": 266,
									"name": "TupleResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/values.ts",
											"line": 172,
											"character": 23
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "TupleValue",
												"id": 267
											},
											{
												"type": "reference",
												"name": "TupleErrorResult",
												"id": 435
											}
										]
									}
								},
								{
									"id": 242,
									"name": "UfixedResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/values.ts",
											"line": 112,
											"character": 24
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "UfixedValue",
												"id": 223
											},
											{
												"type": "reference",
												"name": "UfixedErrorResult",
												"id": 408
											}
										]
									}
								},
								{
									"id": 234,
									"name": "UintResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/values.ts",
											"line": 87,
											"character": 22
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "UintValue",
												"id": 165
											},
											{
												"type": "reference",
												"name": "UintErrorResult",
												"id": 354
											}
										]
									}
								},
								{
									"id": 231,
									"name": "Value",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "format/values.ts",
											"line": 54,
											"character": 17
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ElementaryValue",
												"id": 163
											},
											{
												"type": "reference",
												"name": "ArrayValue",
												"id": 244
											},
											{
												"type": "reference",
												"name": "MappingValue",
												"id": 250
											},
											{
												"type": "reference",
												"name": "StructValue",
												"id": 258
											},
											{
												"type": "reference",
												"name": "TupleValue",
												"id": 267
											},
											{
												"type": "reference",
												"name": "MagicValue",
												"id": 275
											},
											{
												"type": "reference",
												"name": "EnumValue",
												"id": 283
											},
											{
												"type": "reference",
												"name": "ContractValue",
												"id": 291
											},
											{
												"type": "reference",
												"name": "FunctionExternalValue",
												"id": 306
											},
											{
												"type": "reference",
												"name": "FunctionInternalValue",
												"id": 325
											}
										]
									}
								},
								{
									"id": 162,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "format/values.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:format:values\")"
								}
							],
							"groups": [
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										198,
										244,
										179,
										192,
										185,
										291,
										296,
										301,
										283,
										216,
										306,
										316,
										311,
										320,
										325,
										338,
										330,
										343,
										172,
										254,
										275,
										250,
										263,
										271,
										205,
										213,
										210,
										258,
										267,
										223,
										165
									]
								},
								{
									"title": "Type aliases",
									"kind": 4194304,
									"children": [
										239,
										243,
										236,
										238,
										233,
										237,
										164,
										290,
										295,
										232,
										163,
										282,
										241,
										305,
										310,
										324,
										329,
										235,
										274,
										249,
										230,
										240,
										209,
										257,
										266,
										242,
										234,
										231
									]
								},
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										162
									]
								}
							],
							"sources": [
								{
									"fileName": "format/index.ts",
									"line": 17,
									"character": 15
								}
							]
						}
					],
					"groups": [
						{
							"title": "Modules",
							"kind": 2,
							"children": [
								348,
								3,
								161
							]
						}
					],
					"sources": [
						{
							"fileName": "index-typedoc.ts",
							"line": 12,
							"character": 8
						}
					]
				},
				{
					"id": 816,
					"name": "AbiArgument",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents a decoded argument passed to a transaction or event."
					},
					"children": [
						{
							"id": 818,
							"name": "indexed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether this is an indexed paramter.  Only included for event parameters."
							},
							"sources": [
								{
									"fileName": "types/decoding.ts",
									"line": 223,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 817,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The name of the parameter.  Excluded if the parameter is nameless."
							},
							"sources": [
								{
									"fileName": "types/decoding.ts",
									"line": 219,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 819,
							"name": "value",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The decoded value of the argument.  Note that this is a [[Format.Values.Result|Values.Result]], so it\nmay contain errors (although event decodings should typically not contain errors;\nsee the [[DecodedLog]] documentation for why)."
							},
							"sources": [
								{
									"fileName": "types/decoding.ts",
									"line": 229,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "Values.Result",
								"id": 230
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								818,
								817,
								819
							]
						}
					],
					"sources": [
						{
							"fileName": "types/decoding.ts",
							"line": 215,
							"character": 28
						}
					]
				},
				{
					"id": 822,
					"name": "AnonymousDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents a decoding of a log as an anonymous event."
					},
					"children": [
						{
							"id": 826,
							"name": "abi",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The ABI entry for the event.  You can use this to extract the name, for\ninstance."
							},
							"sources": [
								{
									"fileName": "types/decoding.ts",
									"line": 205,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "EventAbiEntry"
							}
						},
						{
							"id": 825,
							"name": "arguments",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The list of decoded arguments to the event."
							},
							"sources": [
								{
									"fileName": "types/decoding.ts",
									"line": 200,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "AbiArgument",
									"id": 816
								}
							}
						},
						{
							"id": 824,
							"name": "class",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The class of the contract that (according to this decoding) emitted the event, as a Types.ContractType.\nThis may be a library!  When a library emits an event, the EVM records it as the calling contract\nhaving emitted the event, but we decode it as if the library emitted the event, for clarity.\n(The address of the contract the EVM thinks emitted the event can of course be found in the original log.)"
							},
							"sources": [
								{
									"fileName": "types/decoding.ts",
									"line": 196,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "Types.ContractType",
								"id": 135
							}
						},
						{
							"id": 827,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The decoding mode that was used; see the README for more on these."
							},
							"sources": [
								{
									"fileName": "types/decoding.ts",
									"line": 209,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "DecodingMode"
							}
						},
						{
							"id": 823,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is an AnonymousDecoding."
							},
							"sources": [
								{
									"fileName": "types/decoding.ts",
									"line": 189,
									"character": 6
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "anonymous"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								826,
								825,
								824,
								827,
								823
							]
						}
					],
					"sources": [
						{
							"fileName": "types/decoding.ts",
							"line": 185,
							"character": 34
						}
					]
				},
				{
					"id": 828,
					"name": "ConstructorDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents a transaction decoding for a constructor call.\nIt's even possible to decode a library constructor call with this.",
						"text": "NOTE: In the future, this type will also contain information about\nany linked libraries the contract being constructed uses.  However,\nthis is not implemented at present.\n"
					},
					"children": [
						{
							"id": 832,
							"name": "abi",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The ABI entry for the constructor that was called.  Note that although\ndefault constructors don't actually get an ABI entry, we still return an\nABI entry regardless in that case."
							},
							"sources": [
								{
									"fileName": "types/decoding.ts",
									"line": 88,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "ConstructorAbiEntry"
							}
						},
						{
							"id": 831,
							"name": "arguments",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The list of decoded arguments to the constructor.  This will be empty for a\ndefault constructor."
							},
							"sources": [
								{
									"fileName": "types/decoding.ts",
									"line": 82,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "AbiArgument",
									"id": 816
								}
							}
						},
						{
							"id": 833,
							"name": "bytecode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The bytecode of the constructor that was called."
							},
							"sources": [
								{
									"fileName": "types/decoding.ts",
									"line": 92,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 830,
							"name": "class",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The class of contract being constructed, as a Types.ContractType."
							},
							"sources": [
								{
									"fileName": "types/decoding.ts",
									"line": 77,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "Types.ContractType",
								"id": 135
							}
						},
						{
							"id": 834,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The decoding mode that was used; see the README for more on these."
							},
							"sources": [
								{
									"fileName": "types/decoding.ts",
									"line": 96,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "DecodingMode"
							}
						},
						{
							"id": 829,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is a ConstructorDecoding."
							},
							"sources": [
								{
									"fileName": "types/decoding.ts",
									"line": 73,
									"character": 6
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "constructor"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								832,
								831,
								833,
								830,
								834,
								829
							]
						}
					],
					"sources": [
						{
							"fileName": "types/decoding.ts",
							"line": 69,
							"character": 36
						}
					]
				},
				{
					"id": 776,
					"name": "ContractState",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents the state of a contract aside from its storage."
					},
					"children": [
						{
							"id": 778,
							"name": "balanceAsBN",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The contract's balance, in Wei, as a BN."
							},
							"sources": [
								{
									"fileName": "types/interface.ts",
									"line": 21,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "BN"
							}
						},
						{
							"id": 780,
							"name": "code",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The contract's code, as a hexidecimal string."
							},
							"sources": [
								{
									"fileName": "types/interface.ts",
									"line": 29,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 777,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The name of the contract."
							},
							"sources": [
								{
									"fileName": "types/interface.ts",
									"line": 17,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 779,
							"name": "nonceAsBN",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The contract's nonce, as a BN."
							},
							"sources": [
								{
									"fileName": "types/interface.ts",
									"line": 25,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "BN"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								778,
								780,
								777,
								779
							]
						}
					],
					"sources": [
						{
							"fileName": "types/interface.ts",
							"line": 13,
							"character": 30
						}
					]
				},
				{
					"id": 801,
					"name": "DecodedLog",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents a web3 Log object that has been decoded.\nNote that it extends the Log type and just adds an additional field\nwith the decoding."
					},
					"children": [
						{
							"id": 803,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@types/web3/types.d.ts",
									"line": 64,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Log.address"
							}
						},
						{
							"id": 809,
							"name": "blockHash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@types/web3/types.d.ts",
									"line": 70,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Log.blockHash"
							}
						},
						{
							"id": 810,
							"name": "blockNumber",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@types/web3/types.d.ts",
									"line": 71,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Log.blockNumber"
							}
						},
						{
							"id": 804,
							"name": "data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@types/web3/types.d.ts",
									"line": 65,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Log.data"
							}
						},
						{
							"id": 802,
							"name": "decodings",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "An array of possible decodings of the given log -- it's an array because logs can be ambiguous.\nNote that logs are decoded in strict mode, so (with one exception) none of the decodings should\ncontain errors; if a decoding would contain an error, instead it is simply excluded from the\nlist of possible decodings.  The one exception to this is that indexed parameters of reference\ntype cannot meaningfully be decoded, so those will decode to an error.",
								"text": "If there are multiple possible decodings, they will always be listed in the following order:\n\n1. A non-anonymous event coming from the contract itself (there can be at most one of these)\n2. Non-anonymous events coming from libraries\n3. Anonymous events coming from the contract itself\n4. Anonymous events coming from libraries\n\nYou can check the kind and class.contractKind fields to distinguish between these.\n\nIf no possible decodings are found, the list of decodings will be empty.\n\nNote that different decodings may use different decoding modes.\n"
							},
							"sources": [
								{
									"fileName": "types/interface.ts",
									"line": 91,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "LogDecoding",
									"id": 821
								}
							}
						},
						{
							"id": 806,
							"name": "logIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@types/web3/types.d.ts",
									"line": 67,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Log.logIndex"
							}
						},
						{
							"id": 805,
							"name": "topics",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@types/web3/types.d.ts",
									"line": 66,
									"character": 10
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Log.topics"
							}
						},
						{
							"id": 807,
							"name": "transactionHash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@types/web3/types.d.ts",
									"line": 68,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Log.transactionHash"
							}
						},
						{
							"id": 808,
							"name": "transactionIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@types/web3/types.d.ts",
									"line": 69,
									"character": 20
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Log.transactionIndex"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								803,
								809,
								810,
								804,
								802,
								806,
								805,
								807,
								808
							]
						}
					],
					"sources": [
						{
							"fileName": "types/interface.ts",
							"line": 70,
							"character": 27
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Log"
						}
					]
				},
				{
					"id": 785,
					"name": "DecodedTransaction",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents a web3 Transaction object that has been decoded.\nNote that it extends the Transaction type and just adds an additional field\nwith the decoding."
					},
					"children": [
						{
							"id": 789,
							"name": "blockHash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@types/web3/eth/types.d.ts",
									"line": 69,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Transaction.blockHash"
							}
						},
						{
							"id": 790,
							"name": "blockNumber",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@types/web3/eth/types.d.ts",
									"line": 70,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Transaction.blockNumber"
							}
						},
						{
							"id": 786,
							"name": "decoding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The decoding of the transaction.  Note that transactions are not decoded in strict mode,\nso there will always be a decoding, although it may contain errors."
							},
							"sources": [
								{
									"fileName": "types/interface.ts",
									"line": 62,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "CalldataDecoding",
								"id": 820
							}
						},
						{
							"id": 792,
							"name": "from",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@types/web3/eth/types.d.ts",
									"line": 72,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Transaction.from"
							}
						},
						{
							"id": 796,
							"name": "gas",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@types/web3/eth/types.d.ts",
									"line": 76,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Transaction.gas"
							}
						},
						{
							"id": 795,
							"name": "gasPrice",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@types/web3/eth/types.d.ts",
									"line": 75,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Transaction.gasPrice"
							}
						},
						{
							"id": 787,
							"name": "hash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@types/web3/eth/types.d.ts",
									"line": 67,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Transaction.hash"
							}
						},
						{
							"id": 797,
							"name": "input",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@types/web3/eth/types.d.ts",
									"line": 77,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Transaction.input"
							}
						},
						{
							"id": 788,
							"name": "nonce",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@types/web3/eth/types.d.ts",
									"line": 68,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Transaction.nonce"
							}
						},
						{
							"id": 799,
							"name": "r",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@types/web3/eth/types.d.ts",
									"line": 79,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Transaction.r"
							}
						},
						{
							"id": 800,
							"name": "s",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@types/web3/eth/types.d.ts",
									"line": 80,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Transaction.s"
							}
						},
						{
							"id": 793,
							"name": "to",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@types/web3/eth/types.d.ts",
									"line": 73,
									"character": 3
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Transaction.to"
							}
						},
						{
							"id": 791,
							"name": "transactionIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@types/web3/eth/types.d.ts",
									"line": 71,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Transaction.transactionIndex"
							}
						},
						{
							"id": 798,
							"name": "v",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@types/web3/eth/types.d.ts",
									"line": 78,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Transaction.v"
							}
						},
						{
							"id": 794,
							"name": "value",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/home/sniffnoy/truffle/truffle/node_modules/@types/web3/eth/types.d.ts",
									"line": 74,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Transaction.value"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								789,
								790,
								786,
								792,
								796,
								795,
								787,
								797,
								788,
								799,
								800,
								793,
								791,
								798,
								794
							]
						}
					],
					"sources": [
						{
							"fileName": "types/interface.ts",
							"line": 57,
							"character": 35
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Transaction"
						}
					]
				},
				{
					"id": 781,
					"name": "DecodedVariable",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents one of the decoded contract's state variables."
					},
					"children": [
						{
							"id": 783,
							"name": "class",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The class of the contract that defined the variable, as a Types.ContractType.\nNote that this class may differ from that of the contract being decoded, due\nto inheritance."
							},
							"sources": [
								{
									"fileName": "types/interface.ts",
									"line": 45,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "Types.ContractType",
								"id": 135
							}
						},
						{
							"id": 782,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The name of the variable.  Note that due to inheritance, this may not be unique."
							},
							"sources": [
								{
									"fileName": "types/interface.ts",
									"line": 39,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 784,
							"name": "value",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The decoded value of the variable.  Note this is a Values.Result, so it may be an error."
							},
							"sources": [
								{
									"fileName": "types/interface.ts",
									"line": 49,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "Values.Result",
								"id": 230
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								783,
								782,
								784
							]
						}
					],
					"sources": [
						{
							"fileName": "types/interface.ts",
							"line": 35,
							"character": 32
						}
					]
				},
				{
					"id": 835,
					"name": "EventDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents a decoding of a log as a non-anonymous event."
					},
					"children": [
						{
							"id": 839,
							"name": "abi",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The ABI entry for the event.  You can use this to extract the name, for\ninstance."
							},
							"sources": [
								{
									"fileName": "types/decoding.ts",
									"line": 171,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "EventAbiEntry"
							}
						},
						{
							"id": 838,
							"name": "arguments",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The list of decoded arguments to the event."
							},
							"sources": [
								{
									"fileName": "types/decoding.ts",
									"line": 166,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "AbiArgument",
									"id": 816
								}
							}
						},
						{
							"id": 837,
							"name": "class",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The class of the contract that (according to this decoding) emitted the event, as a Types.ContractType.\nThis may be a library!  When a library emits an event, the EVM records it as the calling contract\nhaving emitted the event, but we decode it as if the library emitted the event, for clarity.\n(The address of the contract the EVM thinks emitted the event can of course be found in the original log.)"
							},
							"sources": [
								{
									"fileName": "types/decoding.ts",
									"line": 162,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "Types.ContractType",
								"id": 135
							}
						},
						{
							"id": 841,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The decoding mode that was used; see the README for more on these."
							},
							"sources": [
								{
									"fileName": "types/decoding.ts",
									"line": 179,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "DecodingMode"
							}
						},
						{
							"id": 836,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is an EventDecoding."
							},
							"sources": [
								{
									"fileName": "types/decoding.ts",
									"line": 155,
									"character": 6
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "event"
							}
						},
						{
							"id": 840,
							"name": "selector",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The selector for the event, as a hexadecimal string."
							},
							"sources": [
								{
									"fileName": "types/decoding.ts",
									"line": 175,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								839,
								838,
								837,
								841,
								836,
								840
							]
						}
					],
					"sources": [
						{
							"fileName": "types/decoding.ts",
							"line": 151,
							"character": 30
						}
					]
				},
				{
					"id": 811,
					"name": "EventOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The type of the options parameter to events().  This type will be expanded in the future\nas more filtering options are added."
					},
					"children": [
						{
							"id": 815,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "If included, will restrict to events emitted by the given address.",
								"text": "NOTE: In the contract instance decoder, if omitted, defaults to the\naddress of the contract instance being decoded, rather than not filtering\nby address.  However, this behavior can be turned off by explicitly specifying\naddress as undefined.\n"
							},
							"sources": [
								{
									"fileName": "types/interface.ts",
									"line": 144,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 813,
							"name": "fromBlock",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The earliest block to include events from.  Defaults to \"latest\"."
							},
							"sources": [
								{
									"fileName": "types/interface.ts",
									"line": 131,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "BlockType"
							}
						},
						{
							"id": 812,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "If included, the name parameter will restrict to events with the given name."
							},
							"sources": [
								{
									"fileName": "types/interface.ts",
									"line": 127,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 814,
							"name": "toBlock",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The latest block to include events from.  Defaults to \"latest\"."
							},
							"sources": [
								{
									"fileName": "types/interface.ts",
									"line": 135,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "BlockType"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								815,
								813,
								812,
								814
							]
						}
					],
					"sources": [
						{
							"fileName": "types/interface.ts",
							"line": 123,
							"character": 29
						}
					]
				},
				{
					"id": 842,
					"name": "FunctionDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents a transaction decoding for an ordinary function call to a known class;\nnot a constructor call, not a fallback call."
					},
					"children": [
						{
							"id": 846,
							"name": "abi",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The ABI entry for the function that was called.  You can use this\nto extract the name, for instance."
							},
							"sources": [
								{
									"fileName": "types/decoding.ts",
									"line": 50,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "FunctionAbiEntry"
							}
						},
						{
							"id": 845,
							"name": "arguments",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The list of decoded arguments to the function."
							},
							"sources": [
								{
									"fileName": "types/decoding.ts",
									"line": 45,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "AbiArgument",
									"id": 816
								}
							}
						},
						{
							"id": 844,
							"name": "class",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The class of contract that was called, as a Types.ContractType."
							},
							"sources": [
								{
									"fileName": "types/decoding.ts",
									"line": 41,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "Types.ContractType",
								"id": 135
							}
						},
						{
							"id": 848,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The decoding mode that was used; see the README for more on these."
							},
							"sources": [
								{
									"fileName": "types/decoding.ts",
									"line": 58,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "DecodingMode"
							}
						},
						{
							"id": 843,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is a FunctionDecoding."
							},
							"sources": [
								{
									"fileName": "types/decoding.ts",
									"line": 37,
									"character": 6
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "function"
							}
						},
						{
							"id": 847,
							"name": "selector",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The selector for the function that was called, as a hexadecimal string."
							},
							"sources": [
								{
									"fileName": "types/decoding.ts",
									"line": 54,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								846,
								845,
								844,
								848,
								843,
								847
							]
						}
					],
					"sources": [
						{
							"fileName": "types/decoding.ts",
							"line": 33,
							"character": 33
						}
					]
				},
				{
					"id": 849,
					"name": "MessageDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents a decoding for a call to a known class that does not appear\nto be a function call, i.e., one that will result in the fallback function being invoked\nif there is one."
					},
					"children": [
						{
							"id": 852,
							"name": "abi",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The ABI entry for the contract's fallback function; will be null if\nthere is none."
							},
							"sources": [
								{
									"fileName": "types/decoding.ts",
									"line": 117,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "FallbackAbiEntry"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 851,
							"name": "class",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The class of contract that was called, as a Types.ContractType."
							},
							"sources": [
								{
									"fileName": "types/decoding.ts",
									"line": 112,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "Types.ContractType",
								"id": 135
							}
						},
						{
							"id": 853,
							"name": "data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The data that was sent to the contract."
							},
							"sources": [
								{
									"fileName": "types/decoding.ts",
									"line": 121,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 854,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The decoding mode that was used; see the README for more on these."
							},
							"sources": [
								{
									"fileName": "types/decoding.ts",
									"line": 125,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "DecodingMode"
							}
						},
						{
							"id": 850,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is a MessageDecoding."
							},
							"sources": [
								{
									"fileName": "types/decoding.ts",
									"line": 108,
									"character": 6
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "message"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								852,
								851,
								853,
								854,
								850
							]
						}
					],
					"sources": [
						{
							"fileName": "types/decoding.ts",
							"line": 104,
							"character": 32
						}
					]
				},
				{
					"id": 855,
					"name": "UnknownDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents a function call to an unknown class, or a constructor\ncall constructing an unknown class.  In this case, it's simply not possible\nto return much information."
					},
					"children": [
						{
							"id": 858,
							"name": "data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The data that was sent to the contract, or the bytecode of the constructor."
							},
							"sources": [
								{
									"fileName": "types/decoding.ts",
									"line": 145,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 857,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The decoding mode that was used; see the README for more on these."
							},
							"sources": [
								{
									"fileName": "types/decoding.ts",
									"line": 141,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "DecodingMode"
							}
						},
						{
							"id": 856,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is an UnknownDecoding."
							},
							"sources": [
								{
									"fileName": "types/decoding.ts",
									"line": 137,
									"character": 6
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "unknown"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								858,
								857,
								856
							]
						}
					],
					"sources": [
						{
							"fileName": "types/decoding.ts",
							"line": 133,
							"character": 32
						}
					]
				},
				{
					"id": 820,
					"name": "CalldataDecoding",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A type representing a transaction (calldata) decoding.  As you can see, these come in four types,\neach of which is documented separately."
					},
					"sources": [
						{
							"fileName": "types/decoding.ts",
							"line": 9,
							"character": 28
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "FunctionDecoding",
								"id": 842
							},
							{
								"type": "reference",
								"name": "ConstructorDecoding",
								"id": 828
							},
							{
								"type": "reference",
								"name": "MessageDecoding",
								"id": 849
							},
							{
								"type": "reference",
								"name": "UnknownDecoding",
								"id": 855
							}
						]
					}
				},
				{
					"id": 821,
					"name": "LogDecoding",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A type representing a log (event) decoding.  As you can see, these come in two types, each of which\nis documented separately."
					},
					"sources": [
						{
							"fileName": "types/decoding.ts",
							"line": 19,
							"character": 23
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "EventDecoding",
								"id": 835
							},
							{
								"type": "reference",
								"name": "AnonymousDecoding",
								"id": 822
							}
						]
					}
				},
				{
					"id": 763,
					"name": "forContract",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 764,
							"name": "forContract",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Constructs a contract instance decoder for a given contract instance."
							},
							"parameters": [
								{
									"id": 765,
									"name": "contract",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The contract constructor object corresponding to the type of the contract."
									},
									"type": {
										"type": "reference",
										"name": "ContractObject"
									}
								},
								{
									"id": 766,
									"name": "relevantContracts",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "A list of contract constructor objects for other contracts in the project that may be relevant\n(e.g., providing needed struct or enum definitions, or appearing as a contract type).\nIncluding the contract itself here is fine; so is excluding it."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "ContractObject"
										}
									}
								},
								{
									"id": 767,
									"name": "provider",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The Web3 provider object to use.\n"
									},
									"type": {
										"type": "reference",
										"name": "Provider"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "reference",
										"name": "ContractDecoder",
										"id": 542
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interface/index.ts",
							"line": 37,
							"character": 33
						}
					]
				},
				{
					"id": 757,
					"name": "forContractInstance",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 758,
							"name": "forContractInstance",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Constructs a contract instance decoder for a given contract instance."
							},
							"parameters": [
								{
									"id": 759,
									"name": "contract",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The contract constructor object corresponding to the type of the contract."
									},
									"type": {
										"type": "reference",
										"name": "ContractObject"
									}
								},
								{
									"id": 760,
									"name": "relevantContracts",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "A list of contract constructor objects for other contracts in the project that may be relevant\n(e.g., providing needed struct or enum definitions, or appearing as a contract type).\nIncluding the contract itself here is fine; so is excluding it."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "ContractObject"
										}
									}
								},
								{
									"id": 761,
									"name": "provider",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The Web3 provider object to use."
									},
									"type": {
										"type": "reference",
										"name": "Provider"
									}
								},
								{
									"id": 762,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "The address of the contract instance to decode.  If left out, it will be autodetected on startup.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "reference",
										"name": "ContractInstanceDecoder",
										"id": 588
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interface/index.ts",
							"line": 23,
							"character": 41
						}
					]
				},
				{
					"id": 772,
					"name": "forContractWithDecoder",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 773,
							"name": "forContractWithDecoder",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Constructs a contract decoder given an existing wire decoder for the project."
							},
							"parameters": [
								{
									"id": 774,
									"name": "contract",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The contract constructor object corresponding to the type of the contract."
									},
									"type": {
										"type": "reference",
										"name": "ContractObject"
									}
								},
								{
									"id": 775,
									"name": "decoder",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "An existing wire decoder for the project.\n"
									},
									"type": {
										"type": "reference",
										"name": "WireDecoder",
										"id": 672
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "reference",
										"name": "ContractDecoder",
										"id": 542
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interface/index.ts",
							"line": 61,
							"character": 44
						}
					]
				},
				{
					"id": 768,
					"name": "forProject",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 769,
							"name": "forProject",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Constructs a wire decoder for the project."
							},
							"parameters": [
								{
									"id": 770,
									"name": "contracts",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "A list of contract constructor objects for contracts in the project."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "ContractObject"
										}
									}
								},
								{
									"id": 771,
									"name": "provider",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The Web3 provider object to use.\n"
									},
									"type": {
										"type": "reference",
										"name": "Provider"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "reference",
										"name": "WireDecoder",
										"id": 672
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interface/index.ts",
							"line": 52,
							"character": 32
						}
					]
				}
			],
			"groups": [
				{
					"title": "Modules",
					"kind": 2,
					"children": [
						541,
						736,
						2
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						816,
						822,
						828,
						776,
						801,
						785,
						781,
						835,
						811,
						842,
						849,
						855
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						820,
						821
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						763,
						757,
						772,
						768
					]
				}
			],
			"sources": [
				{
					"fileName": "index-typedoc.ts",
					"line": 1,
					"character": 0
				}
			]
		}
	],
	"groups": [
		{
			"title": "External modules",
			"kind": 1,
			"children": [
				1
			]
		}
	]
}